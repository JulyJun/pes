
STMain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008530  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  08008640  08008640  00018640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c98  08008c98  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08008c98  08008c98  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008c98  08008c98  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c98  08008c98  00018c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c9c  08008c9c  00018c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008ca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a08  200001d4  08008e74  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bdc  08008e74  00020bdc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009cc1  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f0f  00000000  00000000  00029f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a0  00000000  00000000  0002be10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000074f  00000000  00000000  0002c7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018940  00000000  00000000  0002ceff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bd2c  00000000  00000000  0004583f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000894e0  00000000  00000000  0005156b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003974  00000000  00000000  000daa4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000de3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008628 	.word	0x08008628

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08008628 	.word	0x08008628

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	4605      	mov	r5, r0
 8001028:	460c      	mov	r4, r1
 800102a:	2200      	movs	r2, #0
 800102c:	2300      	movs	r3, #0
 800102e:	4628      	mov	r0, r5
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fcc3 	bl	80009bc <__aeabi_dcmplt>
 8001036:	b928      	cbnz	r0, 8001044 <__aeabi_d2lz+0x20>
 8001038:	4628      	mov	r0, r5
 800103a:	4621      	mov	r1, r4
 800103c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001040:	f000 b80a 	b.w	8001058 <__aeabi_d2ulz>
 8001044:	4628      	mov	r0, r5
 8001046:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800104a:	f000 f805 	bl	8001058 <__aeabi_d2ulz>
 800104e:	4240      	negs	r0, r0
 8001050:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001054:	bd38      	pop	{r3, r4, r5, pc}
 8001056:	bf00      	nop

08001058 <__aeabi_d2ulz>:
 8001058:	b5d0      	push	{r4, r6, r7, lr}
 800105a:	2200      	movs	r2, #0
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <__aeabi_d2ulz+0x34>)
 800105e:	4606      	mov	r6, r0
 8001060:	460f      	mov	r7, r1
 8001062:	f7ff fa39 	bl	80004d8 <__aeabi_dmul>
 8001066:	f7ff fd0f 	bl	8000a88 <__aeabi_d2uiz>
 800106a:	4604      	mov	r4, r0
 800106c:	f7ff f9ba 	bl	80003e4 <__aeabi_ui2d>
 8001070:	2200      	movs	r2, #0
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <__aeabi_d2ulz+0x38>)
 8001074:	f7ff fa30 	bl	80004d8 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4630      	mov	r0, r6
 800107e:	4639      	mov	r1, r7
 8001080:	f7ff f872 	bl	8000168 <__aeabi_dsub>
 8001084:	f7ff fd00 	bl	8000a88 <__aeabi_d2uiz>
 8001088:	4621      	mov	r1, r4
 800108a:	bdd0      	pop	{r4, r6, r7, pc}
 800108c:	3df00000 	.word	0x3df00000
 8001090:	41f00000 	.word	0x41f00000

08001094 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 500);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010a8:	68b9      	ldr	r1, [r7, #8]
 80010aa:	4804      	ldr	r0, [pc, #16]	; (80010bc <_write+0x28>)
 80010ac:	f002 fccc 	bl	8003a48 <HAL_UART_Transmit>
	return len;
 80010b0:	687b      	ldr	r3, [r7, #4]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000220 	.word	0x20000220

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	StateTypeDef runState = INIT;
 80010c6:	2300      	movs	r3, #0
 80010c8:	71bb      	strb	r3, [r7, #6]

	memset(com.printingBuffer, 0, UART_BUF_SIZE);
 80010ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ce:	2100      	movs	r1, #0
 80010d0:	4845      	ldr	r0, [pc, #276]	; (80011e8 <main+0x128>)
 80010d2:	f004 ff99 	bl	8006008 <memset>
	com.charSize = 0;
 80010d6:	4b45      	ldr	r3, [pc, #276]	; (80011ec <main+0x12c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
	com.printingBuffer[com.charSize] = '\0';
 80010dc:	4b43      	ldr	r3, [pc, #268]	; (80011ec <main+0x12c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a42      	ldr	r2, [pc, #264]	; (80011ec <main+0x12c>)
 80010e2:	4413      	add	r3, r2
 80010e4:	2200      	movs	r2, #0
 80010e6:	719a      	strb	r2, [r3, #6]
	com.trigger = false;
 80010e8:	4b40      	ldr	r3, [pc, #256]	; (80011ec <main+0x12c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	715a      	strb	r2, [r3, #5]
	memcpy(com.writingBuffer, com.printingBuffer, UART_BUF_SIZE);
 80010ee:	4b3f      	ldr	r3, [pc, #252]	; (80011ec <main+0x12c>)
 80010f0:	4a3e      	ldr	r2, [pc, #248]	; (80011ec <main+0x12c>)
 80010f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80010f6:	1d91      	adds	r1, r2, #6
 80010f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010fc:	4618      	mov	r0, r3
 80010fe:	f005 f822 	bl	8006146 <memcpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001102:	f000 fe75 	bl	8001df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001106:	f000 f883 	bl	8001210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110a:	f000 f95d 	bl	80013c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800110e:	f000 f931 	bl	8001374 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001112:	f000 f8d1 	bl	80012b8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&com.charHolder, sizeof(com.charHolder));
 8001116:	2201      	movs	r2, #1
 8001118:	4935      	ldr	r1, [pc, #212]	; (80011f0 <main+0x130>)
 800111a:	4836      	ldr	r0, [pc, #216]	; (80011f4 <main+0x134>)
 800111c:	f002 fd17 	bl	8003b4e <HAL_UART_Receive_IT>

  printf("device init\r\n");
 8001120:	4835      	ldr	r0, [pc, #212]	; (80011f8 <main+0x138>)
 8001122:	f004 fe91 	bl	8005e48 <puts>
  InitSystem(&runState);
 8001126:	1dbb      	adds	r3, r7, #6
 8001128:	4618      	mov	r0, r3
 800112a:	f000 fa59 	bl	80015e0 <InitSystem>
  printf("init\r\n");
 800112e:	4833      	ldr	r0, [pc, #204]	; (80011fc <main+0x13c>)
 8001130:	f004 fe8a 	bl	8005e48 <puts>
#endif

#if READY_TO_USE
    StatusTypeDef safeRun;

    switch (runState)
 8001134:	79bb      	ldrb	r3, [r7, #6]
 8001136:	3b01      	subs	r3, #1
 8001138:	2b04      	cmp	r3, #4
 800113a:	d847      	bhi.n	80011cc <main+0x10c>
 800113c:	a201      	add	r2, pc, #4	; (adr r2, 8001144 <main+0x84>)
 800113e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001142:	bf00      	nop
 8001144:	08001159 	.word	0x08001159
 8001148:	080011cd 	.word	0x080011cd
 800114c:	08001177 	.word	0x08001177
 8001150:	08001195 	.word	0x08001195
 8001154:	080011b3 	.word	0x080011b3
    {
		case SQL_WRITE_REQUEST:
			safeRun = Request_SQL_Write(&runState);
 8001158:	1dbb      	adds	r3, r7, #6
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fb48 	bl	80017f0 <Request_SQL_Write>
 8001160:	4603      	mov	r3, r0
 8001162:	71fb      	strb	r3, [r7, #7]
			//printf("enter sqlWrite()\r\n");
			assert(safeRun == OK);
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d036      	beq.n	80011d8 <main+0x118>
 800116a:	4b25      	ldr	r3, [pc, #148]	; (8001200 <main+0x140>)
 800116c:	4a25      	ldr	r2, [pc, #148]	; (8001204 <main+0x144>)
 800116e:	21ae      	movs	r1, #174	; 0xae
 8001170:	4825      	ldr	r0, [pc, #148]	; (8001208 <main+0x148>)
 8001172:	f003 fa91 	bl	8004698 <__assert_func>
			break;
		case CONTROL_SYSTEM:
			safeRun = Controller(&runState);
 8001176:	1dbb      	adds	r3, r7, #6
 8001178:	4618      	mov	r0, r3
 800117a:	f000 fb6d 	bl	8001858 <Controller>
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
			//printf("enter Controller()\r\n");
			assert(safeRun == OK);
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d029      	beq.n	80011dc <main+0x11c>
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <main+0x140>)
 800118a:	4a1e      	ldr	r2, [pc, #120]	; (8001204 <main+0x144>)
 800118c:	21b3      	movs	r1, #179	; 0xb3
 800118e:	481e      	ldr	r0, [pc, #120]	; (8001208 <main+0x148>)
 8001190:	f003 fa82 	bl	8004698 <__assert_func>
			break;
		case READ_MODULES:
			safeRun = ReadModules(&runState);
 8001194:	1dbb      	adds	r3, r7, #6
 8001196:	4618      	mov	r0, r3
 8001198:	f000 fb82 	bl	80018a0 <ReadModules>
 800119c:	4603      	mov	r3, r0
 800119e:	71fb      	strb	r3, [r7, #7]
			//printf("enter ReadModules()\r\n");
			assert(safeRun == OK);
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d01c      	beq.n	80011e0 <main+0x120>
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <main+0x140>)
 80011a8:	4a16      	ldr	r2, [pc, #88]	; (8001204 <main+0x144>)
 80011aa:	21b8      	movs	r1, #184	; 0xb8
 80011ac:	4816      	ldr	r0, [pc, #88]	; (8001208 <main+0x148>)
 80011ae:	f003 fa73 	bl	8004698 <__assert_func>
			break;
		case SLEEP:
			safeRun = SleepMode();
 80011b2:	f000 fb93 	bl	80018dc <SleepMode>
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
			//printf("enter SleepMode()\r\n");
			assert(safeRun == OK);
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d011      	beq.n	80011e4 <main+0x124>
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <main+0x140>)
 80011c2:	4a10      	ldr	r2, [pc, #64]	; (8001204 <main+0x144>)
 80011c4:	21bd      	movs	r1, #189	; 0xbd
 80011c6:	4810      	ldr	r0, [pc, #64]	; (8001208 <main+0x148>)
 80011c8:	f003 fa66 	bl	8004698 <__assert_func>
			break;
		default:
			// should not enter
			assert(false);
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <main+0x14c>)
 80011ce:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <main+0x144>)
 80011d0:	21c1      	movs	r1, #193	; 0xc1
 80011d2:	480d      	ldr	r0, [pc, #52]	; (8001208 <main+0x148>)
 80011d4:	f003 fa60 	bl	8004698 <__assert_func>
			break;
 80011d8:	bf00      	nop
 80011da:	e7ab      	b.n	8001134 <main+0x74>
			break;
 80011dc:	bf00      	nop
 80011de:	e7a9      	b.n	8001134 <main+0x74>
			break;
 80011e0:	bf00      	nop
 80011e2:	e7a7      	b.n	8001134 <main+0x74>
			break;
 80011e4:	bf00      	nop
  {
 80011e6:	e7a5      	b.n	8001134 <main+0x74>
 80011e8:	2000026e 	.word	0x2000026e
 80011ec:	20000268 	.word	0x20000268
 80011f0:	2000026c 	.word	0x2000026c
 80011f4:	20000220 	.word	0x20000220
 80011f8:	08008648 	.word	0x08008648
 80011fc:	08008658 	.word	0x08008658
 8001200:	08008660 	.word	0x08008660
 8001204:	08008820 	.word	0x08008820
 8001208:	08008670 	.word	0x08008670
 800120c:	08008684 	.word	0x08008684

08001210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b094      	sub	sp, #80	; 0x50
 8001214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800121a:	2228      	movs	r2, #40	; 0x28
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f004 fef2 	bl	8006008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001240:	2302      	movs	r3, #2
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001244:	2301      	movs	r3, #1
 8001246:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001248:	2310      	movs	r3, #16
 800124a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800124c:	2302      	movs	r3, #2
 800124e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001250:	2300      	movs	r3, #0
 8001252:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001254:	2300      	movs	r3, #0
 8001256:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001258:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800125c:	4618      	mov	r0, r3
 800125e:	f001 fe27 	bl	8002eb0 <HAL_RCC_OscConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001268:	f000 fbfa 	bl	8001a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126c:	230f      	movs	r3, #15
 800126e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001270:	2302      	movs	r3, #2
 8001272:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f002 f894 	bl	80033b4 <HAL_RCC_ClockConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001292:	f000 fbe5 	bl	8001a60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001296:	2302      	movs	r3, #2
 8001298:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	4618      	mov	r0, r3
 80012a2:	f002 fa15 	bl	80036d0 <HAL_RCCEx_PeriphCLKConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80012ac:	f000 fbd8 	bl	8001a60 <Error_Handler>
  }
}
 80012b0:	bf00      	nop
 80012b2:	3750      	adds	r7, #80	; 0x50
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012c8:	4b28      	ldr	r3, [pc, #160]	; (800136c <MX_ADC1_Init+0xb4>)
 80012ca:	4a29      	ldr	r2, [pc, #164]	; (8001370 <MX_ADC1_Init+0xb8>)
 80012cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012ce:	4b27      	ldr	r3, [pc, #156]	; (800136c <MX_ADC1_Init+0xb4>)
 80012d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012d6:	4b25      	ldr	r3, [pc, #148]	; (800136c <MX_ADC1_Init+0xb4>)
 80012d8:	2200      	movs	r2, #0
 80012da:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80012dc:	4b23      	ldr	r3, [pc, #140]	; (800136c <MX_ADC1_Init+0xb4>)
 80012de:	2201      	movs	r2, #1
 80012e0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.NbrOfDiscConversion = 3;
 80012e2:	4b22      	ldr	r3, [pc, #136]	; (800136c <MX_ADC1_Init+0xb4>)
 80012e4:	2203      	movs	r2, #3
 80012e6:	619a      	str	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012e8:	4b20      	ldr	r3, [pc, #128]	; (800136c <MX_ADC1_Init+0xb4>)
 80012ea:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80012ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012f0:	4b1e      	ldr	r3, [pc, #120]	; (800136c <MX_ADC1_Init+0xb4>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80012f6:	4b1d      	ldr	r3, [pc, #116]	; (800136c <MX_ADC1_Init+0xb4>)
 80012f8:	2203      	movs	r2, #3
 80012fa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012fc:	481b      	ldr	r0, [pc, #108]	; (800136c <MX_ADC1_Init+0xb4>)
 80012fe:	f000 fe19 	bl	8001f34 <HAL_ADC_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_ADC1_Init+0x54>
  {
    Error_Handler();
 8001308:	f000 fbaa 	bl	8001a60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800130c:	2300      	movs	r3, #0
 800130e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001310:	2301      	movs	r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	4619      	mov	r1, r3
 800131c:	4813      	ldr	r0, [pc, #76]	; (800136c <MX_ADC1_Init+0xb4>)
 800131e:	f001 f8a1 	bl	8002464 <HAL_ADC_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001328:	f000 fb9a 	bl	8001a60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800132c:	2301      	movs	r3, #1
 800132e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001330:	2302      	movs	r3, #2
 8001332:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	4619      	mov	r1, r3
 8001338:	480c      	ldr	r0, [pc, #48]	; (800136c <MX_ADC1_Init+0xb4>)
 800133a:	f001 f893 	bl	8002464 <HAL_ADC_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001344:	f000 fb8c 	bl	8001a60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001348:	2304      	movs	r3, #4
 800134a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800134c:	2303      	movs	r3, #3
 800134e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	4619      	mov	r1, r3
 8001354:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_ADC1_Init+0xb4>)
 8001356:	f001 f885 	bl	8002464 <HAL_ADC_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001360:	f000 fb7e 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200001f0 	.word	0x200001f0
 8001370:	40012400 	.word	0x40012400

08001374 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 800137a:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <MX_USART2_UART_Init+0x50>)
 800137c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 8001380:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001384:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 800139a:	220c      	movs	r2, #12
 800139c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139e:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 80013ac:	f002 fafc 	bl	80039a8 <HAL_UART_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013b6:	f000 fb53 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000220 	.word	0x20000220
 80013c4:	40004400 	.word	0x40004400

080013c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013dc:	4b4b      	ldr	r3, [pc, #300]	; (800150c <MX_GPIO_Init+0x144>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a4a      	ldr	r2, [pc, #296]	; (800150c <MX_GPIO_Init+0x144>)
 80013e2:	f043 0310 	orr.w	r3, r3, #16
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b48      	ldr	r3, [pc, #288]	; (800150c <MX_GPIO_Init+0x144>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0310 	and.w	r3, r3, #16
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f4:	4b45      	ldr	r3, [pc, #276]	; (800150c <MX_GPIO_Init+0x144>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	4a44      	ldr	r2, [pc, #272]	; (800150c <MX_GPIO_Init+0x144>)
 80013fa:	f043 0320 	orr.w	r3, r3, #32
 80013fe:	6193      	str	r3, [r2, #24]
 8001400:	4b42      	ldr	r3, [pc, #264]	; (800150c <MX_GPIO_Init+0x144>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	f003 0320 	and.w	r3, r3, #32
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	4b3f      	ldr	r3, [pc, #252]	; (800150c <MX_GPIO_Init+0x144>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a3e      	ldr	r2, [pc, #248]	; (800150c <MX_GPIO_Init+0x144>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b3c      	ldr	r3, [pc, #240]	; (800150c <MX_GPIO_Init+0x144>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001424:	4b39      	ldr	r3, [pc, #228]	; (800150c <MX_GPIO_Init+0x144>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	4a38      	ldr	r2, [pc, #224]	; (800150c <MX_GPIO_Init+0x144>)
 800142a:	f043 0308 	orr.w	r3, r3, #8
 800142e:	6193      	str	r3, [r2, #24]
 8001430:	4b36      	ldr	r3, [pc, #216]	; (800150c <MX_GPIO_Init+0x144>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIR_GPIO_Port, PIR_Pin, GPIO_PIN_RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001442:	4833      	ldr	r0, [pc, #204]	; (8001510 <MX_GPIO_Init+0x148>)
 8001444:	f001 fce6 	bl	8002e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_Pin|RELAY_SWITCH_Pin, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800144e:	4831      	ldr	r0, [pc, #196]	; (8001514 <MX_GPIO_Init+0x14c>)
 8001450:	f001 fce0 	bl	8002e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8001454:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001458:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800145a:	2303      	movs	r3, #3
 800145c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4619      	mov	r1, r3
 8001464:	482c      	ldr	r0, [pc, #176]	; (8001518 <MX_GPIO_Init+0x150>)
 8001466:	f001 fb51 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800146a:	2307      	movs	r3, #7
 800146c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800146e:	2303      	movs	r3, #3
 8001470:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	4828      	ldr	r0, [pc, #160]	; (800151c <MX_GPIO_Init+0x154>)
 800147a:	f001 fb47 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA8
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800147e:	f649 53e0 	movw	r3, #40416	; 0x9de0
 8001482:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001484:	2303      	movs	r3, #3
 8001486:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	4820      	ldr	r0, [pc, #128]	; (8001510 <MX_GPIO_Init+0x148>)
 8001490:	f001 fb3c 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001494:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8001498:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800149a:	2303      	movs	r3, #3
 800149c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	481b      	ldr	r0, [pc, #108]	; (8001514 <MX_GPIO_Init+0x14c>)
 80014a6:	f001 fb31 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PIR_Pin */
  GPIO_InitStruct.Pin = PIR_Pin;
 80014aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2302      	movs	r3, #2
 80014ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	4813      	ldr	r0, [pc, #76]	; (8001510 <MX_GPIO_Init+0x148>)
 80014c4:	f001 fb22 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_Pin RELAY_SWITCH_Pin */
  GPIO_InitStruct.Pin = RELAY_Pin|RELAY_SWITCH_Pin;
 80014c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2302      	movs	r3, #2
 80014d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	480c      	ldr	r0, [pc, #48]	; (8001514 <MX_GPIO_Init+0x14c>)
 80014e2:	f001 fb13 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <MX_GPIO_Init+0x158>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
 80014fc:	4a08      	ldr	r2, [pc, #32]	; (8001520 <MX_GPIO_Init+0x158>)
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	6053      	str	r3, [r2, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001502:	bf00      	nop
 8001504:	3728      	adds	r7, #40	; 0x28
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000
 8001510:	40010800 	.word	0x40010800
 8001514:	40010c00 	.word	0x40010c00
 8001518:	40011000 	.word	0x40011000
 800151c:	40011400 	.word	0x40011400
 8001520:	40010000 	.word	0x40010000

08001524 <HAL_UART_RxCpltCallback>:
/*
 * @note: buffer size is intentionally set to 1, for reading enter key
 * 				2Xspacebar equals to enter key
 * */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	WakeUPMode();
 800152c:	f000 f9f8 	bl	8001920 <WakeUPMode>
	if(huart->Instance == USART2)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a24      	ldr	r2, [pc, #144]	; (80015c8 <HAL_UART_RxCpltCallback+0xa4>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d13c      	bne.n	80015b4 <HAL_UART_RxCpltCallback+0x90>
	{
		if(com.charHolder == '\n')
 800153a:	4b24      	ldr	r3, [pc, #144]	; (80015cc <HAL_UART_RxCpltCallback+0xa8>)
 800153c:	791b      	ldrb	r3, [r3, #4]
 800153e:	2b0a      	cmp	r3, #10
 8001540:	d122      	bne.n	8001588 <HAL_UART_RxCpltCallback+0x64>
		{
			printf(com.printingBuffer);
 8001542:	4823      	ldr	r0, [pc, #140]	; (80015d0 <HAL_UART_RxCpltCallback+0xac>)
 8001544:	f004 fc1a 	bl	8005d7c <iprintf>
			printf("\r\n");
 8001548:	4822      	ldr	r0, [pc, #136]	; (80015d4 <HAL_UART_RxCpltCallback+0xb0>)
 800154a:	f004 fc7d 	bl	8005e48 <puts>
			memcpy(com.writingBuffer, com.printingBuffer, sizeof(com.printingBuffer));
 800154e:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <HAL_UART_RxCpltCallback+0xa8>)
 8001550:	4a1e      	ldr	r2, [pc, #120]	; (80015cc <HAL_UART_RxCpltCallback+0xa8>)
 8001552:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001556:	1d91      	adds	r1, r2, #6
 8001558:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800155c:	4618      	mov	r0, r3
 800155e:	f004 fdf2 	bl	8006146 <memcpy>
			memset(com.printingBuffer, 0, sizeof(com.printingBuffer));
 8001562:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001566:	2100      	movs	r1, #0
 8001568:	4819      	ldr	r0, [pc, #100]	; (80015d0 <HAL_UART_RxCpltCallback+0xac>)
 800156a:	f004 fd4d 	bl	8006008 <memset>
			com.charSize = 0;
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <HAL_UART_RxCpltCallback+0xa8>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
			com.printingBuffer[com.charSize] = '\0';
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <HAL_UART_RxCpltCallback+0xa8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a14      	ldr	r2, [pc, #80]	; (80015cc <HAL_UART_RxCpltCallback+0xa8>)
 800157a:	4413      	add	r3, r2
 800157c:	2200      	movs	r2, #0
 800157e:	719a      	strb	r2, [r3, #6]
			com.trigger = true;
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_UART_RxCpltCallback+0xa8>)
 8001582:	2201      	movs	r2, #1
 8001584:	715a      	strb	r2, [r3, #5]
 8001586:	e015      	b.n	80015b4 <HAL_UART_RxCpltCallback+0x90>
		}
		else
		{
			WakeUPMode();
 8001588:	f000 f9ca 	bl	8001920 <WakeUPMode>
			com.printingBuffer[com.charSize] = com.charHolder;
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <HAL_UART_RxCpltCallback+0xa8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <HAL_UART_RxCpltCallback+0xa8>)
 8001592:	7911      	ldrb	r1, [r2, #4]
 8001594:	4a0d      	ldr	r2, [pc, #52]	; (80015cc <HAL_UART_RxCpltCallback+0xa8>)
 8001596:	4413      	add	r3, r2
 8001598:	460a      	mov	r2, r1
 800159a:	719a      	strb	r2, [r3, #6]
			com.printingBuffer[com.charSize + 1] = '\0';
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_UART_RxCpltCallback+0xa8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <HAL_UART_RxCpltCallback+0xa8>)
 80015a4:	4413      	add	r3, r2
 80015a6:	2200      	movs	r2, #0
 80015a8:	719a      	strb	r2, [r3, #6]
			// printf("%c", com.charHolder);
			com.charSize++;
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <HAL_UART_RxCpltCallback+0xa8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	3301      	adds	r3, #1
 80015b0:	4a06      	ldr	r2, [pc, #24]	; (80015cc <HAL_UART_RxCpltCallback+0xa8>)
 80015b2:	6013      	str	r3, [r2, #0]
		}
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t *)&com.charHolder, sizeof(com.charHolder));
 80015b4:	2201      	movs	r2, #1
 80015b6:	4908      	ldr	r1, [pc, #32]	; (80015d8 <HAL_UART_RxCpltCallback+0xb4>)
 80015b8:	4808      	ldr	r0, [pc, #32]	; (80015dc <HAL_UART_RxCpltCallback+0xb8>)
 80015ba:	f002 fac8 	bl	8003b4e <HAL_UART_Receive_IT>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40004400 	.word	0x40004400
 80015cc:	20000268 	.word	0x20000268
 80015d0:	2000026e 	.word	0x2000026e
 80015d4:	0800868c 	.word	0x0800868c
 80015d8:	2000026c 	.word	0x2000026c
 80015dc:	20000220 	.word	0x20000220

080015e0 <InitSystem>:

StatusTypeDef InitSystem(StateTypeDef* runState)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	StatusTypeDef status;
	status = HandShake();
 80015e8:	f000 f848 	bl	800167c <HandShake>
 80015ec:	4603      	mov	r3, r0
 80015ee:	73fb      	strb	r3, [r7, #15]
	assert(status == OK);
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d006      	beq.n	8001604 <InitSystem+0x24>
 80015f6:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <InitSystem+0x90>)
 80015f8:	4a1e      	ldr	r2, [pc, #120]	; (8001674 <InitSystem+0x94>)
 80015fa:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 80015fe:	481e      	ldr	r0, [pc, #120]	; (8001678 <InitSystem+0x98>)
 8001600:	f003 f84a 	bl	8004698 <__assert_func>

	status = ReadModules(runState);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 f94b 	bl	80018a0 <ReadModules>
 800160a:	4603      	mov	r3, r0
 800160c:	73fb      	strb	r3, [r7, #15]
	assert(status == OK);
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d006      	beq.n	8001622 <InitSystem+0x42>
 8001614:	4b16      	ldr	r3, [pc, #88]	; (8001670 <InitSystem+0x90>)
 8001616:	4a17      	ldr	r2, [pc, #92]	; (8001674 <InitSystem+0x94>)
 8001618:	f240 11d1 	movw	r1, #465	; 0x1d1
 800161c:	4816      	ldr	r0, [pc, #88]	; (8001678 <InitSystem+0x98>)
 800161e:	f003 f83b 	bl	8004698 <__assert_func>

	status = Request_SQL_Read(runState);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 f852 	bl	80016cc <Request_SQL_Read>
 8001628:	4603      	mov	r3, r0
 800162a:	73fb      	strb	r3, [r7, #15]
	assert(status == OK);
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d006      	beq.n	8001640 <InitSystem+0x60>
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <InitSystem+0x90>)
 8001634:	4a0f      	ldr	r2, [pc, #60]	; (8001674 <InitSystem+0x94>)
 8001636:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800163a:	480f      	ldr	r0, [pc, #60]	; (8001678 <InitSystem+0x98>)
 800163c:	f003 f82c 	bl	8004698 <__assert_func>

	status = Controller(runState);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 f909 	bl	8001858 <Controller>
 8001646:	4603      	mov	r3, r0
 8001648:	73fb      	strb	r3, [r7, #15]
	assert(status == OK);
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d006      	beq.n	800165e <InitSystem+0x7e>
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <InitSystem+0x90>)
 8001652:	4a08      	ldr	r2, [pc, #32]	; (8001674 <InitSystem+0x94>)
 8001654:	f240 11d7 	movw	r1, #471	; 0x1d7
 8001658:	4807      	ldr	r0, [pc, #28]	; (8001678 <InitSystem+0x98>)
 800165a:	f003 f81d 	bl	8004698 <__assert_func>

	*runState = SQL_WRITE_REQUEST;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	701a      	strb	r2, [r3, #0]
	return OK;
 8001664:	2301      	movs	r3, #1
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	08008690 	.word	0x08008690
 8001674:	08008828 	.word	0x08008828
 8001678:	08008670 	.word	0x08008670

0800167c <HandShake>:
StatusTypeDef HandShake()
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	printf("Hello PC\r\n");
 8001680:	480e      	ldr	r0, [pc, #56]	; (80016bc <HandShake+0x40>)
 8001682:	f004 fbe1 	bl	8005e48 <puts>
	HAL_Delay(5000);
 8001686:	f241 3088 	movw	r0, #5000	; 0x1388
 800168a:	f000 fc13 	bl	8001eb4 <HAL_Delay>
	while(strncmp(com.writingBuffer, "Hello ST\r", sizeof("Hello ST\r") - 1) != 0)
 800168e:	e006      	b.n	800169e <HandShake+0x22>
	{
		printf("Hello PC\r\n");
 8001690:	480a      	ldr	r0, [pc, #40]	; (80016bc <HandShake+0x40>)
 8001692:	f004 fbd9 	bl	8005e48 <puts>
		HAL_Delay(5000);
 8001696:	f241 3088 	movw	r0, #5000	; 0x1388
 800169a:	f000 fc0b 	bl	8001eb4 <HAL_Delay>
	while(strncmp(com.writingBuffer, "Hello ST\r", sizeof("Hello ST\r") - 1) != 0)
 800169e:	2209      	movs	r2, #9
 80016a0:	4907      	ldr	r1, [pc, #28]	; (80016c0 <HandShake+0x44>)
 80016a2:	4808      	ldr	r0, [pc, #32]	; (80016c4 <HandShake+0x48>)
 80016a4:	f004 fcb8 	bl	8006018 <strncmp>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HandShake+0x14>
	}
	printf("HandShake Successful\r\n");
 80016ae:	4806      	ldr	r0, [pc, #24]	; (80016c8 <HandShake+0x4c>)
 80016b0:	f004 fbca 	bl	8005e48 <puts>

	return OK;
 80016b4:	2301      	movs	r3, #1
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	080086a0 	.word	0x080086a0
 80016c0:	080086ac 	.word	0x080086ac
 80016c4:	2000066e 	.word	0x2000066e
 80016c8:	080086b8 	.word	0x080086b8

080016cc <Request_SQL_Read>:
StatusTypeDef Request_SQL_Read(StateTypeDef* runState)
{
 80016cc:	b5b0      	push	{r4, r5, r7, lr}
 80016ce:	b08e      	sub	sp, #56	; 0x38
 80016d0:	af02      	add	r7, sp, #8
 80016d2:	6078      	str	r0, [r7, #4]
	char value[30] = {0,};
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	f107 0310 	add.w	r3, r7, #16
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
 80016e8:	615a      	str	r2, [r3, #20]
 80016ea:	831a      	strh	r2, [r3, #24]
	char* ptr;
	int humidPt = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	printf("Request SQL Data\r\n");
 80016f0:	4836      	ldr	r0, [pc, #216]	; (80017cc <Request_SQL_Read+0x100>)
 80016f2:	f004 fba9 	bl	8005e48 <puts>
		}
		printf("trapped\r\n");
		HAL_Delay(2000);
	}
#endif
	printf("Req TEMP\r\n");
 80016f6:	4836      	ldr	r0, [pc, #216]	; (80017d0 <Request_SQL_Read+0x104>)
 80016f8:	f004 fba6 	bl	8005e48 <puts>
	while(com.trigger == false)
 80016fc:	e002      	b.n	8001704 <Request_SQL_Read+0x38>
	{
		// loop till trigger on
		HAL_Delay(50);
 80016fe:	2032      	movs	r0, #50	; 0x32
 8001700:	f000 fbd8 	bl	8001eb4 <HAL_Delay>
	while(com.trigger == false)
 8001704:	4b33      	ldr	r3, [pc, #204]	; (80017d4 <Request_SQL_Read+0x108>)
 8001706:	795b      	ldrb	r3, [r3, #5]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f8      	beq.n	80016fe <Request_SQL_Read+0x32>
	}
	com.trigger = false;
 800170c:	4b31      	ldr	r3, [pc, #196]	; (80017d4 <Request_SQL_Read+0x108>)
 800170e:	2200      	movs	r2, #0
 8001710:	715a      	strb	r2, [r3, #5]
	DataReader_g.temperature_out = strtod(com.writingBuffer, NULL);
 8001712:	2100      	movs	r1, #0
 8001714:	4830      	ldr	r0, [pc, #192]	; (80017d8 <Request_SQL_Read+0x10c>)
 8001716:	f003 fdf3 	bl	8005300 <strtod>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f7ff f9d1 	bl	8000ac8 <__aeabi_d2f>
 8001726:	4603      	mov	r3, r0
 8001728:	4a2c      	ldr	r2, [pc, #176]	; (80017dc <Request_SQL_Read+0x110>)
 800172a:	6113      	str	r3, [r2, #16]
	printf("temp in: %f, tmp out: %f\r\n", DataReader_g.temperature_in, DataReader_g.temperature_out);
 800172c:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <Request_SQL_Read+0x110>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe fe79 	bl	8000428 <__aeabi_f2d>
 8001736:	4604      	mov	r4, r0
 8001738:	460d      	mov	r5, r1
 800173a:	4b28      	ldr	r3, [pc, #160]	; (80017dc <Request_SQL_Read+0x110>)
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe fe72 	bl	8000428 <__aeabi_f2d>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	e9cd 2300 	strd	r2, r3, [sp]
 800174c:	4622      	mov	r2, r4
 800174e:	462b      	mov	r3, r5
 8001750:	4823      	ldr	r0, [pc, #140]	; (80017e0 <Request_SQL_Read+0x114>)
 8001752:	f004 fb13 	bl	8005d7c <iprintf>

	printf("Req HUMID\r\n");
 8001756:	4823      	ldr	r0, [pc, #140]	; (80017e4 <Request_SQL_Read+0x118>)
 8001758:	f004 fb76 	bl	8005e48 <puts>
	while(com.trigger == false)
 800175c:	e002      	b.n	8001764 <Request_SQL_Read+0x98>
	{
		// loop till trigger on
		HAL_Delay(50);
 800175e:	2032      	movs	r0, #50	; 0x32
 8001760:	f000 fba8 	bl	8001eb4 <HAL_Delay>
	while(com.trigger == false)
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <Request_SQL_Read+0x108>)
 8001766:	795b      	ldrb	r3, [r3, #5]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f8      	beq.n	800175e <Request_SQL_Read+0x92>
	}
	com.trigger = false;
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <Request_SQL_Read+0x108>)
 800176e:	2200      	movs	r2, #0
 8001770:	715a      	strb	r2, [r3, #5]
	DataReader_g.humidity_out = strtod(com.writingBuffer, NULL);
 8001772:	2100      	movs	r1, #0
 8001774:	4818      	ldr	r0, [pc, #96]	; (80017d8 <Request_SQL_Read+0x10c>)
 8001776:	f003 fdc3 	bl	8005300 <strtod>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	f7ff f9a1 	bl	8000ac8 <__aeabi_d2f>
 8001786:	4603      	mov	r3, r0
 8001788:	4a14      	ldr	r2, [pc, #80]	; (80017dc <Request_SQL_Read+0x110>)
 800178a:	6153      	str	r3, [r2, #20]
	printf("humi in: %f, humi out: %f\r\n", DataReader_g.humidity_in, DataReader_g.humidity_out);
 800178c:	4b13      	ldr	r3, [pc, #76]	; (80017dc <Request_SQL_Read+0x110>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fe49 	bl	8000428 <__aeabi_f2d>
 8001796:	4604      	mov	r4, r0
 8001798:	460d      	mov	r5, r1
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <Request_SQL_Read+0x110>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fe42 	bl	8000428 <__aeabi_f2d>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	e9cd 2300 	strd	r2, r3, [sp]
 80017ac:	4622      	mov	r2, r4
 80017ae:	462b      	mov	r3, r5
 80017b0:	480d      	ldr	r0, [pc, #52]	; (80017e8 <Request_SQL_Read+0x11c>)
 80017b2:	f004 fae3 	bl	8005d7c <iprintf>
	printf("end read sql\r\n");
 80017b6:	480d      	ldr	r0, [pc, #52]	; (80017ec <Request_SQL_Read+0x120>)
 80017b8:	f004 fb46 	bl	8005e48 <puts>

	*runState = CONTROL_SYSTEM;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2203      	movs	r2, #3
 80017c0:	701a      	strb	r2, [r3, #0]
	return OK;
 80017c2:	2301      	movs	r3, #1
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3730      	adds	r7, #48	; 0x30
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bdb0      	pop	{r4, r5, r7, pc}
 80017cc:	080086d0 	.word	0x080086d0
 80017d0:	080086e4 	.word	0x080086e4
 80017d4:	20000268 	.word	0x20000268
 80017d8:	2000066e 	.word	0x2000066e
 80017dc:	20000a70 	.word	0x20000a70
 80017e0:	080086f0 	.word	0x080086f0
 80017e4:	0800870c 	.word	0x0800870c
 80017e8:	08008718 	.word	0x08008718
 80017ec:	08008734 	.word	0x08008734

080017f0 <Request_SQL_Write>:
StatusTypeDef Request_SQL_Write(StateTypeDef* runState)
{
 80017f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af04      	add	r7, sp, #16
 80017f8:	6078      	str	r0, [r7, #4]
	printf("Req Write << temp: %.2f, humidity: %.2f, gas: %.2f\r\n", DataReader_g.temperature_in, DataReader_g.humidity_in, DataReader_g.gas);
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <Request_SQL_Write+0x60>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fe12 	bl	8000428 <__aeabi_f2d>
 8001804:	4680      	mov	r8, r0
 8001806:	4689      	mov	r9, r1
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <Request_SQL_Write+0x60>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fe0b 	bl	8000428 <__aeabi_f2d>
 8001812:	4604      	mov	r4, r0
 8001814:	460d      	mov	r5, r1
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <Request_SQL_Write+0x60>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fe04 	bl	8000428 <__aeabi_f2d>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001828:	e9cd 4500 	strd	r4, r5, [sp]
 800182c:	4642      	mov	r2, r8
 800182e:	464b      	mov	r3, r9
 8001830:	4808      	ldr	r0, [pc, #32]	; (8001854 <Request_SQL_Write+0x64>)
 8001832:	f004 faa3 	bl	8005d7c <iprintf>
	*runState = SLEEP;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2205      	movs	r2, #5
 800183a:	701a      	strb	r2, [r3, #0]
	*runState = READ_MODULES;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2204      	movs	r2, #4
 8001840:	701a      	strb	r2, [r3, #0]
	return OK;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800184e:	bf00      	nop
 8001850:	20000a70 	.word	0x20000a70
 8001854:	08008744 	.word	0x08008744

08001858 <Controller>:
StatusTypeDef Controller(StateTypeDef* runState)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(RELAY_GPIO_Port, RELAY_Pin);
 8001860:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001864:	480c      	ldr	r0, [pc, #48]	; (8001898 <Controller+0x40>)
 8001866:	f001 faed 	bl	8002e44 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(RELAY_SWITCH_GPIO_Port, RELAY_SWITCH_Pin);
 800186a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800186e:	480a      	ldr	r0, [pc, #40]	; (8001898 <Controller+0x40>)
 8001870:	f001 fae8 	bl	8002e44 <HAL_GPIO_TogglePin>
	*runState = READ_MODULES;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2204      	movs	r2, #4
 8001878:	701a      	strb	r2, [r3, #0]
	*runState = SQL_WRITE_REQUEST;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2201      	movs	r2, #1
 800187e:	701a      	strb	r2, [r3, #0]

	printf("END OF CONTROL\r\n");
 8001880:	4806      	ldr	r0, [pc, #24]	; (800189c <Controller+0x44>)
 8001882:	f004 fae1 	bl	8005e48 <puts>
	HAL_Delay(25000);
 8001886:	f246 10a8 	movw	r0, #25000	; 0x61a8
 800188a:	f000 fb13 	bl	8001eb4 <HAL_Delay>
	return OK;
 800188e:	2301      	movs	r3, #1
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40010c00 	.word	0x40010c00
 800189c:	0800877c 	.word	0x0800877c

080018a0 <ReadModules>:
StatusTypeDef ReadModules(StateTypeDef* runState)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	if(*runState == INIT)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d107      	bne.n	80018c0 <ReadModules+0x20>
	{
		GetGasValue();
 80018b0:	f000 f83e 	bl	8001930 <GetGasValue>
		GetTempHumidValue();
 80018b4:	f000 f868 	bl	8001988 <GetTempHumidValue>
		printf("read modules");
 80018b8:	4807      	ldr	r0, [pc, #28]	; (80018d8 <ReadModules+0x38>)
 80018ba:	f004 fa5f 	bl	8005d7c <iprintf>
 80018be:	e005      	b.n	80018cc <ReadModules+0x2c>
	}
	else
	{
		*runState = SQL_WRITE_REQUEST;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
		*runState = CONTROL_SYSTEM;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2203      	movs	r2, #3
 80018ca:	701a      	strb	r2, [r3, #0]
	}

	return OK;
 80018cc:	2301      	movs	r3, #1
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	0800878c 	.word	0x0800878c

080018dc <SleepMode>:

// reference: https://wiki.st.com/stm32mcu/wiki/Getting_started_with_PWR
StatusTypeDef SleepMode()
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
	printf("Zzz\r\n");
 80018e2:	480d      	ldr	r0, [pc, #52]	; (8001918 <SleepMode+0x3c>)
 80018e4:	f004 fab0 	bl	8005e48 <puts>
	// SUSPEND SYSTICK
	HAL_SuspendTick();
 80018e8:	f000 fb08 	bl	8001efc <HAL_SuspendTick>
	// ENABLE POWER PERIPHERAL
	__HAL_RCC_PWR_CLK_ENABLE();
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <SleepMode+0x40>)
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	4a0a      	ldr	r2, [pc, #40]	; (800191c <SleepMode+0x40>)
 80018f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f6:	61d3      	str	r3, [r2, #28]
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <SleepMode+0x40>)
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	687b      	ldr	r3, [r7, #4]
	// SLEEP MODE
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001904:	2101      	movs	r1, #1
 8001906:	2000      	movs	r0, #0
 8001908:	f001 fab6 	bl	8002e78 <HAL_PWR_EnterSLEEPMode>
}
 800190c:	bf00      	nop
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	0800879c 	.word	0x0800879c
 800191c:	40021000 	.word	0x40021000

08001920 <WakeUPMode>:

StatusTypeDef WakeUPMode()
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	HAL_ResumeTick();
 8001924:	f000 faf8 	bl	8001f18 <HAL_ResumeTick>

	return OK;
 8001928:	2301      	movs	r3, #1
}
 800192a:	4618      	mov	r0, r3
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <GetGasValue>:
}

// read data from gas
// @note: no params but should initialize DataHolder_t globally
void GetGasValue()
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001936:	4811      	ldr	r0, [pc, #68]	; (800197c <GetGasValue+0x4c>)
 8001938:	f000 fbd4 	bl	80020e4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 800193c:	210a      	movs	r1, #10
 800193e:	480f      	ldr	r0, [pc, #60]	; (800197c <GetGasValue+0x4c>)
 8001940:	f000 fc7e 	bl	8002240 <HAL_ADC_PollForConversion>
	float gas = HAL_ADC_GetValue(&hadc1);
 8001944:	480d      	ldr	r0, [pc, #52]	; (800197c <GetGasValue+0x4c>)
 8001946:	f000 fd81 	bl	800244c <HAL_ADC_GetValue>
 800194a:	4603      	mov	r3, r0
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff f9c1 	bl	8000cd4 <__aeabi_ui2f>
 8001952:	4603      	mov	r3, r0
 8001954:	607b      	str	r3, [r7, #4]
	DataReader_g.gas = (gas / ADC_BIT_RESOLUTION * 1024);
 8001956:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff fac6 	bl	8000eec <__aeabi_fdiv>
 8001960:	4603      	mov	r3, r0
 8001962:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fa0c 	bl	8000d84 <__aeabi_fmul>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <GetGasValue+0x50>)
 8001972:	605a      	str	r2, [r3, #4]
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200001f0 	.word	0x200001f0
 8001980:	20000a70 	.word	0x20000a70
 8001984:	00000000 	.word	0x00000000

08001988 <GetTempHumidValue>:
void GetTempHumidValue()
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 800198e:	4830      	ldr	r0, [pc, #192]	; (8001a50 <GetTempHumidValue+0xc8>)
 8001990:	f000 fba8 	bl	80020e4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 8001994:	210a      	movs	r1, #10
 8001996:	482e      	ldr	r0, [pc, #184]	; (8001a50 <GetTempHumidValue+0xc8>)
 8001998:	f000 fc52 	bl	8002240 <HAL_ADC_PollForConversion>
	float temp = HAL_ADC_GetValue(&hadc1);
 800199c:	482c      	ldr	r0, [pc, #176]	; (8001a50 <GetTempHumidValue+0xc8>)
 800199e:	f000 fd55 	bl	800244c <HAL_ADC_GetValue>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff f995 	bl	8000cd4 <__aeabi_ui2f>
 80019aa:	4603      	mov	r3, r0
 80019ac:	607b      	str	r3, [r7, #4]

	HAL_ADC_Start(&hadc1);
 80019ae:	4828      	ldr	r0, [pc, #160]	; (8001a50 <GetTempHumidValue+0xc8>)
 80019b0:	f000 fb98 	bl	80020e4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 80019b4:	210a      	movs	r1, #10
 80019b6:	4826      	ldr	r0, [pc, #152]	; (8001a50 <GetTempHumidValue+0xc8>)
 80019b8:	f000 fc42 	bl	8002240 <HAL_ADC_PollForConversion>
	float hud = HAL_ADC_GetValue(&hadc1);
 80019bc:	4824      	ldr	r0, [pc, #144]	; (8001a50 <GetTempHumidValue+0xc8>)
 80019be:	f000 fd45 	bl	800244c <HAL_ADC_GetValue>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff f985 	bl	8000cd4 <__aeabi_ui2f>
 80019ca:	4603      	mov	r3, r0
 80019cc:	603b      	str	r3, [r7, #0]

	DataReader_g.temperature_in = -66.875 + 218.75 * (temp / ADC_BIT_RESOLUTION);
 80019ce:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff fa8a 	bl	8000eec <__aeabi_fdiv>
 80019d8:	4603      	mov	r3, r0
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fd24 	bl	8000428 <__aeabi_f2d>
 80019e0:	a317      	add	r3, pc, #92	; (adr r3, 8001a40 <GetTempHumidValue+0xb8>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	f7fe fd77 	bl	80004d8 <__aeabi_dmul>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	a315      	add	r3, pc, #84	; (adr r3, 8001a48 <GetTempHumidValue+0xc0>)
 80019f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f8:	f7fe fbb6 	bl	8000168 <__aeabi_dsub>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	f7ff f860 	bl	8000ac8 <__aeabi_d2f>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <GetTempHumidValue+0xcc>)
 8001a0c:	6093      	str	r3, [r2, #8]
	DataReader_g.humidity_in = -12.5 + 125 * (hud / ADC_BIT_RESOLUTION);
 8001a0e:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001a12:	6838      	ldr	r0, [r7, #0]
 8001a14:	f7ff fa6a 	bl	8000eec <__aeabi_fdiv>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	490f      	ldr	r1, [pc, #60]	; (8001a58 <GetTempHumidValue+0xd0>)
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff f9b1 	bl	8000d84 <__aeabi_fmul>
 8001a22:	4603      	mov	r3, r0
 8001a24:	490d      	ldr	r1, [pc, #52]	; (8001a5c <GetTempHumidValue+0xd4>)
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff f8a2 	bl	8000b70 <__aeabi_fsub>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <GetTempHumidValue+0xcc>)
 8001a32:	60da      	str	r2, [r3, #12]
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	f3af 8000 	nop.w
 8001a40:	00000000 	.word	0x00000000
 8001a44:	406b5800 	.word	0x406b5800
 8001a48:	00000000 	.word	0x00000000
 8001a4c:	4050b800 	.word	0x4050b800
 8001a50:	200001f0 	.word	0x200001f0
 8001a54:	20000a70 	.word	0x20000a70
 8001a58:	42fa0000 	.word	0x42fa0000
 8001a5c:	41480000 	.word	0x41480000

08001a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a64:	b672      	cpsid	i
}
 8001a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <Error_Handler+0x8>
	...

08001a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <HAL_MspInit+0x5c>)
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	4a14      	ldr	r2, [pc, #80]	; (8001ac8 <HAL_MspInit+0x5c>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6193      	str	r3, [r2, #24]
 8001a7e:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <HAL_MspInit+0x5c>)
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <HAL_MspInit+0x5c>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	4a0e      	ldr	r2, [pc, #56]	; (8001ac8 <HAL_MspInit+0x5c>)
 8001a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a94:	61d3      	str	r3, [r2, #28]
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <HAL_MspInit+0x5c>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <HAL_MspInit+0x60>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <HAL_MspInit+0x60>)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40010000 	.word	0x40010000

08001ad0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 0310 	add.w	r3, r7, #16
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a14      	ldr	r2, [pc, #80]	; (8001b3c <HAL_ADC_MspInit+0x6c>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d121      	bne.n	8001b34 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <HAL_ADC_MspInit+0x70>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <HAL_ADC_MspInit+0x70>)
 8001af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001afa:	6193      	str	r3, [r2, #24]
 8001afc:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <HAL_ADC_MspInit+0x70>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b08:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <HAL_ADC_MspInit+0x70>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	4a0c      	ldr	r2, [pc, #48]	; (8001b40 <HAL_ADC_MspInit+0x70>)
 8001b0e:	f043 0304 	orr.w	r3, r3, #4
 8001b12:	6193      	str	r3, [r2, #24]
 8001b14:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <HAL_ADC_MspInit+0x70>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = TEMP_Pin|GAS_Pin|HUMID_Pin;
 8001b20:	2313      	movs	r3, #19
 8001b22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b24:	2303      	movs	r3, #3
 8001b26:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b28:	f107 0310 	add.w	r3, r7, #16
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4805      	ldr	r0, [pc, #20]	; (8001b44 <HAL_ADC_MspInit+0x74>)
 8001b30:	f000 ffec 	bl	8002b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b34:	bf00      	nop
 8001b36:	3720      	adds	r7, #32
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40012400 	.word	0x40012400
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40010800 	.word	0x40010800

08001b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0310 	add.w	r3, r7, #16
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a1f      	ldr	r2, [pc, #124]	; (8001be0 <HAL_UART_MspInit+0x98>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d137      	bne.n	8001bd8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b68:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <HAL_UART_MspInit+0x9c>)
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	4a1d      	ldr	r2, [pc, #116]	; (8001be4 <HAL_UART_MspInit+0x9c>)
 8001b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b72:	61d3      	str	r3, [r2, #28]
 8001b74:	4b1b      	ldr	r3, [pc, #108]	; (8001be4 <HAL_UART_MspInit+0x9c>)
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b80:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <HAL_UART_MspInit+0x9c>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	4a17      	ldr	r2, [pc, #92]	; (8001be4 <HAL_UART_MspInit+0x9c>)
 8001b86:	f043 0304 	orr.w	r3, r3, #4
 8001b8a:	6193      	str	r3, [r2, #24]
 8001b8c:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <HAL_UART_MspInit+0x9c>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b98:	2304      	movs	r3, #4
 8001b9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba4:	f107 0310 	add.w	r3, r7, #16
 8001ba8:	4619      	mov	r1, r3
 8001baa:	480f      	ldr	r0, [pc, #60]	; (8001be8 <HAL_UART_MspInit+0xa0>)
 8001bac:	f000 ffae 	bl	8002b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bb0:	2308      	movs	r3, #8
 8001bb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbc:	f107 0310 	add.w	r3, r7, #16
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4809      	ldr	r0, [pc, #36]	; (8001be8 <HAL_UART_MspInit+0xa0>)
 8001bc4:	f000 ffa2 	bl	8002b0c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2100      	movs	r1, #0
 8001bcc:	2026      	movs	r0, #38	; 0x26
 8001bce:	f000 feb4 	bl	800293a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bd2:	2026      	movs	r0, #38	; 0x26
 8001bd4:	f000 fecd 	bl	8002972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bd8:	bf00      	nop
 8001bda:	3720      	adds	r7, #32
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40004400 	.word	0x40004400
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40010800 	.word	0x40010800

08001bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <NMI_Handler+0x4>

08001bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf6:	e7fe      	b.n	8001bf6 <HardFault_Handler+0x4>

08001bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <MemManage_Handler+0x4>

08001bfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c02:	e7fe      	b.n	8001c02 <BusFault_Handler+0x4>

08001c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <UsageFault_Handler+0x4>

08001c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr

08001c16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr

08001c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr

08001c2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c32:	f000 f923 	bl	8001e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <USART2_IRQHandler+0x10>)
 8001c42:	f001 ffa9 	bl	8003b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000220 	.word	0x20000220

08001c50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return 1;
 8001c54:	2301      	movs	r3, #1
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr

08001c5e <_kill>:

int _kill(int pid, int sig)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c68:	f004 fa32 	bl	80060d0 <__errno>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2216      	movs	r2, #22
 8001c70:	601a      	str	r2, [r3, #0]
  return -1;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <_exit>:

void _exit (int status)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c86:	f04f 31ff 	mov.w	r1, #4294967295
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff ffe7 	bl	8001c5e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c90:	e7fe      	b.n	8001c90 <_exit+0x12>

08001c92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b086      	sub	sp, #24
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	e00a      	b.n	8001cba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ca4:	f3af 8000 	nop.w
 8001ca8:	4601      	mov	r1, r0
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	1c5a      	adds	r2, r3, #1
 8001cae:	60ba      	str	r2, [r7, #8]
 8001cb0:	b2ca      	uxtb	r2, r1
 8001cb2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	dbf0      	blt.n	8001ca4 <_read+0x12>
  }

  return len;
 8001cc2:	687b      	ldr	r3, [r7, #4]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr

08001ce2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cf2:	605a      	str	r2, [r3, #4]
  return 0;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <_isatty>:

int _isatty(int file)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d08:	2301      	movs	r3, #1
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d34:	4a14      	ldr	r2, [pc, #80]	; (8001d88 <_sbrk+0x5c>)
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <_sbrk+0x60>)
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <_sbrk+0x64>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d102      	bne.n	8001d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <_sbrk+0x64>)
 8001d4a:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <_sbrk+0x68>)
 8001d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <_sbrk+0x64>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d207      	bcs.n	8001d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d5c:	f004 f9b8 	bl	80060d0 <__errno>
 8001d60:	4603      	mov	r3, r0
 8001d62:	220c      	movs	r2, #12
 8001d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d66:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6a:	e009      	b.n	8001d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <_sbrk+0x64>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d72:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <_sbrk+0x64>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <_sbrk+0x64>)
 8001d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20005000 	.word	0x20005000
 8001d8c:	00000400 	.word	0x00000400
 8001d90:	20000a88 	.word	0x20000a88
 8001d94:	20000be0 	.word	0x20000be0

08001d98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001da4:	f7ff fff8 	bl	8001d98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001da8:	480b      	ldr	r0, [pc, #44]	; (8001dd8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001daa:	490c      	ldr	r1, [pc, #48]	; (8001ddc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001dac:	4a0c      	ldr	r2, [pc, #48]	; (8001de0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db0:	e002      	b.n	8001db8 <LoopCopyDataInit>

08001db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001db6:	3304      	adds	r3, #4

08001db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dbc:	d3f9      	bcc.n	8001db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dbe:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001dc0:	4c09      	ldr	r4, [pc, #36]	; (8001de8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc4:	e001      	b.n	8001dca <LoopFillZerobss>

08001dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc8:	3204      	adds	r2, #4

08001dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dcc:	d3fb      	bcc.n	8001dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dce:	f004 f985 	bl	80060dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dd2:	f7ff f975 	bl	80010c0 <main>
  bx lr
 8001dd6:	4770      	bx	lr
  ldr r0, =_sdata
 8001dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ddc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001de0:	08008ca0 	.word	0x08008ca0
  ldr r2, =_sbss
 8001de4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001de8:	20000bdc 	.word	0x20000bdc

08001dec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dec:	e7fe      	b.n	8001dec <ADC1_2_IRQHandler>
	...

08001df0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <HAL_Init+0x28>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <HAL_Init+0x28>)
 8001dfa:	f043 0310 	orr.w	r3, r3, #16
 8001dfe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e00:	2003      	movs	r0, #3
 8001e02:	f000 fd8f 	bl	8002924 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e06:	200f      	movs	r0, #15
 8001e08:	f000 f808 	bl	8001e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e0c:	f7ff fe2e 	bl	8001a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40022000 	.word	0x40022000

08001e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <HAL_InitTick+0x54>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <HAL_InitTick+0x58>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 fda7 	bl	800298e <HAL_SYSTICK_Config>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e00e      	b.n	8001e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b0f      	cmp	r3, #15
 8001e4e:	d80a      	bhi.n	8001e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e50:	2200      	movs	r2, #0
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	f04f 30ff 	mov.w	r0, #4294967295
 8001e58:	f000 fd6f 	bl	800293a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e5c:	4a06      	ldr	r2, [pc, #24]	; (8001e78 <HAL_InitTick+0x5c>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	e000      	b.n	8001e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000000 	.word	0x20000000
 8001e74:	20000008 	.word	0x20000008
 8001e78:	20000004 	.word	0x20000004

08001e7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_IncTick+0x1c>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <HAL_IncTick+0x20>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	4a03      	ldr	r2, [pc, #12]	; (8001e9c <HAL_IncTick+0x20>)
 8001e8e:	6013      	str	r3, [r2, #0]
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	20000008 	.word	0x20000008
 8001e9c:	20000a8c 	.word	0x20000a8c

08001ea0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea4:	4b02      	ldr	r3, [pc, #8]	; (8001eb0 <HAL_GetTick+0x10>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr
 8001eb0:	20000a8c 	.word	0x20000a8c

08001eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ebc:	f7ff fff0 	bl	8001ea0 <HAL_GetTick>
 8001ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ecc:	d005      	beq.n	8001eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <HAL_Delay+0x44>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eda:	bf00      	nop
 8001edc:	f7ff ffe0 	bl	8001ea0 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d8f7      	bhi.n	8001edc <HAL_Delay+0x28>
  {
  }
}
 8001eec:	bf00      	nop
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000008 	.word	0x20000008

08001efc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001f00:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <HAL_SuspendTick+0x18>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a03      	ldr	r2, [pc, #12]	; (8001f14 <HAL_SuspendTick+0x18>)
 8001f06:	f023 0302 	bic.w	r3, r3, #2
 8001f0a:	6013      	str	r3, [r2, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	e000e010 	.word	0xe000e010

08001f18 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <HAL_ResumeTick+0x18>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a03      	ldr	r2, [pc, #12]	; (8001f30 <HAL_ResumeTick+0x18>)
 8001f22:	f043 0302 	orr.w	r3, r3, #2
 8001f26:	6013      	str	r3, [r2, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	e000e010 	.word	0xe000e010

08001f34 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e0be      	b.n	80020d4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d109      	bne.n	8001f78 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff fdac 	bl	8001ad0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 fbc5 	bl	8002708 <ADC_ConversionStop_Disable>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f040 8099 	bne.w	80020c2 <HAL_ADC_Init+0x18e>
 8001f90:	7dfb      	ldrb	r3, [r7, #23]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f040 8095 	bne.w	80020c2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fa0:	f023 0302 	bic.w	r3, r3, #2
 8001fa4:	f043 0202 	orr.w	r2, r3, #2
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fb4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	7b1b      	ldrb	r3, [r3, #12]
 8001fba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fbc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fcc:	d003      	beq.n	8001fd6 <HAL_ADC_Init+0xa2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d102      	bne.n	8001fdc <HAL_ADC_Init+0xa8>
 8001fd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fda:	e000      	b.n	8001fde <HAL_ADC_Init+0xaa>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7d1b      	ldrb	r3, [r3, #20]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d119      	bne.n	8002020 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	7b1b      	ldrb	r3, [r3, #12]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d109      	bne.n	8002008 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	035a      	lsls	r2, r3, #13
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	e00b      	b.n	8002020 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200c:	f043 0220 	orr.w	r2, r3, #32
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002018:	f043 0201 	orr.w	r2, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	430a      	orrs	r2, r1
 8002032:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	4b28      	ldr	r3, [pc, #160]	; (80020dc <HAL_ADC_Init+0x1a8>)
 800203c:	4013      	ands	r3, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	68b9      	ldr	r1, [r7, #8]
 8002044:	430b      	orrs	r3, r1
 8002046:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002050:	d003      	beq.n	800205a <HAL_ADC_Init+0x126>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d104      	bne.n	8002064 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	3b01      	subs	r3, #1
 8002060:	051b      	lsls	r3, r3, #20
 8002062:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	430a      	orrs	r2, r1
 8002076:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <HAL_ADC_Init+0x1ac>)
 8002080:	4013      	ands	r3, r2
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	429a      	cmp	r2, r3
 8002086:	d10b      	bne.n	80020a0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	f023 0303 	bic.w	r3, r3, #3
 8002096:	f043 0201 	orr.w	r2, r3, #1
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800209e:	e018      	b.n	80020d2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a4:	f023 0312 	bic.w	r3, r3, #18
 80020a8:	f043 0210 	orr.w	r2, r3, #16
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	f043 0201 	orr.w	r2, r3, #1
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020c0:	e007      	b.n	80020d2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c6:	f043 0210 	orr.w	r2, r3, #16
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	ffe1f7fd 	.word	0xffe1f7fd
 80020e0:	ff1f0efe 	.word	0xff1f0efe

080020e4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ec:	2300      	movs	r3, #0
 80020ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d101      	bne.n	80020fe <HAL_ADC_Start+0x1a>
 80020fa:	2302      	movs	r3, #2
 80020fc:	e098      	b.n	8002230 <HAL_ADC_Start+0x14c>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 faa4 	bl	8002654 <ADC_Enable>
 800210c:	4603      	mov	r3, r0
 800210e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f040 8087 	bne.w	8002226 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002120:	f023 0301 	bic.w	r3, r3, #1
 8002124:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a41      	ldr	r2, [pc, #260]	; (8002238 <HAL_ADC_Start+0x154>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d105      	bne.n	8002142 <HAL_ADC_Start+0x5e>
 8002136:	4b41      	ldr	r3, [pc, #260]	; (800223c <HAL_ADC_Start+0x158>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d115      	bne.n	800216e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002146:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002158:	2b00      	cmp	r3, #0
 800215a:	d026      	beq.n	80021aa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002160:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002164:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800216c:	e01d      	b.n	80021aa <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002172:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a2f      	ldr	r2, [pc, #188]	; (800223c <HAL_ADC_Start+0x158>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d004      	beq.n	800218e <HAL_ADC_Start+0xaa>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a2b      	ldr	r2, [pc, #172]	; (8002238 <HAL_ADC_Start+0x154>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d10d      	bne.n	80021aa <HAL_ADC_Start+0xc6>
 800218e:	4b2b      	ldr	r3, [pc, #172]	; (800223c <HAL_ADC_Start+0x158>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002196:	2b00      	cmp	r3, #0
 8002198:	d007      	beq.n	80021aa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d006      	beq.n	80021c4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ba:	f023 0206 	bic.w	r2, r3, #6
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80021c2:	e002      	b.n	80021ca <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f06f 0202 	mvn.w	r2, #2
 80021da:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80021e6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021ea:	d113      	bne.n	8002214 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021f0:	4a11      	ldr	r2, [pc, #68]	; (8002238 <HAL_ADC_Start+0x154>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d105      	bne.n	8002202 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80021f6:	4b11      	ldr	r3, [pc, #68]	; (800223c <HAL_ADC_Start+0x158>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d108      	bne.n	8002214 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	e00c      	b.n	800222e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	e003      	b.n	800222e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800222e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40012800 	.word	0x40012800
 800223c:	40012400 	.word	0x40012400

08002240 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002240:	b590      	push	{r4, r7, lr}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002256:	f7ff fe23 	bl	8001ea0 <HAL_GetTick>
 800225a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00b      	beq.n	8002282 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226e:	f043 0220 	orr.w	r2, r3, #32
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e0d3      	b.n	800242a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228c:	2b00      	cmp	r3, #0
 800228e:	d131      	bne.n	80022f4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002296:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800229a:	2b00      	cmp	r3, #0
 800229c:	d12a      	bne.n	80022f4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800229e:	e021      	b.n	80022e4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a6:	d01d      	beq.n	80022e4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d007      	beq.n	80022be <HAL_ADC_PollForConversion+0x7e>
 80022ae:	f7ff fdf7 	bl	8001ea0 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d212      	bcs.n	80022e4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10b      	bne.n	80022e4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d0:	f043 0204 	orr.w	r2, r3, #4
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e0a2      	b.n	800242a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0d6      	beq.n	80022a0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80022f2:	e070      	b.n	80023d6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80022f4:	4b4f      	ldr	r3, [pc, #316]	; (8002434 <HAL_ADC_PollForConversion+0x1f4>)
 80022f6:	681c      	ldr	r4, [r3, #0]
 80022f8:	2002      	movs	r0, #2
 80022fa:	f001 fa9f 	bl	800383c <HAL_RCCEx_GetPeriphCLKFreq>
 80022fe:	4603      	mov	r3, r0
 8002300:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6919      	ldr	r1, [r3, #16]
 800230a:	4b4b      	ldr	r3, [pc, #300]	; (8002438 <HAL_ADC_PollForConversion+0x1f8>)
 800230c:	400b      	ands	r3, r1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d118      	bne.n	8002344 <HAL_ADC_PollForConversion+0x104>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68d9      	ldr	r1, [r3, #12]
 8002318:	4b48      	ldr	r3, [pc, #288]	; (800243c <HAL_ADC_PollForConversion+0x1fc>)
 800231a:	400b      	ands	r3, r1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d111      	bne.n	8002344 <HAL_ADC_PollForConversion+0x104>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6919      	ldr	r1, [r3, #16]
 8002326:	4b46      	ldr	r3, [pc, #280]	; (8002440 <HAL_ADC_PollForConversion+0x200>)
 8002328:	400b      	ands	r3, r1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d108      	bne.n	8002340 <HAL_ADC_PollForConversion+0x100>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68d9      	ldr	r1, [r3, #12]
 8002334:	4b43      	ldr	r3, [pc, #268]	; (8002444 <HAL_ADC_PollForConversion+0x204>)
 8002336:	400b      	ands	r3, r1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_ADC_PollForConversion+0x100>
 800233c:	2314      	movs	r3, #20
 800233e:	e020      	b.n	8002382 <HAL_ADC_PollForConversion+0x142>
 8002340:	2329      	movs	r3, #41	; 0x29
 8002342:	e01e      	b.n	8002382 <HAL_ADC_PollForConversion+0x142>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6919      	ldr	r1, [r3, #16]
 800234a:	4b3d      	ldr	r3, [pc, #244]	; (8002440 <HAL_ADC_PollForConversion+0x200>)
 800234c:	400b      	ands	r3, r1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d106      	bne.n	8002360 <HAL_ADC_PollForConversion+0x120>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68d9      	ldr	r1, [r3, #12]
 8002358:	4b3a      	ldr	r3, [pc, #232]	; (8002444 <HAL_ADC_PollForConversion+0x204>)
 800235a:	400b      	ands	r3, r1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00d      	beq.n	800237c <HAL_ADC_PollForConversion+0x13c>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6919      	ldr	r1, [r3, #16]
 8002366:	4b38      	ldr	r3, [pc, #224]	; (8002448 <HAL_ADC_PollForConversion+0x208>)
 8002368:	400b      	ands	r3, r1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d108      	bne.n	8002380 <HAL_ADC_PollForConversion+0x140>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68d9      	ldr	r1, [r3, #12]
 8002374:	4b34      	ldr	r3, [pc, #208]	; (8002448 <HAL_ADC_PollForConversion+0x208>)
 8002376:	400b      	ands	r3, r1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_ADC_PollForConversion+0x140>
 800237c:	2354      	movs	r3, #84	; 0x54
 800237e:	e000      	b.n	8002382 <HAL_ADC_PollForConversion+0x142>
 8002380:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002382:	fb02 f303 	mul.w	r3, r2, r3
 8002386:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002388:	e021      	b.n	80023ce <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002390:	d01a      	beq.n	80023c8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d007      	beq.n	80023a8 <HAL_ADC_PollForConversion+0x168>
 8002398:	f7ff fd82 	bl	8001ea0 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d20f      	bcs.n	80023c8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d90b      	bls.n	80023c8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	f043 0204 	orr.w	r2, r3, #4
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e030      	b.n	800242a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	3301      	adds	r3, #1
 80023cc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d8d9      	bhi.n	800238a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f06f 0212 	mvn.w	r2, #18
 80023de:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80023f6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80023fa:	d115      	bne.n	8002428 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002400:	2b00      	cmp	r3, #0
 8002402:	d111      	bne.n	8002428 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d105      	bne.n	8002428 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002420:	f043 0201 	orr.w	r2, r3, #1
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	371c      	adds	r7, #28
 800242e:	46bd      	mov	sp, r7
 8002430:	bd90      	pop	{r4, r7, pc}
 8002432:	bf00      	nop
 8002434:	20000000 	.word	0x20000000
 8002438:	24924924 	.word	0x24924924
 800243c:	00924924 	.word	0x00924924
 8002440:	12492492 	.word	0x12492492
 8002444:	00492492 	.word	0x00492492
 8002448:	00249249 	.word	0x00249249

0800244c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x20>
 8002480:	2302      	movs	r3, #2
 8002482:	e0dc      	b.n	800263e <HAL_ADC_ConfigChannel+0x1da>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b06      	cmp	r3, #6
 8002492:	d81c      	bhi.n	80024ce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	3b05      	subs	r3, #5
 80024a6:	221f      	movs	r2, #31
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	4019      	ands	r1, r3
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	3b05      	subs	r3, #5
 80024c0:	fa00 f203 	lsl.w	r2, r0, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	635a      	str	r2, [r3, #52]	; 0x34
 80024cc:	e03c      	b.n	8002548 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b0c      	cmp	r3, #12
 80024d4:	d81c      	bhi.n	8002510 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	3b23      	subs	r3, #35	; 0x23
 80024e8:	221f      	movs	r2, #31
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	4019      	ands	r1, r3
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	3b23      	subs	r3, #35	; 0x23
 8002502:	fa00 f203 	lsl.w	r2, r0, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	631a      	str	r2, [r3, #48]	; 0x30
 800250e:	e01b      	b.n	8002548 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	3b41      	subs	r3, #65	; 0x41
 8002522:	221f      	movs	r2, #31
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	4019      	ands	r1, r3
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	3b41      	subs	r3, #65	; 0x41
 800253c:	fa00 f203 	lsl.w	r2, r0, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b09      	cmp	r3, #9
 800254e:	d91c      	bls.n	800258a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68d9      	ldr	r1, [r3, #12]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	4613      	mov	r3, r2
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	4413      	add	r3, r2
 8002560:	3b1e      	subs	r3, #30
 8002562:	2207      	movs	r2, #7
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	4019      	ands	r1, r3
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	6898      	ldr	r0, [r3, #8]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4613      	mov	r3, r2
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4413      	add	r3, r2
 800257a:	3b1e      	subs	r3, #30
 800257c:	fa00 f203 	lsl.w	r2, r0, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	60da      	str	r2, [r3, #12]
 8002588:	e019      	b.n	80025be <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6919      	ldr	r1, [r3, #16]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4613      	mov	r3, r2
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	4413      	add	r3, r2
 800259a:	2207      	movs	r2, #7
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	4019      	ands	r1, r3
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	6898      	ldr	r0, [r3, #8]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4613      	mov	r3, r2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	4413      	add	r3, r2
 80025b2:	fa00 f203 	lsl.w	r2, r0, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b10      	cmp	r3, #16
 80025c4:	d003      	beq.n	80025ce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025ca:	2b11      	cmp	r3, #17
 80025cc:	d132      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1d      	ldr	r2, [pc, #116]	; (8002648 <HAL_ADC_ConfigChannel+0x1e4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d125      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d126      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80025f4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b10      	cmp	r3, #16
 80025fc:	d11a      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025fe:	4b13      	ldr	r3, [pc, #76]	; (800264c <HAL_ADC_ConfigChannel+0x1e8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a13      	ldr	r2, [pc, #76]	; (8002650 <HAL_ADC_ConfigChannel+0x1ec>)
 8002604:	fba2 2303 	umull	r2, r3, r2, r3
 8002608:	0c9a      	lsrs	r2, r3, #18
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002614:	e002      	b.n	800261c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	3b01      	subs	r3, #1
 800261a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f9      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x1b2>
 8002622:	e007      	b.n	8002634 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	f043 0220 	orr.w	r2, r3, #32
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800263c:	7bfb      	ldrb	r3, [r7, #15]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr
 8002648:	40012400 	.word	0x40012400
 800264c:	20000000 	.word	0x20000000
 8002650:	431bde83 	.word	0x431bde83

08002654 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b01      	cmp	r3, #1
 8002670:	d040      	beq.n	80026f4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 0201 	orr.w	r2, r2, #1
 8002680:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002682:	4b1f      	ldr	r3, [pc, #124]	; (8002700 <ADC_Enable+0xac>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a1f      	ldr	r2, [pc, #124]	; (8002704 <ADC_Enable+0xb0>)
 8002688:	fba2 2303 	umull	r2, r3, r2, r3
 800268c:	0c9b      	lsrs	r3, r3, #18
 800268e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002690:	e002      	b.n	8002698 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	3b01      	subs	r3, #1
 8002696:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f9      	bne.n	8002692 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800269e:	f7ff fbff 	bl	8001ea0 <HAL_GetTick>
 80026a2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026a4:	e01f      	b.n	80026e6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026a6:	f7ff fbfb 	bl	8001ea0 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d918      	bls.n	80026e6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d011      	beq.n	80026e6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c6:	f043 0210 	orr.w	r2, r3, #16
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	f043 0201 	orr.w	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e007      	b.n	80026f6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d1d8      	bne.n	80026a6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000000 	.word	0x20000000
 8002704:	431bde83 	.word	0x431bde83

08002708 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b01      	cmp	r3, #1
 8002720:	d12e      	bne.n	8002780 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0201 	bic.w	r2, r2, #1
 8002730:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002732:	f7ff fbb5 	bl	8001ea0 <HAL_GetTick>
 8002736:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002738:	e01b      	b.n	8002772 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800273a:	f7ff fbb1 	bl	8001ea0 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d914      	bls.n	8002772 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b01      	cmp	r3, #1
 8002754:	d10d      	bne.n	8002772 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	f043 0210 	orr.w	r2, r3, #16
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002766:	f043 0201 	orr.w	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e007      	b.n	8002782 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b01      	cmp	r3, #1
 800277e:	d0dc      	beq.n	800273a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800279c:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <__NVIC_SetPriorityGrouping+0x44>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027a8:	4013      	ands	r3, r2
 80027aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027be:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <__NVIC_SetPriorityGrouping+0x44>)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	60d3      	str	r3, [r2, #12]
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <__NVIC_GetPriorityGrouping+0x18>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	0a1b      	lsrs	r3, r3, #8
 80027de:	f003 0307 	and.w	r3, r3, #7
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	db0b      	blt.n	800281a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	f003 021f 	and.w	r2, r3, #31
 8002808:	4906      	ldr	r1, [pc, #24]	; (8002824 <__NVIC_EnableIRQ+0x34>)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	2001      	movs	r0, #1
 8002812:	fa00 f202 	lsl.w	r2, r0, r2
 8002816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	e000e100 	.word	0xe000e100

08002828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	6039      	str	r1, [r7, #0]
 8002832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002838:	2b00      	cmp	r3, #0
 800283a:	db0a      	blt.n	8002852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	b2da      	uxtb	r2, r3
 8002840:	490c      	ldr	r1, [pc, #48]	; (8002874 <__NVIC_SetPriority+0x4c>)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	0112      	lsls	r2, r2, #4
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	440b      	add	r3, r1
 800284c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002850:	e00a      	b.n	8002868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	b2da      	uxtb	r2, r3
 8002856:	4908      	ldr	r1, [pc, #32]	; (8002878 <__NVIC_SetPriority+0x50>)
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	3b04      	subs	r3, #4
 8002860:	0112      	lsls	r2, r2, #4
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	440b      	add	r3, r1
 8002866:	761a      	strb	r2, [r3, #24]
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	e000e100 	.word	0xe000e100
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800287c:	b480      	push	{r7}
 800287e:	b089      	sub	sp, #36	; 0x24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f1c3 0307 	rsb	r3, r3, #7
 8002896:	2b04      	cmp	r3, #4
 8002898:	bf28      	it	cs
 800289a:	2304      	movcs	r3, #4
 800289c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	3304      	adds	r3, #4
 80028a2:	2b06      	cmp	r3, #6
 80028a4:	d902      	bls.n	80028ac <NVIC_EncodePriority+0x30>
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3b03      	subs	r3, #3
 80028aa:	e000      	b.n	80028ae <NVIC_EncodePriority+0x32>
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b0:	f04f 32ff 	mov.w	r2, #4294967295
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43da      	mvns	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	401a      	ands	r2, r3
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c4:	f04f 31ff 	mov.w	r1, #4294967295
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	fa01 f303 	lsl.w	r3, r1, r3
 80028ce:	43d9      	mvns	r1, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d4:	4313      	orrs	r3, r2
         );
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3724      	adds	r7, #36	; 0x24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028f0:	d301      	bcc.n	80028f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028f2:	2301      	movs	r3, #1
 80028f4:	e00f      	b.n	8002916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028f6:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <SysTick_Config+0x40>)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028fe:	210f      	movs	r1, #15
 8002900:	f04f 30ff 	mov.w	r0, #4294967295
 8002904:	f7ff ff90 	bl	8002828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <SysTick_Config+0x40>)
 800290a:	2200      	movs	r2, #0
 800290c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800290e:	4b04      	ldr	r3, [pc, #16]	; (8002920 <SysTick_Config+0x40>)
 8002910:	2207      	movs	r2, #7
 8002912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	e000e010 	.word	0xe000e010

08002924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff ff2d 	bl	800278c <__NVIC_SetPriorityGrouping>
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800293a:	b580      	push	{r7, lr}
 800293c:	b086      	sub	sp, #24
 800293e:	af00      	add	r7, sp, #0
 8002940:	4603      	mov	r3, r0
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800294c:	f7ff ff42 	bl	80027d4 <__NVIC_GetPriorityGrouping>
 8002950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	68b9      	ldr	r1, [r7, #8]
 8002956:	6978      	ldr	r0, [r7, #20]
 8002958:	f7ff ff90 	bl	800287c <NVIC_EncodePriority>
 800295c:	4602      	mov	r2, r0
 800295e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002962:	4611      	mov	r1, r2
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ff5f 	bl	8002828 <__NVIC_SetPriority>
}
 800296a:	bf00      	nop
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	4603      	mov	r3, r0
 800297a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800297c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ff35 	bl	80027f0 <__NVIC_EnableIRQ>
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff ffa2 	bl	80028e0 <SysTick_Config>
 800299c:	4603      	mov	r3, r0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b085      	sub	sp, #20
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d008      	beq.n	80029d0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2204      	movs	r2, #4
 80029c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e020      	b.n	8002a12 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 020e 	bic.w	r2, r2, #14
 80029de:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0201 	bic.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f8:	2101      	movs	r1, #1
 80029fa:	fa01 f202 	lsl.w	r2, r1, r2
 80029fe:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d005      	beq.n	8002a40 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2204      	movs	r2, #4
 8002a38:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	73fb      	strb	r3, [r7, #15]
 8002a3e:	e051      	b.n	8002ae4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 020e 	bic.w	r2, r2, #14
 8002a4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a22      	ldr	r2, [pc, #136]	; (8002af0 <HAL_DMA_Abort_IT+0xd4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d029      	beq.n	8002abe <HAL_DMA_Abort_IT+0xa2>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a21      	ldr	r2, [pc, #132]	; (8002af4 <HAL_DMA_Abort_IT+0xd8>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d022      	beq.n	8002aba <HAL_DMA_Abort_IT+0x9e>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a1f      	ldr	r2, [pc, #124]	; (8002af8 <HAL_DMA_Abort_IT+0xdc>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d01a      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x98>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a1e      	ldr	r2, [pc, #120]	; (8002afc <HAL_DMA_Abort_IT+0xe0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d012      	beq.n	8002aae <HAL_DMA_Abort_IT+0x92>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a1c      	ldr	r2, [pc, #112]	; (8002b00 <HAL_DMA_Abort_IT+0xe4>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d00a      	beq.n	8002aa8 <HAL_DMA_Abort_IT+0x8c>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a1b      	ldr	r2, [pc, #108]	; (8002b04 <HAL_DMA_Abort_IT+0xe8>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d102      	bne.n	8002aa2 <HAL_DMA_Abort_IT+0x86>
 8002a9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002aa0:	e00e      	b.n	8002ac0 <HAL_DMA_Abort_IT+0xa4>
 8002aa2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aa6:	e00b      	b.n	8002ac0 <HAL_DMA_Abort_IT+0xa4>
 8002aa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002aac:	e008      	b.n	8002ac0 <HAL_DMA_Abort_IT+0xa4>
 8002aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ab2:	e005      	b.n	8002ac0 <HAL_DMA_Abort_IT+0xa4>
 8002ab4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ab8:	e002      	b.n	8002ac0 <HAL_DMA_Abort_IT+0xa4>
 8002aba:	2310      	movs	r3, #16
 8002abc:	e000      	b.n	8002ac0 <HAL_DMA_Abort_IT+0xa4>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	4a11      	ldr	r2, [pc, #68]	; (8002b08 <HAL_DMA_Abort_IT+0xec>)
 8002ac2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	4798      	blx	r3
    } 
  }
  return status;
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40020008 	.word	0x40020008
 8002af4:	4002001c 	.word	0x4002001c
 8002af8:	40020030 	.word	0x40020030
 8002afc:	40020044 	.word	0x40020044
 8002b00:	40020058 	.word	0x40020058
 8002b04:	4002006c 	.word	0x4002006c
 8002b08:	40020000 	.word	0x40020000

08002b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b08b      	sub	sp, #44	; 0x2c
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b16:	2300      	movs	r3, #0
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b1e:	e169      	b.n	8002df4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b20:	2201      	movs	r2, #1
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	69fa      	ldr	r2, [r7, #28]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	f040 8158 	bne.w	8002dee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	4a9a      	ldr	r2, [pc, #616]	; (8002dac <HAL_GPIO_Init+0x2a0>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d05e      	beq.n	8002c06 <HAL_GPIO_Init+0xfa>
 8002b48:	4a98      	ldr	r2, [pc, #608]	; (8002dac <HAL_GPIO_Init+0x2a0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d875      	bhi.n	8002c3a <HAL_GPIO_Init+0x12e>
 8002b4e:	4a98      	ldr	r2, [pc, #608]	; (8002db0 <HAL_GPIO_Init+0x2a4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d058      	beq.n	8002c06 <HAL_GPIO_Init+0xfa>
 8002b54:	4a96      	ldr	r2, [pc, #600]	; (8002db0 <HAL_GPIO_Init+0x2a4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d86f      	bhi.n	8002c3a <HAL_GPIO_Init+0x12e>
 8002b5a:	4a96      	ldr	r2, [pc, #600]	; (8002db4 <HAL_GPIO_Init+0x2a8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d052      	beq.n	8002c06 <HAL_GPIO_Init+0xfa>
 8002b60:	4a94      	ldr	r2, [pc, #592]	; (8002db4 <HAL_GPIO_Init+0x2a8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d869      	bhi.n	8002c3a <HAL_GPIO_Init+0x12e>
 8002b66:	4a94      	ldr	r2, [pc, #592]	; (8002db8 <HAL_GPIO_Init+0x2ac>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d04c      	beq.n	8002c06 <HAL_GPIO_Init+0xfa>
 8002b6c:	4a92      	ldr	r2, [pc, #584]	; (8002db8 <HAL_GPIO_Init+0x2ac>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d863      	bhi.n	8002c3a <HAL_GPIO_Init+0x12e>
 8002b72:	4a92      	ldr	r2, [pc, #584]	; (8002dbc <HAL_GPIO_Init+0x2b0>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d046      	beq.n	8002c06 <HAL_GPIO_Init+0xfa>
 8002b78:	4a90      	ldr	r2, [pc, #576]	; (8002dbc <HAL_GPIO_Init+0x2b0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d85d      	bhi.n	8002c3a <HAL_GPIO_Init+0x12e>
 8002b7e:	2b12      	cmp	r3, #18
 8002b80:	d82a      	bhi.n	8002bd8 <HAL_GPIO_Init+0xcc>
 8002b82:	2b12      	cmp	r3, #18
 8002b84:	d859      	bhi.n	8002c3a <HAL_GPIO_Init+0x12e>
 8002b86:	a201      	add	r2, pc, #4	; (adr r2, 8002b8c <HAL_GPIO_Init+0x80>)
 8002b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8c:	08002c07 	.word	0x08002c07
 8002b90:	08002be1 	.word	0x08002be1
 8002b94:	08002bf3 	.word	0x08002bf3
 8002b98:	08002c35 	.word	0x08002c35
 8002b9c:	08002c3b 	.word	0x08002c3b
 8002ba0:	08002c3b 	.word	0x08002c3b
 8002ba4:	08002c3b 	.word	0x08002c3b
 8002ba8:	08002c3b 	.word	0x08002c3b
 8002bac:	08002c3b 	.word	0x08002c3b
 8002bb0:	08002c3b 	.word	0x08002c3b
 8002bb4:	08002c3b 	.word	0x08002c3b
 8002bb8:	08002c3b 	.word	0x08002c3b
 8002bbc:	08002c3b 	.word	0x08002c3b
 8002bc0:	08002c3b 	.word	0x08002c3b
 8002bc4:	08002c3b 	.word	0x08002c3b
 8002bc8:	08002c3b 	.word	0x08002c3b
 8002bcc:	08002c3b 	.word	0x08002c3b
 8002bd0:	08002be9 	.word	0x08002be9
 8002bd4:	08002bfd 	.word	0x08002bfd
 8002bd8:	4a79      	ldr	r2, [pc, #484]	; (8002dc0 <HAL_GPIO_Init+0x2b4>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d013      	beq.n	8002c06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002bde:	e02c      	b.n	8002c3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	623b      	str	r3, [r7, #32]
          break;
 8002be6:	e029      	b.n	8002c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	3304      	adds	r3, #4
 8002bee:	623b      	str	r3, [r7, #32]
          break;
 8002bf0:	e024      	b.n	8002c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	3308      	adds	r3, #8
 8002bf8:	623b      	str	r3, [r7, #32]
          break;
 8002bfa:	e01f      	b.n	8002c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	330c      	adds	r3, #12
 8002c02:	623b      	str	r3, [r7, #32]
          break;
 8002c04:	e01a      	b.n	8002c3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d102      	bne.n	8002c14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c0e:	2304      	movs	r3, #4
 8002c10:	623b      	str	r3, [r7, #32]
          break;
 8002c12:	e013      	b.n	8002c3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d105      	bne.n	8002c28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c1c:	2308      	movs	r3, #8
 8002c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	611a      	str	r2, [r3, #16]
          break;
 8002c26:	e009      	b.n	8002c3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c28:	2308      	movs	r3, #8
 8002c2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	615a      	str	r2, [r3, #20]
          break;
 8002c32:	e003      	b.n	8002c3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c34:	2300      	movs	r3, #0
 8002c36:	623b      	str	r3, [r7, #32]
          break;
 8002c38:	e000      	b.n	8002c3c <HAL_GPIO_Init+0x130>
          break;
 8002c3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	2bff      	cmp	r3, #255	; 0xff
 8002c40:	d801      	bhi.n	8002c46 <HAL_GPIO_Init+0x13a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	e001      	b.n	8002c4a <HAL_GPIO_Init+0x13e>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	2bff      	cmp	r3, #255	; 0xff
 8002c50:	d802      	bhi.n	8002c58 <HAL_GPIO_Init+0x14c>
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	e002      	b.n	8002c5e <HAL_GPIO_Init+0x152>
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	3b08      	subs	r3, #8
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	210f      	movs	r1, #15
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	401a      	ands	r2, r3
 8002c70:	6a39      	ldr	r1, [r7, #32]
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	fa01 f303 	lsl.w	r3, r1, r3
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 80b1 	beq.w	8002dee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c8c:	4b4d      	ldr	r3, [pc, #308]	; (8002dc4 <HAL_GPIO_Init+0x2b8>)
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	4a4c      	ldr	r2, [pc, #304]	; (8002dc4 <HAL_GPIO_Init+0x2b8>)
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	6193      	str	r3, [r2, #24]
 8002c98:	4b4a      	ldr	r3, [pc, #296]	; (8002dc4 <HAL_GPIO_Init+0x2b8>)
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ca4:	4a48      	ldr	r2, [pc, #288]	; (8002dc8 <HAL_GPIO_Init+0x2bc>)
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	089b      	lsrs	r3, r3, #2
 8002caa:	3302      	adds	r3, #2
 8002cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	220f      	movs	r2, #15
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a40      	ldr	r2, [pc, #256]	; (8002dcc <HAL_GPIO_Init+0x2c0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d013      	beq.n	8002cf8 <HAL_GPIO_Init+0x1ec>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a3f      	ldr	r2, [pc, #252]	; (8002dd0 <HAL_GPIO_Init+0x2c4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00d      	beq.n	8002cf4 <HAL_GPIO_Init+0x1e8>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a3e      	ldr	r2, [pc, #248]	; (8002dd4 <HAL_GPIO_Init+0x2c8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d007      	beq.n	8002cf0 <HAL_GPIO_Init+0x1e4>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a3d      	ldr	r2, [pc, #244]	; (8002dd8 <HAL_GPIO_Init+0x2cc>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d101      	bne.n	8002cec <HAL_GPIO_Init+0x1e0>
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e006      	b.n	8002cfa <HAL_GPIO_Init+0x1ee>
 8002cec:	2304      	movs	r3, #4
 8002cee:	e004      	b.n	8002cfa <HAL_GPIO_Init+0x1ee>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e002      	b.n	8002cfa <HAL_GPIO_Init+0x1ee>
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <HAL_GPIO_Init+0x1ee>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfc:	f002 0203 	and.w	r2, r2, #3
 8002d00:	0092      	lsls	r2, r2, #2
 8002d02:	4093      	lsls	r3, r2
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d0a:	492f      	ldr	r1, [pc, #188]	; (8002dc8 <HAL_GPIO_Init+0x2bc>)
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	089b      	lsrs	r3, r3, #2
 8002d10:	3302      	adds	r3, #2
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d006      	beq.n	8002d32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d24:	4b2d      	ldr	r3, [pc, #180]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	492c      	ldr	r1, [pc, #176]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	608b      	str	r3, [r1, #8]
 8002d30:	e006      	b.n	8002d40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d32:	4b2a      	ldr	r3, [pc, #168]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	4928      	ldr	r1, [pc, #160]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d006      	beq.n	8002d5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d4c:	4b23      	ldr	r3, [pc, #140]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	4922      	ldr	r1, [pc, #136]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60cb      	str	r3, [r1, #12]
 8002d58:	e006      	b.n	8002d68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d5a:	4b20      	ldr	r3, [pc, #128]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	43db      	mvns	r3, r3
 8002d62:	491e      	ldr	r1, [pc, #120]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d006      	beq.n	8002d82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d74:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	4918      	ldr	r1, [pc, #96]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	604b      	str	r3, [r1, #4]
 8002d80:	e006      	b.n	8002d90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d82:	4b16      	ldr	r3, [pc, #88]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	4914      	ldr	r1, [pc, #80]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d021      	beq.n	8002de0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d9c:	4b0f      	ldr	r3, [pc, #60]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	490e      	ldr	r1, [pc, #56]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	600b      	str	r3, [r1, #0]
 8002da8:	e021      	b.n	8002dee <HAL_GPIO_Init+0x2e2>
 8002daa:	bf00      	nop
 8002dac:	10320000 	.word	0x10320000
 8002db0:	10310000 	.word	0x10310000
 8002db4:	10220000 	.word	0x10220000
 8002db8:	10210000 	.word	0x10210000
 8002dbc:	10120000 	.word	0x10120000
 8002dc0:	10110000 	.word	0x10110000
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40010000 	.word	0x40010000
 8002dcc:	40010800 	.word	0x40010800
 8002dd0:	40010c00 	.word	0x40010c00
 8002dd4:	40011000 	.word	0x40011000
 8002dd8:	40011400 	.word	0x40011400
 8002ddc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_GPIO_Init+0x304>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	43db      	mvns	r3, r3
 8002de8:	4909      	ldr	r1, [pc, #36]	; (8002e10 <HAL_GPIO_Init+0x304>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	3301      	adds	r3, #1
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f47f ae8e 	bne.w	8002b20 <HAL_GPIO_Init+0x14>
  }
}
 8002e04:	bf00      	nop
 8002e06:	bf00      	nop
 8002e08:	372c      	adds	r7, #44	; 0x2c
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr
 8002e10:	40010400 	.word	0x40010400

08002e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	807b      	strh	r3, [r7, #2]
 8002e20:	4613      	mov	r3, r2
 8002e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e24:	787b      	ldrb	r3, [r7, #1]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e2a:	887a      	ldrh	r2, [r7, #2]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e30:	e003      	b.n	8002e3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e32:	887b      	ldrh	r3, [r7, #2]
 8002e34:	041a      	lsls	r2, r3, #16
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	611a      	str	r2, [r3, #16]
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e56:	887a      	ldrh	r2, [r7, #2]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	041a      	lsls	r2, r3, #16
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	43d9      	mvns	r1, r3
 8002e62:	887b      	ldrh	r3, [r7, #2]
 8002e64:	400b      	ands	r3, r1
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	611a      	str	r2, [r3, #16]
}
 8002e6c:	bf00      	nop
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr
	...

08002e78 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002e84:	4b09      	ldr	r3, [pc, #36]	; (8002eac <HAL_PWR_EnterSLEEPMode+0x34>)
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	4a08      	ldr	r2, [pc, #32]	; (8002eac <HAL_PWR_EnterSLEEPMode+0x34>)
 8002e8a:	f023 0304 	bic.w	r3, r3, #4
 8002e8e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002e96:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8002e98:	e002      	b.n	8002ea0 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8002e9a:	bf40      	sev
    __WFE();
 8002e9c:	bf20      	wfe
    __WFE();
 8002e9e:	bf20      	wfe
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e272      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 8087 	beq.w	8002fde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ed0:	4b92      	ldr	r3, [pc, #584]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 030c 	and.w	r3, r3, #12
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d00c      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002edc:	4b8f      	ldr	r3, [pc, #572]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 030c 	and.w	r3, r3, #12
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d112      	bne.n	8002f0e <HAL_RCC_OscConfig+0x5e>
 8002ee8:	4b8c      	ldr	r3, [pc, #560]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef4:	d10b      	bne.n	8002f0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef6:	4b89      	ldr	r3, [pc, #548]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d06c      	beq.n	8002fdc <HAL_RCC_OscConfig+0x12c>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d168      	bne.n	8002fdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e24c      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f16:	d106      	bne.n	8002f26 <HAL_RCC_OscConfig+0x76>
 8002f18:	4b80      	ldr	r3, [pc, #512]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a7f      	ldr	r2, [pc, #508]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	e02e      	b.n	8002f84 <HAL_RCC_OscConfig+0xd4>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10c      	bne.n	8002f48 <HAL_RCC_OscConfig+0x98>
 8002f2e:	4b7b      	ldr	r3, [pc, #492]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a7a      	ldr	r2, [pc, #488]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	4b78      	ldr	r3, [pc, #480]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a77      	ldr	r2, [pc, #476]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	e01d      	b.n	8002f84 <HAL_RCC_OscConfig+0xd4>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f50:	d10c      	bne.n	8002f6c <HAL_RCC_OscConfig+0xbc>
 8002f52:	4b72      	ldr	r3, [pc, #456]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a71      	ldr	r2, [pc, #452]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	4b6f      	ldr	r3, [pc, #444]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a6e      	ldr	r2, [pc, #440]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	e00b      	b.n	8002f84 <HAL_RCC_OscConfig+0xd4>
 8002f6c:	4b6b      	ldr	r3, [pc, #428]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a6a      	ldr	r2, [pc, #424]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	4b68      	ldr	r3, [pc, #416]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a67      	ldr	r2, [pc, #412]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d013      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8c:	f7fe ff88 	bl	8001ea0 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f94:	f7fe ff84 	bl	8001ea0 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b64      	cmp	r3, #100	; 0x64
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e200      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa6:	4b5d      	ldr	r3, [pc, #372]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0f0      	beq.n	8002f94 <HAL_RCC_OscConfig+0xe4>
 8002fb2:	e014      	b.n	8002fde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb4:	f7fe ff74 	bl	8001ea0 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fbc:	f7fe ff70 	bl	8001ea0 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b64      	cmp	r3, #100	; 0x64
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e1ec      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fce:	4b53      	ldr	r3, [pc, #332]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0x10c>
 8002fda:	e000      	b.n	8002fde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d063      	beq.n	80030b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fea:	4b4c      	ldr	r3, [pc, #304]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 030c 	and.w	r3, r3, #12
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00b      	beq.n	800300e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ff6:	4b49      	ldr	r3, [pc, #292]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	2b08      	cmp	r3, #8
 8003000:	d11c      	bne.n	800303c <HAL_RCC_OscConfig+0x18c>
 8003002:	4b46      	ldr	r3, [pc, #280]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d116      	bne.n	800303c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300e:	4b43      	ldr	r3, [pc, #268]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d005      	beq.n	8003026 <HAL_RCC_OscConfig+0x176>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d001      	beq.n	8003026 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e1c0      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003026:	4b3d      	ldr	r3, [pc, #244]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	4939      	ldr	r1, [pc, #228]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8003036:	4313      	orrs	r3, r2
 8003038:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800303a:	e03a      	b.n	80030b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d020      	beq.n	8003086 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003044:	4b36      	ldr	r3, [pc, #216]	; (8003120 <HAL_RCC_OscConfig+0x270>)
 8003046:	2201      	movs	r2, #1
 8003048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304a:	f7fe ff29 	bl	8001ea0 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003052:	f7fe ff25 	bl	8001ea0 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e1a1      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003064:	4b2d      	ldr	r3, [pc, #180]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0f0      	beq.n	8003052 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003070:	4b2a      	ldr	r3, [pc, #168]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	4927      	ldr	r1, [pc, #156]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 8003080:	4313      	orrs	r3, r2
 8003082:	600b      	str	r3, [r1, #0]
 8003084:	e015      	b.n	80030b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003086:	4b26      	ldr	r3, [pc, #152]	; (8003120 <HAL_RCC_OscConfig+0x270>)
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308c:	f7fe ff08 	bl	8001ea0 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003094:	f7fe ff04 	bl	8001ea0 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e180      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a6:	4b1d      	ldr	r3, [pc, #116]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f0      	bne.n	8003094 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d03a      	beq.n	8003134 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d019      	beq.n	80030fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030c6:	4b17      	ldr	r3, [pc, #92]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 80030c8:	2201      	movs	r2, #1
 80030ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030cc:	f7fe fee8 	bl	8001ea0 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d4:	f7fe fee4 	bl	8001ea0 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e160      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e6:	4b0d      	ldr	r3, [pc, #52]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0f0      	beq.n	80030d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030f2:	2001      	movs	r0, #1
 80030f4:	f000 face 	bl	8003694 <RCC_Delay>
 80030f8:	e01c      	b.n	8003134 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030fa:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003100:	f7fe fece 	bl	8001ea0 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003106:	e00f      	b.n	8003128 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003108:	f7fe feca 	bl	8001ea0 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d908      	bls.n	8003128 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e146      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
 800311a:	bf00      	nop
 800311c:	40021000 	.word	0x40021000
 8003120:	42420000 	.word	0x42420000
 8003124:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003128:	4b92      	ldr	r3, [pc, #584]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1e9      	bne.n	8003108 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 80a6 	beq.w	800328e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003142:	2300      	movs	r3, #0
 8003144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003146:	4b8b      	ldr	r3, [pc, #556]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10d      	bne.n	800316e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003152:	4b88      	ldr	r3, [pc, #544]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	4a87      	ldr	r2, [pc, #540]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800315c:	61d3      	str	r3, [r2, #28]
 800315e:	4b85      	ldr	r3, [pc, #532]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800316a:	2301      	movs	r3, #1
 800316c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316e:	4b82      	ldr	r3, [pc, #520]	; (8003378 <HAL_RCC_OscConfig+0x4c8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003176:	2b00      	cmp	r3, #0
 8003178:	d118      	bne.n	80031ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800317a:	4b7f      	ldr	r3, [pc, #508]	; (8003378 <HAL_RCC_OscConfig+0x4c8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a7e      	ldr	r2, [pc, #504]	; (8003378 <HAL_RCC_OscConfig+0x4c8>)
 8003180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003186:	f7fe fe8b 	bl	8001ea0 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800318e:	f7fe fe87 	bl	8001ea0 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b64      	cmp	r3, #100	; 0x64
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e103      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a0:	4b75      	ldr	r3, [pc, #468]	; (8003378 <HAL_RCC_OscConfig+0x4c8>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f0      	beq.n	800318e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d106      	bne.n	80031c2 <HAL_RCC_OscConfig+0x312>
 80031b4:	4b6f      	ldr	r3, [pc, #444]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	4a6e      	ldr	r2, [pc, #440]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6213      	str	r3, [r2, #32]
 80031c0:	e02d      	b.n	800321e <HAL_RCC_OscConfig+0x36e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10c      	bne.n	80031e4 <HAL_RCC_OscConfig+0x334>
 80031ca:	4b6a      	ldr	r3, [pc, #424]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	4a69      	ldr	r2, [pc, #420]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	6213      	str	r3, [r2, #32]
 80031d6:	4b67      	ldr	r3, [pc, #412]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	4a66      	ldr	r2, [pc, #408]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031dc:	f023 0304 	bic.w	r3, r3, #4
 80031e0:	6213      	str	r3, [r2, #32]
 80031e2:	e01c      	b.n	800321e <HAL_RCC_OscConfig+0x36e>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	2b05      	cmp	r3, #5
 80031ea:	d10c      	bne.n	8003206 <HAL_RCC_OscConfig+0x356>
 80031ec:	4b61      	ldr	r3, [pc, #388]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	4a60      	ldr	r2, [pc, #384]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031f2:	f043 0304 	orr.w	r3, r3, #4
 80031f6:	6213      	str	r3, [r2, #32]
 80031f8:	4b5e      	ldr	r3, [pc, #376]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	4a5d      	ldr	r2, [pc, #372]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	6213      	str	r3, [r2, #32]
 8003204:	e00b      	b.n	800321e <HAL_RCC_OscConfig+0x36e>
 8003206:	4b5b      	ldr	r3, [pc, #364]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	4a5a      	ldr	r2, [pc, #360]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 800320c:	f023 0301 	bic.w	r3, r3, #1
 8003210:	6213      	str	r3, [r2, #32]
 8003212:	4b58      	ldr	r3, [pc, #352]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	4a57      	ldr	r2, [pc, #348]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003218:	f023 0304 	bic.w	r3, r3, #4
 800321c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d015      	beq.n	8003252 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003226:	f7fe fe3b 	bl	8001ea0 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322c:	e00a      	b.n	8003244 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322e:	f7fe fe37 	bl	8001ea0 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	f241 3288 	movw	r2, #5000	; 0x1388
 800323c:	4293      	cmp	r3, r2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e0b1      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003244:	4b4b      	ldr	r3, [pc, #300]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0ee      	beq.n	800322e <HAL_RCC_OscConfig+0x37e>
 8003250:	e014      	b.n	800327c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003252:	f7fe fe25 	bl	8001ea0 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003258:	e00a      	b.n	8003270 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325a:	f7fe fe21 	bl	8001ea0 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	f241 3288 	movw	r2, #5000	; 0x1388
 8003268:	4293      	cmp	r3, r2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e09b      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003270:	4b40      	ldr	r3, [pc, #256]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1ee      	bne.n	800325a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800327c:	7dfb      	ldrb	r3, [r7, #23]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d105      	bne.n	800328e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003282:	4b3c      	ldr	r3, [pc, #240]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	4a3b      	ldr	r2, [pc, #236]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800328c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 8087 	beq.w	80033a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003298:	4b36      	ldr	r3, [pc, #216]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 030c 	and.w	r3, r3, #12
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d061      	beq.n	8003368 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d146      	bne.n	800333a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ac:	4b33      	ldr	r3, [pc, #204]	; (800337c <HAL_RCC_OscConfig+0x4cc>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b2:	f7fe fdf5 	bl	8001ea0 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ba:	f7fe fdf1 	bl	8001ea0 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e06d      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032cc:	4b29      	ldr	r3, [pc, #164]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1f0      	bne.n	80032ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e0:	d108      	bne.n	80032f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032e2:	4b24      	ldr	r3, [pc, #144]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	4921      	ldr	r1, [pc, #132]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032f4:	4b1f      	ldr	r3, [pc, #124]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a19      	ldr	r1, [r3, #32]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	430b      	orrs	r3, r1
 8003306:	491b      	ldr	r1, [pc, #108]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003308:	4313      	orrs	r3, r2
 800330a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800330c:	4b1b      	ldr	r3, [pc, #108]	; (800337c <HAL_RCC_OscConfig+0x4cc>)
 800330e:	2201      	movs	r2, #1
 8003310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003312:	f7fe fdc5 	bl	8001ea0 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331a:	f7fe fdc1 	bl	8001ea0 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e03d      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800332c:	4b11      	ldr	r3, [pc, #68]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0f0      	beq.n	800331a <HAL_RCC_OscConfig+0x46a>
 8003338:	e035      	b.n	80033a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333a:	4b10      	ldr	r3, [pc, #64]	; (800337c <HAL_RCC_OscConfig+0x4cc>)
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003340:	f7fe fdae 	bl	8001ea0 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003348:	f7fe fdaa 	bl	8001ea0 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e026      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800335a:	4b06      	ldr	r3, [pc, #24]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCC_OscConfig+0x498>
 8003366:	e01e      	b.n	80033a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d107      	bne.n	8003380 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e019      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
 8003374:	40021000 	.word	0x40021000
 8003378:	40007000 	.word	0x40007000
 800337c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_RCC_OscConfig+0x500>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	429a      	cmp	r2, r3
 8003392:	d106      	bne.n	80033a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339e:	429a      	cmp	r2, r3
 80033a0:	d001      	beq.n	80033a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40021000 	.word	0x40021000

080033b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e0d0      	b.n	800356a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033c8:	4b6a      	ldr	r3, [pc, #424]	; (8003574 <HAL_RCC_ClockConfig+0x1c0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d910      	bls.n	80033f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d6:	4b67      	ldr	r3, [pc, #412]	; (8003574 <HAL_RCC_ClockConfig+0x1c0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 0207 	bic.w	r2, r3, #7
 80033de:	4965      	ldr	r1, [pc, #404]	; (8003574 <HAL_RCC_ClockConfig+0x1c0>)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e6:	4b63      	ldr	r3, [pc, #396]	; (8003574 <HAL_RCC_ClockConfig+0x1c0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d001      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0b8      	b.n	800356a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d020      	beq.n	8003446 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003410:	4b59      	ldr	r3, [pc, #356]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	4a58      	ldr	r2, [pc, #352]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003416:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800341a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003428:	4b53      	ldr	r3, [pc, #332]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4a52      	ldr	r2, [pc, #328]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 800342e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003432:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003434:	4b50      	ldr	r3, [pc, #320]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	494d      	ldr	r1, [pc, #308]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003442:	4313      	orrs	r3, r2
 8003444:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d040      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d107      	bne.n	800346a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345a:	4b47      	ldr	r3, [pc, #284]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d115      	bne.n	8003492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e07f      	b.n	800356a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d107      	bne.n	8003482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003472:	4b41      	ldr	r3, [pc, #260]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d109      	bne.n	8003492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e073      	b.n	800356a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003482:	4b3d      	ldr	r3, [pc, #244]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e06b      	b.n	800356a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003492:	4b39      	ldr	r3, [pc, #228]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f023 0203 	bic.w	r2, r3, #3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	4936      	ldr	r1, [pc, #216]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034a4:	f7fe fcfc 	bl	8001ea0 <HAL_GetTick>
 80034a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034aa:	e00a      	b.n	80034c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ac:	f7fe fcf8 	bl	8001ea0 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e053      	b.n	800356a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c2:	4b2d      	ldr	r3, [pc, #180]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f003 020c 	and.w	r2, r3, #12
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d1eb      	bne.n	80034ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034d4:	4b27      	ldr	r3, [pc, #156]	; (8003574 <HAL_RCC_ClockConfig+0x1c0>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d210      	bcs.n	8003504 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e2:	4b24      	ldr	r3, [pc, #144]	; (8003574 <HAL_RCC_ClockConfig+0x1c0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 0207 	bic.w	r2, r3, #7
 80034ea:	4922      	ldr	r1, [pc, #136]	; (8003574 <HAL_RCC_ClockConfig+0x1c0>)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f2:	4b20      	ldr	r3, [pc, #128]	; (8003574 <HAL_RCC_ClockConfig+0x1c0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d001      	beq.n	8003504 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e032      	b.n	800356a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003510:	4b19      	ldr	r3, [pc, #100]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4916      	ldr	r1, [pc, #88]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 800351e:	4313      	orrs	r3, r2
 8003520:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d009      	beq.n	8003542 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800352e:	4b12      	ldr	r3, [pc, #72]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	490e      	ldr	r1, [pc, #56]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 800353e:	4313      	orrs	r3, r2
 8003540:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003542:	f000 f821 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 8003546:	4602      	mov	r2, r0
 8003548:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	091b      	lsrs	r3, r3, #4
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	490a      	ldr	r1, [pc, #40]	; (800357c <HAL_RCC_ClockConfig+0x1c8>)
 8003554:	5ccb      	ldrb	r3, [r1, r3]
 8003556:	fa22 f303 	lsr.w	r3, r2, r3
 800355a:	4a09      	ldr	r2, [pc, #36]	; (8003580 <HAL_RCC_ClockConfig+0x1cc>)
 800355c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800355e:	4b09      	ldr	r3, [pc, #36]	; (8003584 <HAL_RCC_ClockConfig+0x1d0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7fe fc5a 	bl	8001e1c <HAL_InitTick>

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40022000 	.word	0x40022000
 8003578:	40021000 	.word	0x40021000
 800357c:	08008834 	.word	0x08008834
 8003580:	20000000 	.word	0x20000000
 8003584:	20000004 	.word	0x20000004

08003588 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	2300      	movs	r3, #0
 8003594:	60bb      	str	r3, [r7, #8]
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	2300      	movs	r3, #0
 800359c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035a2:	4b1e      	ldr	r3, [pc, #120]	; (800361c <HAL_RCC_GetSysClockFreq+0x94>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d002      	beq.n	80035b8 <HAL_RCC_GetSysClockFreq+0x30>
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d003      	beq.n	80035be <HAL_RCC_GetSysClockFreq+0x36>
 80035b6:	e027      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035b8:	4b19      	ldr	r3, [pc, #100]	; (8003620 <HAL_RCC_GetSysClockFreq+0x98>)
 80035ba:	613b      	str	r3, [r7, #16]
      break;
 80035bc:	e027      	b.n	800360e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	0c9b      	lsrs	r3, r3, #18
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	4a17      	ldr	r2, [pc, #92]	; (8003624 <HAL_RCC_GetSysClockFreq+0x9c>)
 80035c8:	5cd3      	ldrb	r3, [r2, r3]
 80035ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d010      	beq.n	80035f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035d6:	4b11      	ldr	r3, [pc, #68]	; (800361c <HAL_RCC_GetSysClockFreq+0x94>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	0c5b      	lsrs	r3, r3, #17
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	4a11      	ldr	r2, [pc, #68]	; (8003628 <HAL_RCC_GetSysClockFreq+0xa0>)
 80035e2:	5cd3      	ldrb	r3, [r2, r3]
 80035e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a0d      	ldr	r2, [pc, #52]	; (8003620 <HAL_RCC_GetSysClockFreq+0x98>)
 80035ea:	fb03 f202 	mul.w	r2, r3, r2
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	e004      	b.n	8003602 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a0c      	ldr	r2, [pc, #48]	; (800362c <HAL_RCC_GetSysClockFreq+0xa4>)
 80035fc:	fb02 f303 	mul.w	r3, r2, r3
 8003600:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	613b      	str	r3, [r7, #16]
      break;
 8003606:	e002      	b.n	800360e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <HAL_RCC_GetSysClockFreq+0x98>)
 800360a:	613b      	str	r3, [r7, #16]
      break;
 800360c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800360e:	693b      	ldr	r3, [r7, #16]
}
 8003610:	4618      	mov	r0, r3
 8003612:	371c      	adds	r7, #28
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
 8003620:	007a1200 	.word	0x007a1200
 8003624:	0800884c 	.word	0x0800884c
 8003628:	0800885c 	.word	0x0800885c
 800362c:	003d0900 	.word	0x003d0900

08003630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003634:	4b02      	ldr	r3, [pc, #8]	; (8003640 <HAL_RCC_GetHCLKFreq+0x10>)
 8003636:	681b      	ldr	r3, [r3, #0]
}
 8003638:	4618      	mov	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr
 8003640:	20000000 	.word	0x20000000

08003644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003648:	f7ff fff2 	bl	8003630 <HAL_RCC_GetHCLKFreq>
 800364c:	4602      	mov	r2, r0
 800364e:	4b05      	ldr	r3, [pc, #20]	; (8003664 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	0a1b      	lsrs	r3, r3, #8
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	4903      	ldr	r1, [pc, #12]	; (8003668 <HAL_RCC_GetPCLK1Freq+0x24>)
 800365a:	5ccb      	ldrb	r3, [r1, r3]
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003660:	4618      	mov	r0, r3
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40021000 	.word	0x40021000
 8003668:	08008844 	.word	0x08008844

0800366c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003670:	f7ff ffde 	bl	8003630 <HAL_RCC_GetHCLKFreq>
 8003674:	4602      	mov	r2, r0
 8003676:	4b05      	ldr	r3, [pc, #20]	; (800368c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	0adb      	lsrs	r3, r3, #11
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	4903      	ldr	r1, [pc, #12]	; (8003690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003682:	5ccb      	ldrb	r3, [r1, r3]
 8003684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003688:	4618      	mov	r0, r3
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40021000 	.word	0x40021000
 8003690:	08008844 	.word	0x08008844

08003694 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800369c:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <RCC_Delay+0x34>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a0a      	ldr	r2, [pc, #40]	; (80036cc <RCC_Delay+0x38>)
 80036a2:	fba2 2303 	umull	r2, r3, r2, r3
 80036a6:	0a5b      	lsrs	r3, r3, #9
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	fb02 f303 	mul.w	r3, r2, r3
 80036ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036b0:	bf00      	nop
  }
  while (Delay --);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1e5a      	subs	r2, r3, #1
 80036b6:	60fa      	str	r2, [r7, #12]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1f9      	bne.n	80036b0 <RCC_Delay+0x1c>
}
 80036bc:	bf00      	nop
 80036be:	bf00      	nop
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr
 80036c8:	20000000 	.word	0x20000000
 80036cc:	10624dd3 	.word	0x10624dd3

080036d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	2300      	movs	r3, #0
 80036de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d07d      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80036ec:	2300      	movs	r3, #0
 80036ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f0:	4b4f      	ldr	r3, [pc, #316]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10d      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036fc:	4b4c      	ldr	r3, [pc, #304]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	4a4b      	ldr	r2, [pc, #300]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003706:	61d3      	str	r3, [r2, #28]
 8003708:	4b49      	ldr	r3, [pc, #292]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003714:	2301      	movs	r3, #1
 8003716:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003718:	4b46      	ldr	r3, [pc, #280]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003720:	2b00      	cmp	r3, #0
 8003722:	d118      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003724:	4b43      	ldr	r3, [pc, #268]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a42      	ldr	r2, [pc, #264]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800372a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800372e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003730:	f7fe fbb6 	bl	8001ea0 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003736:	e008      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003738:	f7fe fbb2 	bl	8001ea0 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b64      	cmp	r3, #100	; 0x64
 8003744:	d901      	bls.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e06d      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374a:	4b3a      	ldr	r3, [pc, #232]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003756:	4b36      	ldr	r3, [pc, #216]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800375e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d02e      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	429a      	cmp	r2, r3
 8003772:	d027      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003774:	4b2e      	ldr	r3, [pc, #184]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800377c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800377e:	4b2e      	ldr	r3, [pc, #184]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003780:	2201      	movs	r2, #1
 8003782:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003784:	4b2c      	ldr	r3, [pc, #176]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800378a:	4a29      	ldr	r2, [pc, #164]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d014      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379a:	f7fe fb81 	bl	8001ea0 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a0:	e00a      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a2:	f7fe fb7d 	bl	8001ea0 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e036      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b8:	4b1d      	ldr	r3, [pc, #116]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0ee      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037c4:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	4917      	ldr	r1, [pc, #92]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037d6:	7dfb      	ldrb	r3, [r7, #23]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d105      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037dc:	4b14      	ldr	r3, [pc, #80]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	4a13      	ldr	r2, [pc, #76]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037f4:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	490b      	ldr	r1, [pc, #44]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003802:	4313      	orrs	r3, r2
 8003804:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	2b00      	cmp	r3, #0
 8003810:	d008      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003812:	4b07      	ldr	r3, [pc, #28]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	4904      	ldr	r1, [pc, #16]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003820:	4313      	orrs	r3, r2
 8003822:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40021000 	.word	0x40021000
 8003834:	40007000 	.word	0x40007000
 8003838:	42420440 	.word	0x42420440

0800383c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	2300      	movs	r3, #0
 800384a:	61fb      	str	r3, [r7, #28]
 800384c:	2300      	movs	r3, #0
 800384e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	2300      	movs	r3, #0
 8003856:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b10      	cmp	r3, #16
 800385c:	d00a      	beq.n	8003874 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b10      	cmp	r3, #16
 8003862:	f200 808a 	bhi.w	800397a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d045      	beq.n	80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d075      	beq.n	800395e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003872:	e082      	b.n	800397a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003874:	4b46      	ldr	r3, [pc, #280]	; (8003990 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800387a:	4b45      	ldr	r3, [pc, #276]	; (8003990 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d07b      	beq.n	800397e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	0c9b      	lsrs	r3, r3, #18
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	4a41      	ldr	r2, [pc, #260]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003890:	5cd3      	ldrb	r3, [r2, r3]
 8003892:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d015      	beq.n	80038ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800389e:	4b3c      	ldr	r3, [pc, #240]	; (8003990 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	0c5b      	lsrs	r3, r3, #17
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	4a3b      	ldr	r2, [pc, #236]	; (8003998 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80038aa:	5cd3      	ldrb	r3, [r2, r3]
 80038ac:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00d      	beq.n	80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80038b8:	4a38      	ldr	r2, [pc, #224]	; (800399c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	fb02 f303 	mul.w	r3, r2, r3
 80038c6:	61fb      	str	r3, [r7, #28]
 80038c8:	e004      	b.n	80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4a34      	ldr	r2, [pc, #208]	; (80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80038ce:	fb02 f303 	mul.w	r3, r2, r3
 80038d2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80038d4:	4b2e      	ldr	r3, [pc, #184]	; (8003990 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038e0:	d102      	bne.n	80038e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	61bb      	str	r3, [r7, #24]
      break;
 80038e6:	e04a      	b.n	800397e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	4a2d      	ldr	r2, [pc, #180]	; (80039a4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	085b      	lsrs	r3, r3, #1
 80038f4:	61bb      	str	r3, [r7, #24]
      break;
 80038f6:	e042      	b.n	800397e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80038f8:	4b25      	ldr	r3, [pc, #148]	; (8003990 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003908:	d108      	bne.n	800391c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003914:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003918:	61bb      	str	r3, [r7, #24]
 800391a:	e01f      	b.n	800395c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003926:	d109      	bne.n	800393c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003928:	4b19      	ldr	r3, [pc, #100]	; (8003990 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003934:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003938:	61bb      	str	r3, [r7, #24]
 800393a:	e00f      	b.n	800395c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003942:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003946:	d11c      	bne.n	8003982 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003948:	4b11      	ldr	r3, [pc, #68]	; (8003990 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d016      	beq.n	8003982 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003954:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003958:	61bb      	str	r3, [r7, #24]
      break;
 800395a:	e012      	b.n	8003982 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800395c:	e011      	b.n	8003982 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800395e:	f7ff fe85 	bl	800366c <HAL_RCC_GetPCLK2Freq>
 8003962:	4602      	mov	r2, r0
 8003964:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	0b9b      	lsrs	r3, r3, #14
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	3301      	adds	r3, #1
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	fbb2 f3f3 	udiv	r3, r2, r3
 8003976:	61bb      	str	r3, [r7, #24]
      break;
 8003978:	e004      	b.n	8003984 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800397a:	bf00      	nop
 800397c:	e002      	b.n	8003984 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800397e:	bf00      	nop
 8003980:	e000      	b.n	8003984 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003982:	bf00      	nop
    }
  }
  return (frequency);
 8003984:	69bb      	ldr	r3, [r7, #24]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3720      	adds	r7, #32
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40021000 	.word	0x40021000
 8003994:	08008860 	.word	0x08008860
 8003998:	08008870 	.word	0x08008870
 800399c:	007a1200 	.word	0x007a1200
 80039a0:	003d0900 	.word	0x003d0900
 80039a4:	aaaaaaab 	.word	0xaaaaaaab

080039a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e042      	b.n	8003a40 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d106      	bne.n	80039d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7fe f8ba 	bl	8001b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2224      	movs	r2, #36	; 0x24
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 fdc5 	bl	800457c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	691a      	ldr	r2, [r3, #16]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695a      	ldr	r2, [r3, #20]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08a      	sub	sp, #40	; 0x28
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	4613      	mov	r3, r2
 8003a56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d16d      	bne.n	8003b44 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <HAL_UART_Transmit+0x2c>
 8003a6e:	88fb      	ldrh	r3, [r7, #6]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e066      	b.n	8003b46 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2221      	movs	r2, #33	; 0x21
 8003a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a86:	f7fe fa0b 	bl	8001ea0 <HAL_GetTick>
 8003a8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	88fa      	ldrh	r2, [r7, #6]
 8003a90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	88fa      	ldrh	r2, [r7, #6]
 8003a96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa0:	d108      	bne.n	8003ab4 <HAL_UART_Transmit+0x6c>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d104      	bne.n	8003ab4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	61bb      	str	r3, [r7, #24]
 8003ab2:	e003      	b.n	8003abc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003abc:	e02a      	b.n	8003b14 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2180      	movs	r1, #128	; 0x80
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 fb14 	bl	80040f6 <UART_WaitOnFlagUntilTimeout>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e036      	b.n	8003b46 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10b      	bne.n	8003af6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	3302      	adds	r3, #2
 8003af2:	61bb      	str	r3, [r7, #24]
 8003af4:	e007      	b.n	8003b06 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	781a      	ldrb	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	3301      	adds	r3, #1
 8003b04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1cf      	bne.n	8003abe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2200      	movs	r2, #0
 8003b26:	2140      	movs	r1, #64	; 0x40
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 fae4 	bl	80040f6 <UART_WaitOnFlagUntilTimeout>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e006      	b.n	8003b46 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	e000      	b.n	8003b46 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003b44:	2302      	movs	r3, #2
  }
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3720      	adds	r7, #32
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b084      	sub	sp, #16
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b20      	cmp	r3, #32
 8003b66:	d112      	bne.n	8003b8e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <HAL_UART_Receive_IT+0x26>
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e00b      	b.n	8003b90 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b7e:	88fb      	ldrh	r3, [r7, #6]
 8003b80:	461a      	mov	r2, r3
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 fb24 	bl	80041d2 <UART_Start_Receive_IT>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	e000      	b.n	8003b90 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003b8e:	2302      	movs	r3, #2
  }
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b0ba      	sub	sp, #232	; 0xe8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003bd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10f      	bne.n	8003bfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d009      	beq.n	8003bfe <HAL_UART_IRQHandler+0x66>
 8003bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 fc01 	bl	80043fe <UART_Receive_IT>
      return;
 8003bfc:	e25b      	b.n	80040b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003bfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 80de 	beq.w	8003dc4 <HAL_UART_IRQHandler+0x22c>
 8003c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d106      	bne.n	8003c22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 80d1 	beq.w	8003dc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00b      	beq.n	8003c46 <HAL_UART_IRQHandler+0xae>
 8003c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d005      	beq.n	8003c46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	f043 0201 	orr.w	r2, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00b      	beq.n	8003c6a <HAL_UART_IRQHandler+0xd2>
 8003c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d005      	beq.n	8003c6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	f043 0202 	orr.w	r2, r3, #2
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00b      	beq.n	8003c8e <HAL_UART_IRQHandler+0xf6>
 8003c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c86:	f043 0204 	orr.w	r2, r3, #4
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d011      	beq.n	8003cbe <HAL_UART_IRQHandler+0x126>
 8003c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d105      	bne.n	8003cb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d005      	beq.n	8003cbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	f043 0208 	orr.w	r2, r3, #8
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 81f2 	beq.w	80040ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d008      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x14e>
 8003cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cd8:	f003 0320 	and.w	r3, r3, #32
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 fb8c 	bl	80043fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bf14      	ite	ne
 8003cf4:	2301      	movne	r3, #1
 8003cf6:	2300      	moveq	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d103      	bne.n	8003d12 <HAL_UART_IRQHandler+0x17a>
 8003d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d04f      	beq.n	8003db2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fa96 	bl	8004244 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d041      	beq.n	8003daa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3314      	adds	r3, #20
 8003d2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d34:	e853 3f00 	ldrex	r3, [r3]
 8003d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3314      	adds	r3, #20
 8003d4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1d9      	bne.n	8003d26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d013      	beq.n	8003da2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7e:	4a7e      	ldr	r2, [pc, #504]	; (8003f78 <HAL_UART_IRQHandler+0x3e0>)
 8003d80:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fe fe48 	bl	8002a1c <HAL_DMA_Abort_IT>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d016      	beq.n	8003dc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da0:	e00e      	b.n	8003dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f993 	bl	80040ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da8:	e00a      	b.n	8003dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f98f 	bl	80040ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db0:	e006      	b.n	8003dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f98b 	bl	80040ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003dbe:	e175      	b.n	80040ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc0:	bf00      	nop
    return;
 8003dc2:	e173      	b.n	80040ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	f040 814f 	bne.w	800406c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd2:	f003 0310 	and.w	r3, r3, #16
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 8148 	beq.w	800406c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de0:	f003 0310 	and.w	r3, r3, #16
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 8141 	beq.w	800406c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dea:	2300      	movs	r3, #0
 8003dec:	60bb      	str	r3, [r7, #8]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	60bb      	str	r3, [r7, #8]
 8003dfe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 80b6 	beq.w	8003f7c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 8145 	beq.w	80040b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	f080 813e 	bcs.w	80040b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	f000 8088 	beq.w	8003f58 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	330c      	adds	r3, #12
 8003e4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e56:	e853 3f00 	ldrex	r3, [r3]
 8003e5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	330c      	adds	r3, #12
 8003e70:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e74:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e80:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e84:	e841 2300 	strex	r3, r2, [r1]
 8003e88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1d9      	bne.n	8003e48 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3314      	adds	r3, #20
 8003e9a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e9e:	e853 3f00 	ldrex	r3, [r3]
 8003ea2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ea4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ea6:	f023 0301 	bic.w	r3, r3, #1
 8003eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3314      	adds	r3, #20
 8003eb4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003eb8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ebc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ec0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ec4:	e841 2300 	strex	r3, r2, [r1]
 8003ec8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003eca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e1      	bne.n	8003e94 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3314      	adds	r3, #20
 8003ed6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eda:	e853 3f00 	ldrex	r3, [r3]
 8003ede:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ee0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	3314      	adds	r3, #20
 8003ef0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ef4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ef6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003efa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003efc:	e841 2300 	strex	r3, r2, [r1]
 8003f00:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1e3      	bne.n	8003ed0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	330c      	adds	r3, #12
 8003f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f20:	e853 3f00 	ldrex	r3, [r3]
 8003f24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f28:	f023 0310 	bic.w	r3, r3, #16
 8003f2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	330c      	adds	r3, #12
 8003f36:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f3a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f3c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f42:	e841 2300 	strex	r3, r2, [r1]
 8003f46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1e3      	bne.n	8003f16 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fe fd27 	bl	80029a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f8b6 	bl	80040e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f74:	e09c      	b.n	80040b0 <HAL_UART_IRQHandler+0x518>
 8003f76:	bf00      	nop
 8003f78:	08004309 	.word	0x08004309
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 808e 	beq.w	80040b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003f98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8089 	beq.w	80040b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	330c      	adds	r3, #12
 8003fa8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fac:	e853 3f00 	ldrex	r3, [r3]
 8003fb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	330c      	adds	r3, #12
 8003fc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003fc6:	647a      	str	r2, [r7, #68]	; 0x44
 8003fc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fce:	e841 2300 	strex	r3, r2, [r1]
 8003fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1e3      	bne.n	8003fa2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3314      	adds	r3, #20
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	e853 3f00 	ldrex	r3, [r3]
 8003fe8:	623b      	str	r3, [r7, #32]
   return(result);
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	f023 0301 	bic.w	r3, r3, #1
 8003ff0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3314      	adds	r3, #20
 8003ffa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ffe:	633a      	str	r2, [r7, #48]	; 0x30
 8004000:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004002:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004006:	e841 2300 	strex	r3, r2, [r1]
 800400a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800400c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1e3      	bne.n	8003fda <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	330c      	adds	r3, #12
 8004026:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	e853 3f00 	ldrex	r3, [r3]
 800402e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0310 	bic.w	r3, r3, #16
 8004036:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	330c      	adds	r3, #12
 8004040:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004044:	61fa      	str	r2, [r7, #28]
 8004046:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004048:	69b9      	ldr	r1, [r7, #24]
 800404a:	69fa      	ldr	r2, [r7, #28]
 800404c:	e841 2300 	strex	r3, r2, [r1]
 8004050:	617b      	str	r3, [r7, #20]
   return(result);
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e3      	bne.n	8004020 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800405e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004062:	4619      	mov	r1, r3
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f83b 	bl	80040e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800406a:	e023      	b.n	80040b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800406c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004074:	2b00      	cmp	r3, #0
 8004076:	d009      	beq.n	800408c <HAL_UART_IRQHandler+0x4f4>
 8004078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800407c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f953 	bl	8004330 <UART_Transmit_IT>
    return;
 800408a:	e014      	b.n	80040b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800408c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00e      	beq.n	80040b6 <HAL_UART_IRQHandler+0x51e>
 8004098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800409c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d008      	beq.n	80040b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f992 	bl	80043ce <UART_EndTransmit_IT>
    return;
 80040aa:	e004      	b.n	80040b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80040ac:	bf00      	nop
 80040ae:	e002      	b.n	80040b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80040b0:	bf00      	nop
 80040b2:	e000      	b.n	80040b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80040b4:	bf00      	nop
  }
}
 80040b6:	37e8      	adds	r7, #232	; 0xe8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr

080040ce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr

080040e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr

080040f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b090      	sub	sp, #64	; 0x40
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	603b      	str	r3, [r7, #0]
 8004102:	4613      	mov	r3, r2
 8004104:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004106:	e050      	b.n	80041aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800410a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410e:	d04c      	beq.n	80041aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004112:	2b00      	cmp	r3, #0
 8004114:	d007      	beq.n	8004126 <UART_WaitOnFlagUntilTimeout+0x30>
 8004116:	f7fd fec3 	bl	8001ea0 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004122:	429a      	cmp	r2, r3
 8004124:	d241      	bcs.n	80041aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	330c      	adds	r3, #12
 800412c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004130:	e853 3f00 	ldrex	r3, [r3]
 8004134:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800413c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	330c      	adds	r3, #12
 8004144:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004146:	637a      	str	r2, [r7, #52]	; 0x34
 8004148:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800414c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800414e:	e841 2300 	strex	r3, r2, [r1]
 8004152:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1e5      	bne.n	8004126 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3314      	adds	r3, #20
 8004160:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	e853 3f00 	ldrex	r3, [r3]
 8004168:	613b      	str	r3, [r7, #16]
   return(result);
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f023 0301 	bic.w	r3, r3, #1
 8004170:	63bb      	str	r3, [r7, #56]	; 0x38
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3314      	adds	r3, #20
 8004178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800417a:	623a      	str	r2, [r7, #32]
 800417c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417e:	69f9      	ldr	r1, [r7, #28]
 8004180:	6a3a      	ldr	r2, [r7, #32]
 8004182:	e841 2300 	strex	r3, r2, [r1]
 8004186:	61bb      	str	r3, [r7, #24]
   return(result);
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1e5      	bne.n	800415a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2220      	movs	r2, #32
 8004192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2220      	movs	r2, #32
 800419a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e00f      	b.n	80041ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4013      	ands	r3, r2
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	bf0c      	ite	eq
 80041ba:	2301      	moveq	r3, #1
 80041bc:	2300      	movne	r3, #0
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	461a      	mov	r2, r3
 80041c2:	79fb      	ldrb	r3, [r7, #7]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d09f      	beq.n	8004108 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3740      	adds	r7, #64	; 0x40
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b085      	sub	sp, #20
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	4613      	mov	r3, r2
 80041de:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	88fa      	ldrh	r2, [r7, #6]
 80041ea:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	88fa      	ldrh	r2, [r7, #6]
 80041f0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2222      	movs	r2, #34	; 0x22
 80041fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d007      	beq.n	8004218 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004216:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695a      	ldr	r2, [r3, #20]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0220 	orr.w	r2, r2, #32
 8004236:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr

08004244 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004244:	b480      	push	{r7}
 8004246:	b095      	sub	sp, #84	; 0x54
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	330c      	adds	r3, #12
 8004252:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004256:	e853 3f00 	ldrex	r3, [r3]
 800425a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800425c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	330c      	adds	r3, #12
 800426a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800426c:	643a      	str	r2, [r7, #64]	; 0x40
 800426e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004270:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004272:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004274:	e841 2300 	strex	r3, r2, [r1]
 8004278:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800427a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1e5      	bne.n	800424c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3314      	adds	r3, #20
 8004286:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	e853 3f00 	ldrex	r3, [r3]
 800428e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	f023 0301 	bic.w	r3, r3, #1
 8004296:	64bb      	str	r3, [r7, #72]	; 0x48
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3314      	adds	r3, #20
 800429e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042a8:	e841 2300 	strex	r3, r2, [r1]
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1e5      	bne.n	8004280 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d119      	bne.n	80042f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	330c      	adds	r3, #12
 80042c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	e853 3f00 	ldrex	r3, [r3]
 80042ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f023 0310 	bic.w	r3, r3, #16
 80042d2:	647b      	str	r3, [r7, #68]	; 0x44
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	330c      	adds	r3, #12
 80042da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042dc:	61ba      	str	r2, [r7, #24]
 80042de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e0:	6979      	ldr	r1, [r7, #20]
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	e841 2300 	strex	r3, r2, [r1]
 80042e8:	613b      	str	r3, [r7, #16]
   return(result);
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1e5      	bne.n	80042bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042fe:	bf00      	nop
 8004300:	3754      	adds	r7, #84	; 0x54
 8004302:	46bd      	mov	sp, r7
 8004304:	bc80      	pop	{r7}
 8004306:	4770      	bx	lr

08004308 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f7ff fed3 	bl	80040ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004328:	bf00      	nop
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b21      	cmp	r3, #33	; 0x21
 8004342:	d13e      	bne.n	80043c2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800434c:	d114      	bne.n	8004378 <UART_Transmit_IT+0x48>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d110      	bne.n	8004378 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800436a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	1c9a      	adds	r2, r3, #2
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	621a      	str	r2, [r3, #32]
 8004376:	e008      	b.n	800438a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	1c59      	adds	r1, r3, #1
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6211      	str	r1, [r2, #32]
 8004382:	781a      	ldrb	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800438e:	b29b      	uxth	r3, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	b29b      	uxth	r3, r3
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	4619      	mov	r1, r3
 8004398:	84d1      	strh	r1, [r2, #38]	; 0x26
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10f      	bne.n	80043be <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	e000      	b.n	80043c4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043c2:	2302      	movs	r3, #2
  }
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bc80      	pop	{r7}
 80043cc:	4770      	bx	lr

080043ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b082      	sub	sp, #8
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7ff fe64 	bl	80040bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b08c      	sub	sp, #48	; 0x30
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b22      	cmp	r3, #34	; 0x22
 8004410:	f040 80ae 	bne.w	8004570 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800441c:	d117      	bne.n	800444e <UART_Receive_IT+0x50>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d113      	bne.n	800444e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004426:	2300      	movs	r3, #0
 8004428:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	b29b      	uxth	r3, r3
 8004438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800443c:	b29a      	uxth	r2, r3
 800443e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004440:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004446:	1c9a      	adds	r2, r3, #2
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	629a      	str	r2, [r3, #40]	; 0x28
 800444c:	e026      	b.n	800449c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004452:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004454:	2300      	movs	r3, #0
 8004456:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004460:	d007      	beq.n	8004472 <UART_Receive_IT+0x74>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10a      	bne.n	8004480 <UART_Receive_IT+0x82>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	b2da      	uxtb	r2, r3
 800447a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447c:	701a      	strb	r2, [r3, #0]
 800447e:	e008      	b.n	8004492 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	b2db      	uxtb	r3, r3
 8004488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800448c:	b2da      	uxtb	r2, r3
 800448e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004490:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	4619      	mov	r1, r3
 80044aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d15d      	bne.n	800456c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0220 	bic.w	r2, r2, #32
 80044be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695a      	ldr	r2, [r3, #20]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 0201 	bic.w	r2, r2, #1
 80044de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d135      	bne.n	8004562 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	330c      	adds	r3, #12
 8004502:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	e853 3f00 	ldrex	r3, [r3]
 800450a:	613b      	str	r3, [r7, #16]
   return(result);
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f023 0310 	bic.w	r3, r3, #16
 8004512:	627b      	str	r3, [r7, #36]	; 0x24
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	330c      	adds	r3, #12
 800451a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451c:	623a      	str	r2, [r7, #32]
 800451e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004520:	69f9      	ldr	r1, [r7, #28]
 8004522:	6a3a      	ldr	r2, [r7, #32]
 8004524:	e841 2300 	strex	r3, r2, [r1]
 8004528:	61bb      	str	r3, [r7, #24]
   return(result);
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e5      	bne.n	80044fc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	2b10      	cmp	r3, #16
 800453c:	d10a      	bne.n	8004554 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004558:	4619      	mov	r1, r3
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7ff fdc0 	bl	80040e0 <HAL_UARTEx_RxEventCallback>
 8004560:	e002      	b.n	8004568 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7fc ffde 	bl	8001524 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004568:	2300      	movs	r3, #0
 800456a:	e002      	b.n	8004572 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800456c:	2300      	movs	r3, #0
 800456e:	e000      	b.n	8004572 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004570:	2302      	movs	r3, #2
  }
}
 8004572:	4618      	mov	r0, r3
 8004574:	3730      	adds	r7, #48	; 0x30
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689a      	ldr	r2, [r3, #8]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80045b6:	f023 030c 	bic.w	r3, r3, #12
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	6812      	ldr	r2, [r2, #0]
 80045be:	68b9      	ldr	r1, [r7, #8]
 80045c0:	430b      	orrs	r3, r1
 80045c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	699a      	ldr	r2, [r3, #24]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a2c      	ldr	r2, [pc, #176]	; (8004690 <UART_SetConfig+0x114>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d103      	bne.n	80045ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80045e4:	f7ff f842 	bl	800366c <HAL_RCC_GetPCLK2Freq>
 80045e8:	60f8      	str	r0, [r7, #12]
 80045ea:	e002      	b.n	80045f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80045ec:	f7ff f82a 	bl	8003644 <HAL_RCC_GetPCLK1Freq>
 80045f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	4613      	mov	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	009a      	lsls	r2, r3, #2
 80045fc:	441a      	add	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	fbb2 f3f3 	udiv	r3, r2, r3
 8004608:	4a22      	ldr	r2, [pc, #136]	; (8004694 <UART_SetConfig+0x118>)
 800460a:	fba2 2303 	umull	r2, r3, r2, r3
 800460e:	095b      	lsrs	r3, r3, #5
 8004610:	0119      	lsls	r1, r3, #4
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4613      	mov	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	009a      	lsls	r2, r3, #2
 800461c:	441a      	add	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	fbb2 f2f3 	udiv	r2, r2, r3
 8004628:	4b1a      	ldr	r3, [pc, #104]	; (8004694 <UART_SetConfig+0x118>)
 800462a:	fba3 0302 	umull	r0, r3, r3, r2
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	2064      	movs	r0, #100	; 0x64
 8004632:	fb00 f303 	mul.w	r3, r0, r3
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	3332      	adds	r3, #50	; 0x32
 800463c:	4a15      	ldr	r2, [pc, #84]	; (8004694 <UART_SetConfig+0x118>)
 800463e:	fba2 2303 	umull	r2, r3, r2, r3
 8004642:	095b      	lsrs	r3, r3, #5
 8004644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004648:	4419      	add	r1, r3
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	009a      	lsls	r2, r3, #2
 8004654:	441a      	add	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004660:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <UART_SetConfig+0x118>)
 8004662:	fba3 0302 	umull	r0, r3, r3, r2
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	2064      	movs	r0, #100	; 0x64
 800466a:	fb00 f303 	mul.w	r3, r0, r3
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	3332      	adds	r3, #50	; 0x32
 8004674:	4a07      	ldr	r2, [pc, #28]	; (8004694 <UART_SetConfig+0x118>)
 8004676:	fba2 2303 	umull	r2, r3, r2, r3
 800467a:	095b      	lsrs	r3, r3, #5
 800467c:	f003 020f 	and.w	r2, r3, #15
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	440a      	add	r2, r1
 8004686:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004688:	bf00      	nop
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	40013800 	.word	0x40013800
 8004694:	51eb851f 	.word	0x51eb851f

08004698 <__assert_func>:
 8004698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800469a:	4614      	mov	r4, r2
 800469c:	461a      	mov	r2, r3
 800469e:	4b09      	ldr	r3, [pc, #36]	; (80046c4 <__assert_func+0x2c>)
 80046a0:	4605      	mov	r5, r0
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68d8      	ldr	r0, [r3, #12]
 80046a6:	b14c      	cbz	r4, 80046bc <__assert_func+0x24>
 80046a8:	4b07      	ldr	r3, [pc, #28]	; (80046c8 <__assert_func+0x30>)
 80046aa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80046ae:	9100      	str	r1, [sp, #0]
 80046b0:	462b      	mov	r3, r5
 80046b2:	4906      	ldr	r1, [pc, #24]	; (80046cc <__assert_func+0x34>)
 80046b4:	f001 fb32 	bl	8005d1c <fiprintf>
 80046b8:	f001 fd5a 	bl	8006170 <abort>
 80046bc:	4b04      	ldr	r3, [pc, #16]	; (80046d0 <__assert_func+0x38>)
 80046be:	461c      	mov	r4, r3
 80046c0:	e7f3      	b.n	80046aa <__assert_func+0x12>
 80046c2:	bf00      	nop
 80046c4:	200001d0 	.word	0x200001d0
 80046c8:	08008872 	.word	0x08008872
 80046cc:	0800887f 	.word	0x0800887f
 80046d0:	080088ad 	.word	0x080088ad

080046d4 <sulp>:
 80046d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046d8:	460f      	mov	r7, r1
 80046da:	4690      	mov	r8, r2
 80046dc:	f003 fb90 	bl	8007e00 <__ulp>
 80046e0:	4604      	mov	r4, r0
 80046e2:	460d      	mov	r5, r1
 80046e4:	f1b8 0f00 	cmp.w	r8, #0
 80046e8:	d011      	beq.n	800470e <sulp+0x3a>
 80046ea:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80046ee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	dd0b      	ble.n	800470e <sulp+0x3a>
 80046f6:	2400      	movs	r4, #0
 80046f8:	051b      	lsls	r3, r3, #20
 80046fa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80046fe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004702:	4622      	mov	r2, r4
 8004704:	462b      	mov	r3, r5
 8004706:	f7fb fee7 	bl	80004d8 <__aeabi_dmul>
 800470a:	4604      	mov	r4, r0
 800470c:	460d      	mov	r5, r1
 800470e:	4620      	mov	r0, r4
 8004710:	4629      	mov	r1, r5
 8004712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004718 <_strtod_l>:
 8004718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800471c:	b09f      	sub	sp, #124	; 0x7c
 800471e:	9217      	str	r2, [sp, #92]	; 0x5c
 8004720:	2200      	movs	r2, #0
 8004722:	4604      	mov	r4, r0
 8004724:	921a      	str	r2, [sp, #104]	; 0x68
 8004726:	460d      	mov	r5, r1
 8004728:	f04f 0800 	mov.w	r8, #0
 800472c:	f04f 0900 	mov.w	r9, #0
 8004730:	460a      	mov	r2, r1
 8004732:	9219      	str	r2, [sp, #100]	; 0x64
 8004734:	7811      	ldrb	r1, [r2, #0]
 8004736:	292b      	cmp	r1, #43	; 0x2b
 8004738:	d04a      	beq.n	80047d0 <_strtod_l+0xb8>
 800473a:	d838      	bhi.n	80047ae <_strtod_l+0x96>
 800473c:	290d      	cmp	r1, #13
 800473e:	d832      	bhi.n	80047a6 <_strtod_l+0x8e>
 8004740:	2908      	cmp	r1, #8
 8004742:	d832      	bhi.n	80047aa <_strtod_l+0x92>
 8004744:	2900      	cmp	r1, #0
 8004746:	d03b      	beq.n	80047c0 <_strtod_l+0xa8>
 8004748:	2200      	movs	r2, #0
 800474a:	920e      	str	r2, [sp, #56]	; 0x38
 800474c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800474e:	7832      	ldrb	r2, [r6, #0]
 8004750:	2a30      	cmp	r2, #48	; 0x30
 8004752:	f040 80b2 	bne.w	80048ba <_strtod_l+0x1a2>
 8004756:	7872      	ldrb	r2, [r6, #1]
 8004758:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800475c:	2a58      	cmp	r2, #88	; 0x58
 800475e:	d16e      	bne.n	800483e <_strtod_l+0x126>
 8004760:	9302      	str	r3, [sp, #8]
 8004762:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004764:	4620      	mov	r0, r4
 8004766:	9301      	str	r3, [sp, #4]
 8004768:	ab1a      	add	r3, sp, #104	; 0x68
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	4a8c      	ldr	r2, [pc, #560]	; (80049a0 <_strtod_l+0x288>)
 800476e:	ab1b      	add	r3, sp, #108	; 0x6c
 8004770:	a919      	add	r1, sp, #100	; 0x64
 8004772:	f002 fc21 	bl	8006fb8 <__gethex>
 8004776:	f010 070f 	ands.w	r7, r0, #15
 800477a:	4605      	mov	r5, r0
 800477c:	d005      	beq.n	800478a <_strtod_l+0x72>
 800477e:	2f06      	cmp	r7, #6
 8004780:	d128      	bne.n	80047d4 <_strtod_l+0xbc>
 8004782:	2300      	movs	r3, #0
 8004784:	3601      	adds	r6, #1
 8004786:	9619      	str	r6, [sp, #100]	; 0x64
 8004788:	930e      	str	r3, [sp, #56]	; 0x38
 800478a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800478c:	2b00      	cmp	r3, #0
 800478e:	f040 85a0 	bne.w	80052d2 <_strtod_l+0xbba>
 8004792:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004794:	b1cb      	cbz	r3, 80047ca <_strtod_l+0xb2>
 8004796:	4642      	mov	r2, r8
 8004798:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800479c:	4610      	mov	r0, r2
 800479e:	4619      	mov	r1, r3
 80047a0:	b01f      	add	sp, #124	; 0x7c
 80047a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047a6:	2920      	cmp	r1, #32
 80047a8:	d1ce      	bne.n	8004748 <_strtod_l+0x30>
 80047aa:	3201      	adds	r2, #1
 80047ac:	e7c1      	b.n	8004732 <_strtod_l+0x1a>
 80047ae:	292d      	cmp	r1, #45	; 0x2d
 80047b0:	d1ca      	bne.n	8004748 <_strtod_l+0x30>
 80047b2:	2101      	movs	r1, #1
 80047b4:	910e      	str	r1, [sp, #56]	; 0x38
 80047b6:	1c51      	adds	r1, r2, #1
 80047b8:	9119      	str	r1, [sp, #100]	; 0x64
 80047ba:	7852      	ldrb	r2, [r2, #1]
 80047bc:	2a00      	cmp	r2, #0
 80047be:	d1c5      	bne.n	800474c <_strtod_l+0x34>
 80047c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80047c2:	9519      	str	r5, [sp, #100]	; 0x64
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f040 8582 	bne.w	80052ce <_strtod_l+0xbb6>
 80047ca:	4642      	mov	r2, r8
 80047cc:	464b      	mov	r3, r9
 80047ce:	e7e5      	b.n	800479c <_strtod_l+0x84>
 80047d0:	2100      	movs	r1, #0
 80047d2:	e7ef      	b.n	80047b4 <_strtod_l+0x9c>
 80047d4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80047d6:	b13a      	cbz	r2, 80047e8 <_strtod_l+0xd0>
 80047d8:	2135      	movs	r1, #53	; 0x35
 80047da:	a81c      	add	r0, sp, #112	; 0x70
 80047dc:	f003 fbfc 	bl	8007fd8 <__copybits>
 80047e0:	4620      	mov	r0, r4
 80047e2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80047e4:	f002 ffe0 	bl	80077a8 <_Bfree>
 80047e8:	3f01      	subs	r7, #1
 80047ea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80047ec:	2f04      	cmp	r7, #4
 80047ee:	d806      	bhi.n	80047fe <_strtod_l+0xe6>
 80047f0:	e8df f007 	tbb	[pc, r7]
 80047f4:	201d0314 	.word	0x201d0314
 80047f8:	14          	.byte	0x14
 80047f9:	00          	.byte	0x00
 80047fa:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80047fe:	05e9      	lsls	r1, r5, #23
 8004800:	bf48      	it	mi
 8004802:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8004806:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800480a:	0d1b      	lsrs	r3, r3, #20
 800480c:	051b      	lsls	r3, r3, #20
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1bb      	bne.n	800478a <_strtod_l+0x72>
 8004812:	f001 fc5d 	bl	80060d0 <__errno>
 8004816:	2322      	movs	r3, #34	; 0x22
 8004818:	6003      	str	r3, [r0, #0]
 800481a:	e7b6      	b.n	800478a <_strtod_l+0x72>
 800481c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004820:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8004824:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004828:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800482c:	e7e7      	b.n	80047fe <_strtod_l+0xe6>
 800482e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80049a4 <_strtod_l+0x28c>
 8004832:	e7e4      	b.n	80047fe <_strtod_l+0xe6>
 8004834:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004838:	f04f 38ff 	mov.w	r8, #4294967295
 800483c:	e7df      	b.n	80047fe <_strtod_l+0xe6>
 800483e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004840:	1c5a      	adds	r2, r3, #1
 8004842:	9219      	str	r2, [sp, #100]	; 0x64
 8004844:	785b      	ldrb	r3, [r3, #1]
 8004846:	2b30      	cmp	r3, #48	; 0x30
 8004848:	d0f9      	beq.n	800483e <_strtod_l+0x126>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d09d      	beq.n	800478a <_strtod_l+0x72>
 800484e:	2301      	movs	r3, #1
 8004850:	f04f 0a00 	mov.w	sl, #0
 8004854:	220a      	movs	r2, #10
 8004856:	46d3      	mov	fp, sl
 8004858:	9305      	str	r3, [sp, #20]
 800485a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800485c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8004860:	930b      	str	r3, [sp, #44]	; 0x2c
 8004862:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004864:	7806      	ldrb	r6, [r0, #0]
 8004866:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800486a:	b2d9      	uxtb	r1, r3
 800486c:	2909      	cmp	r1, #9
 800486e:	d926      	bls.n	80048be <_strtod_l+0x1a6>
 8004870:	2201      	movs	r2, #1
 8004872:	494d      	ldr	r1, [pc, #308]	; (80049a8 <_strtod_l+0x290>)
 8004874:	f001 fbd0 	bl	8006018 <strncmp>
 8004878:	2800      	cmp	r0, #0
 800487a:	d030      	beq.n	80048de <_strtod_l+0x1c6>
 800487c:	2000      	movs	r0, #0
 800487e:	4632      	mov	r2, r6
 8004880:	4603      	mov	r3, r0
 8004882:	465e      	mov	r6, fp
 8004884:	9008      	str	r0, [sp, #32]
 8004886:	2a65      	cmp	r2, #101	; 0x65
 8004888:	d001      	beq.n	800488e <_strtod_l+0x176>
 800488a:	2a45      	cmp	r2, #69	; 0x45
 800488c:	d113      	bne.n	80048b6 <_strtod_l+0x19e>
 800488e:	b91e      	cbnz	r6, 8004898 <_strtod_l+0x180>
 8004890:	9a05      	ldr	r2, [sp, #20]
 8004892:	4302      	orrs	r2, r0
 8004894:	d094      	beq.n	80047c0 <_strtod_l+0xa8>
 8004896:	2600      	movs	r6, #0
 8004898:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800489a:	1c6a      	adds	r2, r5, #1
 800489c:	9219      	str	r2, [sp, #100]	; 0x64
 800489e:	786a      	ldrb	r2, [r5, #1]
 80048a0:	2a2b      	cmp	r2, #43	; 0x2b
 80048a2:	d074      	beq.n	800498e <_strtod_l+0x276>
 80048a4:	2a2d      	cmp	r2, #45	; 0x2d
 80048a6:	d078      	beq.n	800499a <_strtod_l+0x282>
 80048a8:	f04f 0c00 	mov.w	ip, #0
 80048ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80048b0:	2909      	cmp	r1, #9
 80048b2:	d97f      	bls.n	80049b4 <_strtod_l+0x29c>
 80048b4:	9519      	str	r5, [sp, #100]	; 0x64
 80048b6:	2700      	movs	r7, #0
 80048b8:	e09e      	b.n	80049f8 <_strtod_l+0x2e0>
 80048ba:	2300      	movs	r3, #0
 80048bc:	e7c8      	b.n	8004850 <_strtod_l+0x138>
 80048be:	f1bb 0f08 	cmp.w	fp, #8
 80048c2:	bfd8      	it	le
 80048c4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80048c6:	f100 0001 	add.w	r0, r0, #1
 80048ca:	bfd6      	itet	le
 80048cc:	fb02 3301 	mlale	r3, r2, r1, r3
 80048d0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80048d4:	930a      	strle	r3, [sp, #40]	; 0x28
 80048d6:	f10b 0b01 	add.w	fp, fp, #1
 80048da:	9019      	str	r0, [sp, #100]	; 0x64
 80048dc:	e7c1      	b.n	8004862 <_strtod_l+0x14a>
 80048de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	9219      	str	r2, [sp, #100]	; 0x64
 80048e4:	785a      	ldrb	r2, [r3, #1]
 80048e6:	f1bb 0f00 	cmp.w	fp, #0
 80048ea:	d037      	beq.n	800495c <_strtod_l+0x244>
 80048ec:	465e      	mov	r6, fp
 80048ee:	9008      	str	r0, [sp, #32]
 80048f0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80048f4:	2b09      	cmp	r3, #9
 80048f6:	d912      	bls.n	800491e <_strtod_l+0x206>
 80048f8:	2301      	movs	r3, #1
 80048fa:	e7c4      	b.n	8004886 <_strtod_l+0x16e>
 80048fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80048fe:	3001      	adds	r0, #1
 8004900:	1c5a      	adds	r2, r3, #1
 8004902:	9219      	str	r2, [sp, #100]	; 0x64
 8004904:	785a      	ldrb	r2, [r3, #1]
 8004906:	2a30      	cmp	r2, #48	; 0x30
 8004908:	d0f8      	beq.n	80048fc <_strtod_l+0x1e4>
 800490a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800490e:	2b08      	cmp	r3, #8
 8004910:	f200 84e4 	bhi.w	80052dc <_strtod_l+0xbc4>
 8004914:	9008      	str	r0, [sp, #32]
 8004916:	2000      	movs	r0, #0
 8004918:	4606      	mov	r6, r0
 800491a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800491c:	930b      	str	r3, [sp, #44]	; 0x2c
 800491e:	3a30      	subs	r2, #48	; 0x30
 8004920:	f100 0301 	add.w	r3, r0, #1
 8004924:	d014      	beq.n	8004950 <_strtod_l+0x238>
 8004926:	9908      	ldr	r1, [sp, #32]
 8004928:	eb00 0c06 	add.w	ip, r0, r6
 800492c:	4419      	add	r1, r3
 800492e:	9108      	str	r1, [sp, #32]
 8004930:	4633      	mov	r3, r6
 8004932:	210a      	movs	r1, #10
 8004934:	4563      	cmp	r3, ip
 8004936:	d113      	bne.n	8004960 <_strtod_l+0x248>
 8004938:	1833      	adds	r3, r6, r0
 800493a:	2b08      	cmp	r3, #8
 800493c:	f106 0601 	add.w	r6, r6, #1
 8004940:	4406      	add	r6, r0
 8004942:	dc1a      	bgt.n	800497a <_strtod_l+0x262>
 8004944:	230a      	movs	r3, #10
 8004946:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004948:	fb03 2301 	mla	r3, r3, r1, r2
 800494c:	930a      	str	r3, [sp, #40]	; 0x28
 800494e:	2300      	movs	r3, #0
 8004950:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004952:	4618      	mov	r0, r3
 8004954:	1c51      	adds	r1, r2, #1
 8004956:	9119      	str	r1, [sp, #100]	; 0x64
 8004958:	7852      	ldrb	r2, [r2, #1]
 800495a:	e7c9      	b.n	80048f0 <_strtod_l+0x1d8>
 800495c:	4658      	mov	r0, fp
 800495e:	e7d2      	b.n	8004906 <_strtod_l+0x1ee>
 8004960:	2b08      	cmp	r3, #8
 8004962:	f103 0301 	add.w	r3, r3, #1
 8004966:	dc03      	bgt.n	8004970 <_strtod_l+0x258>
 8004968:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800496a:	434f      	muls	r7, r1
 800496c:	970a      	str	r7, [sp, #40]	; 0x28
 800496e:	e7e1      	b.n	8004934 <_strtod_l+0x21c>
 8004970:	2b10      	cmp	r3, #16
 8004972:	bfd8      	it	le
 8004974:	fb01 fa0a 	mulle.w	sl, r1, sl
 8004978:	e7dc      	b.n	8004934 <_strtod_l+0x21c>
 800497a:	2e10      	cmp	r6, #16
 800497c:	bfdc      	itt	le
 800497e:	230a      	movle	r3, #10
 8004980:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8004984:	e7e3      	b.n	800494e <_strtod_l+0x236>
 8004986:	2300      	movs	r3, #0
 8004988:	9308      	str	r3, [sp, #32]
 800498a:	2301      	movs	r3, #1
 800498c:	e780      	b.n	8004890 <_strtod_l+0x178>
 800498e:	f04f 0c00 	mov.w	ip, #0
 8004992:	1caa      	adds	r2, r5, #2
 8004994:	9219      	str	r2, [sp, #100]	; 0x64
 8004996:	78aa      	ldrb	r2, [r5, #2]
 8004998:	e788      	b.n	80048ac <_strtod_l+0x194>
 800499a:	f04f 0c01 	mov.w	ip, #1
 800499e:	e7f8      	b.n	8004992 <_strtod_l+0x27a>
 80049a0:	080088b0 	.word	0x080088b0
 80049a4:	7ff00000 	.word	0x7ff00000
 80049a8:	080088ae 	.word	0x080088ae
 80049ac:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80049ae:	1c51      	adds	r1, r2, #1
 80049b0:	9119      	str	r1, [sp, #100]	; 0x64
 80049b2:	7852      	ldrb	r2, [r2, #1]
 80049b4:	2a30      	cmp	r2, #48	; 0x30
 80049b6:	d0f9      	beq.n	80049ac <_strtod_l+0x294>
 80049b8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80049bc:	2908      	cmp	r1, #8
 80049be:	f63f af7a 	bhi.w	80048b6 <_strtod_l+0x19e>
 80049c2:	3a30      	subs	r2, #48	; 0x30
 80049c4:	9209      	str	r2, [sp, #36]	; 0x24
 80049c6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80049c8:	920c      	str	r2, [sp, #48]	; 0x30
 80049ca:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80049cc:	1c57      	adds	r7, r2, #1
 80049ce:	9719      	str	r7, [sp, #100]	; 0x64
 80049d0:	7852      	ldrb	r2, [r2, #1]
 80049d2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80049d6:	f1be 0f09 	cmp.w	lr, #9
 80049da:	d938      	bls.n	8004a4e <_strtod_l+0x336>
 80049dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80049de:	1a7f      	subs	r7, r7, r1
 80049e0:	2f08      	cmp	r7, #8
 80049e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80049e6:	dc03      	bgt.n	80049f0 <_strtod_l+0x2d8>
 80049e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049ea:	428f      	cmp	r7, r1
 80049ec:	bfa8      	it	ge
 80049ee:	460f      	movge	r7, r1
 80049f0:	f1bc 0f00 	cmp.w	ip, #0
 80049f4:	d000      	beq.n	80049f8 <_strtod_l+0x2e0>
 80049f6:	427f      	negs	r7, r7
 80049f8:	2e00      	cmp	r6, #0
 80049fa:	d14f      	bne.n	8004a9c <_strtod_l+0x384>
 80049fc:	9905      	ldr	r1, [sp, #20]
 80049fe:	4301      	orrs	r1, r0
 8004a00:	f47f aec3 	bne.w	800478a <_strtod_l+0x72>
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f47f aedb 	bne.w	80047c0 <_strtod_l+0xa8>
 8004a0a:	2a69      	cmp	r2, #105	; 0x69
 8004a0c:	d029      	beq.n	8004a62 <_strtod_l+0x34a>
 8004a0e:	dc26      	bgt.n	8004a5e <_strtod_l+0x346>
 8004a10:	2a49      	cmp	r2, #73	; 0x49
 8004a12:	d026      	beq.n	8004a62 <_strtod_l+0x34a>
 8004a14:	2a4e      	cmp	r2, #78	; 0x4e
 8004a16:	f47f aed3 	bne.w	80047c0 <_strtod_l+0xa8>
 8004a1a:	499a      	ldr	r1, [pc, #616]	; (8004c84 <_strtod_l+0x56c>)
 8004a1c:	a819      	add	r0, sp, #100	; 0x64
 8004a1e:	f002 fd0d 	bl	800743c <__match>
 8004a22:	2800      	cmp	r0, #0
 8004a24:	f43f aecc 	beq.w	80047c0 <_strtod_l+0xa8>
 8004a28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b28      	cmp	r3, #40	; 0x28
 8004a2e:	d12f      	bne.n	8004a90 <_strtod_l+0x378>
 8004a30:	4995      	ldr	r1, [pc, #596]	; (8004c88 <_strtod_l+0x570>)
 8004a32:	aa1c      	add	r2, sp, #112	; 0x70
 8004a34:	a819      	add	r0, sp, #100	; 0x64
 8004a36:	f002 fd15 	bl	8007464 <__hexnan>
 8004a3a:	2805      	cmp	r0, #5
 8004a3c:	d128      	bne.n	8004a90 <_strtod_l+0x378>
 8004a3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004a40:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004a44:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004a48:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004a4c:	e69d      	b.n	800478a <_strtod_l+0x72>
 8004a4e:	210a      	movs	r1, #10
 8004a50:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004a52:	fb01 2107 	mla	r1, r1, r7, r2
 8004a56:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8004a5a:	9209      	str	r2, [sp, #36]	; 0x24
 8004a5c:	e7b5      	b.n	80049ca <_strtod_l+0x2b2>
 8004a5e:	2a6e      	cmp	r2, #110	; 0x6e
 8004a60:	e7d9      	b.n	8004a16 <_strtod_l+0x2fe>
 8004a62:	498a      	ldr	r1, [pc, #552]	; (8004c8c <_strtod_l+0x574>)
 8004a64:	a819      	add	r0, sp, #100	; 0x64
 8004a66:	f002 fce9 	bl	800743c <__match>
 8004a6a:	2800      	cmp	r0, #0
 8004a6c:	f43f aea8 	beq.w	80047c0 <_strtod_l+0xa8>
 8004a70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004a72:	4987      	ldr	r1, [pc, #540]	; (8004c90 <_strtod_l+0x578>)
 8004a74:	3b01      	subs	r3, #1
 8004a76:	a819      	add	r0, sp, #100	; 0x64
 8004a78:	9319      	str	r3, [sp, #100]	; 0x64
 8004a7a:	f002 fcdf 	bl	800743c <__match>
 8004a7e:	b910      	cbnz	r0, 8004a86 <_strtod_l+0x36e>
 8004a80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004a82:	3301      	adds	r3, #1
 8004a84:	9319      	str	r3, [sp, #100]	; 0x64
 8004a86:	f04f 0800 	mov.w	r8, #0
 8004a8a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8004c94 <_strtod_l+0x57c>
 8004a8e:	e67c      	b.n	800478a <_strtod_l+0x72>
 8004a90:	4881      	ldr	r0, [pc, #516]	; (8004c98 <_strtod_l+0x580>)
 8004a92:	f001 fb67 	bl	8006164 <nan>
 8004a96:	4680      	mov	r8, r0
 8004a98:	4689      	mov	r9, r1
 8004a9a:	e676      	b.n	800478a <_strtod_l+0x72>
 8004a9c:	9b08      	ldr	r3, [sp, #32]
 8004a9e:	f1bb 0f00 	cmp.w	fp, #0
 8004aa2:	bf08      	it	eq
 8004aa4:	46b3      	moveq	fp, r6
 8004aa6:	1afb      	subs	r3, r7, r3
 8004aa8:	2e10      	cmp	r6, #16
 8004aaa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004aac:	4635      	mov	r5, r6
 8004aae:	9309      	str	r3, [sp, #36]	; 0x24
 8004ab0:	bfa8      	it	ge
 8004ab2:	2510      	movge	r5, #16
 8004ab4:	f7fb fc96 	bl	80003e4 <__aeabi_ui2d>
 8004ab8:	2e09      	cmp	r6, #9
 8004aba:	4680      	mov	r8, r0
 8004abc:	4689      	mov	r9, r1
 8004abe:	dd13      	ble.n	8004ae8 <_strtod_l+0x3d0>
 8004ac0:	4b76      	ldr	r3, [pc, #472]	; (8004c9c <_strtod_l+0x584>)
 8004ac2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004ac6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004aca:	f7fb fd05 	bl	80004d8 <__aeabi_dmul>
 8004ace:	4680      	mov	r8, r0
 8004ad0:	4650      	mov	r0, sl
 8004ad2:	4689      	mov	r9, r1
 8004ad4:	f7fb fc86 	bl	80003e4 <__aeabi_ui2d>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	4640      	mov	r0, r8
 8004ade:	4649      	mov	r1, r9
 8004ae0:	f7fb fb44 	bl	800016c <__adddf3>
 8004ae4:	4680      	mov	r8, r0
 8004ae6:	4689      	mov	r9, r1
 8004ae8:	2e0f      	cmp	r6, #15
 8004aea:	dc36      	bgt.n	8004b5a <_strtod_l+0x442>
 8004aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f43f ae4b 	beq.w	800478a <_strtod_l+0x72>
 8004af4:	dd22      	ble.n	8004b3c <_strtod_l+0x424>
 8004af6:	2b16      	cmp	r3, #22
 8004af8:	dc09      	bgt.n	8004b0e <_strtod_l+0x3f6>
 8004afa:	4968      	ldr	r1, [pc, #416]	; (8004c9c <_strtod_l+0x584>)
 8004afc:	4642      	mov	r2, r8
 8004afe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004b02:	464b      	mov	r3, r9
 8004b04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b08:	f7fb fce6 	bl	80004d8 <__aeabi_dmul>
 8004b0c:	e7c3      	b.n	8004a96 <_strtod_l+0x37e>
 8004b0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b10:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8004b14:	4293      	cmp	r3, r2
 8004b16:	db20      	blt.n	8004b5a <_strtod_l+0x442>
 8004b18:	4c60      	ldr	r4, [pc, #384]	; (8004c9c <_strtod_l+0x584>)
 8004b1a:	f1c6 060f 	rsb	r6, r6, #15
 8004b1e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8004b22:	4642      	mov	r2, r8
 8004b24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b28:	464b      	mov	r3, r9
 8004b2a:	f7fb fcd5 	bl	80004d8 <__aeabi_dmul>
 8004b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b30:	1b9e      	subs	r6, r3, r6
 8004b32:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8004b36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004b3a:	e7e5      	b.n	8004b08 <_strtod_l+0x3f0>
 8004b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b3e:	3316      	adds	r3, #22
 8004b40:	db0b      	blt.n	8004b5a <_strtod_l+0x442>
 8004b42:	9b08      	ldr	r3, [sp, #32]
 8004b44:	4640      	mov	r0, r8
 8004b46:	1bdf      	subs	r7, r3, r7
 8004b48:	4b54      	ldr	r3, [pc, #336]	; (8004c9c <_strtod_l+0x584>)
 8004b4a:	4649      	mov	r1, r9
 8004b4c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004b50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b54:	f7fb fdea 	bl	800072c <__aeabi_ddiv>
 8004b58:	e79d      	b.n	8004a96 <_strtod_l+0x37e>
 8004b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b5c:	1b75      	subs	r5, r6, r5
 8004b5e:	441d      	add	r5, r3
 8004b60:	2d00      	cmp	r5, #0
 8004b62:	dd70      	ble.n	8004c46 <_strtod_l+0x52e>
 8004b64:	f015 030f 	ands.w	r3, r5, #15
 8004b68:	d00a      	beq.n	8004b80 <_strtod_l+0x468>
 8004b6a:	494c      	ldr	r1, [pc, #304]	; (8004c9c <_strtod_l+0x584>)
 8004b6c:	4642      	mov	r2, r8
 8004b6e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004b72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b76:	464b      	mov	r3, r9
 8004b78:	f7fb fcae 	bl	80004d8 <__aeabi_dmul>
 8004b7c:	4680      	mov	r8, r0
 8004b7e:	4689      	mov	r9, r1
 8004b80:	f035 050f 	bics.w	r5, r5, #15
 8004b84:	d04d      	beq.n	8004c22 <_strtod_l+0x50a>
 8004b86:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8004b8a:	dd22      	ble.n	8004bd2 <_strtod_l+0x4ba>
 8004b8c:	2600      	movs	r6, #0
 8004b8e:	46b3      	mov	fp, r6
 8004b90:	960b      	str	r6, [sp, #44]	; 0x2c
 8004b92:	9608      	str	r6, [sp, #32]
 8004b94:	2322      	movs	r3, #34	; 0x22
 8004b96:	f04f 0800 	mov.w	r8, #0
 8004b9a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8004c94 <_strtod_l+0x57c>
 8004b9e:	6023      	str	r3, [r4, #0]
 8004ba0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f43f adf1 	beq.w	800478a <_strtod_l+0x72>
 8004ba8:	4620      	mov	r0, r4
 8004baa:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004bac:	f002 fdfc 	bl	80077a8 <_Bfree>
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	9908      	ldr	r1, [sp, #32]
 8004bb4:	f002 fdf8 	bl	80077a8 <_Bfree>
 8004bb8:	4659      	mov	r1, fp
 8004bba:	4620      	mov	r0, r4
 8004bbc:	f002 fdf4 	bl	80077a8 <_Bfree>
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bc4:	f002 fdf0 	bl	80077a8 <_Bfree>
 8004bc8:	4631      	mov	r1, r6
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f002 fdec 	bl	80077a8 <_Bfree>
 8004bd0:	e5db      	b.n	800478a <_strtod_l+0x72>
 8004bd2:	4b33      	ldr	r3, [pc, #204]	; (8004ca0 <_strtod_l+0x588>)
 8004bd4:	4640      	mov	r0, r8
 8004bd6:	9305      	str	r3, [sp, #20]
 8004bd8:	2300      	movs	r3, #0
 8004bda:	4649      	mov	r1, r9
 8004bdc:	469a      	mov	sl, r3
 8004bde:	112d      	asrs	r5, r5, #4
 8004be0:	2d01      	cmp	r5, #1
 8004be2:	dc21      	bgt.n	8004c28 <_strtod_l+0x510>
 8004be4:	b10b      	cbz	r3, 8004bea <_strtod_l+0x4d2>
 8004be6:	4680      	mov	r8, r0
 8004be8:	4689      	mov	r9, r1
 8004bea:	492d      	ldr	r1, [pc, #180]	; (8004ca0 <_strtod_l+0x588>)
 8004bec:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004bf0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004bf4:	4642      	mov	r2, r8
 8004bf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bfa:	464b      	mov	r3, r9
 8004bfc:	f7fb fc6c 	bl	80004d8 <__aeabi_dmul>
 8004c00:	4b24      	ldr	r3, [pc, #144]	; (8004c94 <_strtod_l+0x57c>)
 8004c02:	460a      	mov	r2, r1
 8004c04:	400b      	ands	r3, r1
 8004c06:	4927      	ldr	r1, [pc, #156]	; (8004ca4 <_strtod_l+0x58c>)
 8004c08:	4680      	mov	r8, r0
 8004c0a:	428b      	cmp	r3, r1
 8004c0c:	d8be      	bhi.n	8004b8c <_strtod_l+0x474>
 8004c0e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004c12:	428b      	cmp	r3, r1
 8004c14:	bf86      	itte	hi
 8004c16:	f04f 38ff 	movhi.w	r8, #4294967295
 8004c1a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8004ca8 <_strtod_l+0x590>
 8004c1e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8004c22:	2300      	movs	r3, #0
 8004c24:	9305      	str	r3, [sp, #20]
 8004c26:	e07b      	b.n	8004d20 <_strtod_l+0x608>
 8004c28:	07ea      	lsls	r2, r5, #31
 8004c2a:	d505      	bpl.n	8004c38 <_strtod_l+0x520>
 8004c2c:	9b05      	ldr	r3, [sp, #20]
 8004c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c32:	f7fb fc51 	bl	80004d8 <__aeabi_dmul>
 8004c36:	2301      	movs	r3, #1
 8004c38:	9a05      	ldr	r2, [sp, #20]
 8004c3a:	f10a 0a01 	add.w	sl, sl, #1
 8004c3e:	3208      	adds	r2, #8
 8004c40:	106d      	asrs	r5, r5, #1
 8004c42:	9205      	str	r2, [sp, #20]
 8004c44:	e7cc      	b.n	8004be0 <_strtod_l+0x4c8>
 8004c46:	d0ec      	beq.n	8004c22 <_strtod_l+0x50a>
 8004c48:	426d      	negs	r5, r5
 8004c4a:	f015 020f 	ands.w	r2, r5, #15
 8004c4e:	d00a      	beq.n	8004c66 <_strtod_l+0x54e>
 8004c50:	4b12      	ldr	r3, [pc, #72]	; (8004c9c <_strtod_l+0x584>)
 8004c52:	4640      	mov	r0, r8
 8004c54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c58:	4649      	mov	r1, r9
 8004c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5e:	f7fb fd65 	bl	800072c <__aeabi_ddiv>
 8004c62:	4680      	mov	r8, r0
 8004c64:	4689      	mov	r9, r1
 8004c66:	112d      	asrs	r5, r5, #4
 8004c68:	d0db      	beq.n	8004c22 <_strtod_l+0x50a>
 8004c6a:	2d1f      	cmp	r5, #31
 8004c6c:	dd1e      	ble.n	8004cac <_strtod_l+0x594>
 8004c6e:	2600      	movs	r6, #0
 8004c70:	46b3      	mov	fp, r6
 8004c72:	960b      	str	r6, [sp, #44]	; 0x2c
 8004c74:	9608      	str	r6, [sp, #32]
 8004c76:	2322      	movs	r3, #34	; 0x22
 8004c78:	f04f 0800 	mov.w	r8, #0
 8004c7c:	f04f 0900 	mov.w	r9, #0
 8004c80:	6023      	str	r3, [r4, #0]
 8004c82:	e78d      	b.n	8004ba0 <_strtod_l+0x488>
 8004c84:	0800890d 	.word	0x0800890d
 8004c88:	080088c4 	.word	0x080088c4
 8004c8c:	08008905 	.word	0x08008905
 8004c90:	0800893f 	.word	0x0800893f
 8004c94:	7ff00000 	.word	0x7ff00000
 8004c98:	080088ad 	.word	0x080088ad
 8004c9c:	08008ab0 	.word	0x08008ab0
 8004ca0:	08008a88 	.word	0x08008a88
 8004ca4:	7ca00000 	.word	0x7ca00000
 8004ca8:	7fefffff 	.word	0x7fefffff
 8004cac:	f015 0310 	ands.w	r3, r5, #16
 8004cb0:	bf18      	it	ne
 8004cb2:	236a      	movne	r3, #106	; 0x6a
 8004cb4:	4640      	mov	r0, r8
 8004cb6:	9305      	str	r3, [sp, #20]
 8004cb8:	4649      	mov	r1, r9
 8004cba:	2300      	movs	r3, #0
 8004cbc:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8004f88 <_strtod_l+0x870>
 8004cc0:	07ea      	lsls	r2, r5, #31
 8004cc2:	d504      	bpl.n	8004cce <_strtod_l+0x5b6>
 8004cc4:	e9da 2300 	ldrd	r2, r3, [sl]
 8004cc8:	f7fb fc06 	bl	80004d8 <__aeabi_dmul>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	106d      	asrs	r5, r5, #1
 8004cd0:	f10a 0a08 	add.w	sl, sl, #8
 8004cd4:	d1f4      	bne.n	8004cc0 <_strtod_l+0x5a8>
 8004cd6:	b10b      	cbz	r3, 8004cdc <_strtod_l+0x5c4>
 8004cd8:	4680      	mov	r8, r0
 8004cda:	4689      	mov	r9, r1
 8004cdc:	9b05      	ldr	r3, [sp, #20]
 8004cde:	b1bb      	cbz	r3, 8004d10 <_strtod_l+0x5f8>
 8004ce0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8004ce4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	4649      	mov	r1, r9
 8004cec:	dd10      	ble.n	8004d10 <_strtod_l+0x5f8>
 8004cee:	2b1f      	cmp	r3, #31
 8004cf0:	f340 8128 	ble.w	8004f44 <_strtod_l+0x82c>
 8004cf4:	2b34      	cmp	r3, #52	; 0x34
 8004cf6:	bfd8      	it	le
 8004cf8:	f04f 33ff 	movle.w	r3, #4294967295
 8004cfc:	f04f 0800 	mov.w	r8, #0
 8004d00:	bfcf      	iteee	gt
 8004d02:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004d06:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004d0a:	4093      	lslle	r3, r2
 8004d0c:	ea03 0901 	andle.w	r9, r3, r1
 8004d10:	2200      	movs	r2, #0
 8004d12:	2300      	movs	r3, #0
 8004d14:	4640      	mov	r0, r8
 8004d16:	4649      	mov	r1, r9
 8004d18:	f7fb fe46 	bl	80009a8 <__aeabi_dcmpeq>
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	d1a6      	bne.n	8004c6e <_strtod_l+0x556>
 8004d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d22:	465a      	mov	r2, fp
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	4620      	mov	r0, r4
 8004d28:	4633      	mov	r3, r6
 8004d2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d2c:	f002 fda4 	bl	8007878 <__s2b>
 8004d30:	900b      	str	r0, [sp, #44]	; 0x2c
 8004d32:	2800      	cmp	r0, #0
 8004d34:	f43f af2a 	beq.w	8004b8c <_strtod_l+0x474>
 8004d38:	2600      	movs	r6, #0
 8004d3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d3c:	9b08      	ldr	r3, [sp, #32]
 8004d3e:	2a00      	cmp	r2, #0
 8004d40:	eba3 0307 	sub.w	r3, r3, r7
 8004d44:	bfa8      	it	ge
 8004d46:	2300      	movge	r3, #0
 8004d48:	46b3      	mov	fp, r6
 8004d4a:	9312      	str	r3, [sp, #72]	; 0x48
 8004d4c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004d50:	9316      	str	r3, [sp, #88]	; 0x58
 8004d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d54:	4620      	mov	r0, r4
 8004d56:	6859      	ldr	r1, [r3, #4]
 8004d58:	f002 fce6 	bl	8007728 <_Balloc>
 8004d5c:	9008      	str	r0, [sp, #32]
 8004d5e:	2800      	cmp	r0, #0
 8004d60:	f43f af18 	beq.w	8004b94 <_strtod_l+0x47c>
 8004d64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d66:	300c      	adds	r0, #12
 8004d68:	691a      	ldr	r2, [r3, #16]
 8004d6a:	f103 010c 	add.w	r1, r3, #12
 8004d6e:	3202      	adds	r2, #2
 8004d70:	0092      	lsls	r2, r2, #2
 8004d72:	f001 f9e8 	bl	8006146 <memcpy>
 8004d76:	ab1c      	add	r3, sp, #112	; 0x70
 8004d78:	9301      	str	r3, [sp, #4]
 8004d7a:	ab1b      	add	r3, sp, #108	; 0x6c
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	4642      	mov	r2, r8
 8004d80:	464b      	mov	r3, r9
 8004d82:	4620      	mov	r0, r4
 8004d84:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8004d88:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8004d8c:	f003 f8a0 	bl	8007ed0 <__d2b>
 8004d90:	901a      	str	r0, [sp, #104]	; 0x68
 8004d92:	2800      	cmp	r0, #0
 8004d94:	f43f aefe 	beq.w	8004b94 <_strtod_l+0x47c>
 8004d98:	2101      	movs	r1, #1
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	f002 fe04 	bl	80079a8 <__i2b>
 8004da0:	4683      	mov	fp, r0
 8004da2:	2800      	cmp	r0, #0
 8004da4:	f43f aef6 	beq.w	8004b94 <_strtod_l+0x47c>
 8004da8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8004daa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004dac:	2f00      	cmp	r7, #0
 8004dae:	bfab      	itete	ge
 8004db0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8004db2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8004db4:	eb07 0a03 	addge.w	sl, r7, r3
 8004db8:	1bdd      	sublt	r5, r3, r7
 8004dba:	9b05      	ldr	r3, [sp, #20]
 8004dbc:	bfa8      	it	ge
 8004dbe:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8004dc0:	eba7 0703 	sub.w	r7, r7, r3
 8004dc4:	4417      	add	r7, r2
 8004dc6:	4b71      	ldr	r3, [pc, #452]	; (8004f8c <_strtod_l+0x874>)
 8004dc8:	f107 37ff 	add.w	r7, r7, #4294967295
 8004dcc:	bfb8      	it	lt
 8004dce:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8004dd2:	429f      	cmp	r7, r3
 8004dd4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004dd8:	f280 80c7 	bge.w	8004f6a <_strtod_l+0x852>
 8004ddc:	1bdb      	subs	r3, r3, r7
 8004dde:	2b1f      	cmp	r3, #31
 8004de0:	f04f 0101 	mov.w	r1, #1
 8004de4:	eba2 0203 	sub.w	r2, r2, r3
 8004de8:	f300 80b3 	bgt.w	8004f52 <_strtod_l+0x83a>
 8004dec:	fa01 f303 	lsl.w	r3, r1, r3
 8004df0:	9313      	str	r3, [sp, #76]	; 0x4c
 8004df2:	2300      	movs	r3, #0
 8004df4:	9310      	str	r3, [sp, #64]	; 0x40
 8004df6:	eb0a 0702 	add.w	r7, sl, r2
 8004dfa:	9b05      	ldr	r3, [sp, #20]
 8004dfc:	45ba      	cmp	sl, r7
 8004dfe:	4415      	add	r5, r2
 8004e00:	441d      	add	r5, r3
 8004e02:	4653      	mov	r3, sl
 8004e04:	bfa8      	it	ge
 8004e06:	463b      	movge	r3, r7
 8004e08:	42ab      	cmp	r3, r5
 8004e0a:	bfa8      	it	ge
 8004e0c:	462b      	movge	r3, r5
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	bfc2      	ittt	gt
 8004e12:	1aff      	subgt	r7, r7, r3
 8004e14:	1aed      	subgt	r5, r5, r3
 8004e16:	ebaa 0a03 	subgt.w	sl, sl, r3
 8004e1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	dd17      	ble.n	8004e50 <_strtod_l+0x738>
 8004e20:	4659      	mov	r1, fp
 8004e22:	461a      	mov	r2, r3
 8004e24:	4620      	mov	r0, r4
 8004e26:	f002 fe7d 	bl	8007b24 <__pow5mult>
 8004e2a:	4683      	mov	fp, r0
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	f43f aeb1 	beq.w	8004b94 <_strtod_l+0x47c>
 8004e32:	4601      	mov	r1, r0
 8004e34:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004e36:	4620      	mov	r0, r4
 8004e38:	f002 fdcc 	bl	80079d4 <__multiply>
 8004e3c:	900a      	str	r0, [sp, #40]	; 0x28
 8004e3e:	2800      	cmp	r0, #0
 8004e40:	f43f aea8 	beq.w	8004b94 <_strtod_l+0x47c>
 8004e44:	4620      	mov	r0, r4
 8004e46:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004e48:	f002 fcae 	bl	80077a8 <_Bfree>
 8004e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e4e:	931a      	str	r3, [sp, #104]	; 0x68
 8004e50:	2f00      	cmp	r7, #0
 8004e52:	f300 808f 	bgt.w	8004f74 <_strtod_l+0x85c>
 8004e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	dd08      	ble.n	8004e6e <_strtod_l+0x756>
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004e60:	9908      	ldr	r1, [sp, #32]
 8004e62:	f002 fe5f 	bl	8007b24 <__pow5mult>
 8004e66:	9008      	str	r0, [sp, #32]
 8004e68:	2800      	cmp	r0, #0
 8004e6a:	f43f ae93 	beq.w	8004b94 <_strtod_l+0x47c>
 8004e6e:	2d00      	cmp	r5, #0
 8004e70:	dd08      	ble.n	8004e84 <_strtod_l+0x76c>
 8004e72:	462a      	mov	r2, r5
 8004e74:	4620      	mov	r0, r4
 8004e76:	9908      	ldr	r1, [sp, #32]
 8004e78:	f002 feae 	bl	8007bd8 <__lshift>
 8004e7c:	9008      	str	r0, [sp, #32]
 8004e7e:	2800      	cmp	r0, #0
 8004e80:	f43f ae88 	beq.w	8004b94 <_strtod_l+0x47c>
 8004e84:	f1ba 0f00 	cmp.w	sl, #0
 8004e88:	dd08      	ble.n	8004e9c <_strtod_l+0x784>
 8004e8a:	4659      	mov	r1, fp
 8004e8c:	4652      	mov	r2, sl
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f002 fea2 	bl	8007bd8 <__lshift>
 8004e94:	4683      	mov	fp, r0
 8004e96:	2800      	cmp	r0, #0
 8004e98:	f43f ae7c 	beq.w	8004b94 <_strtod_l+0x47c>
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	9a08      	ldr	r2, [sp, #32]
 8004ea0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004ea2:	f002 ff21 	bl	8007ce8 <__mdiff>
 8004ea6:	4606      	mov	r6, r0
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	f43f ae73 	beq.w	8004b94 <_strtod_l+0x47c>
 8004eae:	2500      	movs	r5, #0
 8004eb0:	68c3      	ldr	r3, [r0, #12]
 8004eb2:	4659      	mov	r1, fp
 8004eb4:	60c5      	str	r5, [r0, #12]
 8004eb6:	930a      	str	r3, [sp, #40]	; 0x28
 8004eb8:	f002 fefa 	bl	8007cb0 <__mcmp>
 8004ebc:	42a8      	cmp	r0, r5
 8004ebe:	da6b      	bge.n	8004f98 <_strtod_l+0x880>
 8004ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ec2:	ea53 0308 	orrs.w	r3, r3, r8
 8004ec6:	f040 808f 	bne.w	8004fe8 <_strtod_l+0x8d0>
 8004eca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f040 808a 	bne.w	8004fe8 <_strtod_l+0x8d0>
 8004ed4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004ed8:	0d1b      	lsrs	r3, r3, #20
 8004eda:	051b      	lsls	r3, r3, #20
 8004edc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004ee0:	f240 8082 	bls.w	8004fe8 <_strtod_l+0x8d0>
 8004ee4:	6973      	ldr	r3, [r6, #20]
 8004ee6:	b913      	cbnz	r3, 8004eee <_strtod_l+0x7d6>
 8004ee8:	6933      	ldr	r3, [r6, #16]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	dd7c      	ble.n	8004fe8 <_strtod_l+0x8d0>
 8004eee:	4631      	mov	r1, r6
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	f002 fe70 	bl	8007bd8 <__lshift>
 8004ef8:	4659      	mov	r1, fp
 8004efa:	4606      	mov	r6, r0
 8004efc:	f002 fed8 	bl	8007cb0 <__mcmp>
 8004f00:	2800      	cmp	r0, #0
 8004f02:	dd71      	ble.n	8004fe8 <_strtod_l+0x8d0>
 8004f04:	9905      	ldr	r1, [sp, #20]
 8004f06:	464b      	mov	r3, r9
 8004f08:	4a21      	ldr	r2, [pc, #132]	; (8004f90 <_strtod_l+0x878>)
 8004f0a:	2900      	cmp	r1, #0
 8004f0c:	f000 808d 	beq.w	800502a <_strtod_l+0x912>
 8004f10:	ea02 0109 	and.w	r1, r2, r9
 8004f14:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004f18:	f300 8087 	bgt.w	800502a <_strtod_l+0x912>
 8004f1c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004f20:	f77f aea9 	ble.w	8004c76 <_strtod_l+0x55e>
 8004f24:	4640      	mov	r0, r8
 8004f26:	4649      	mov	r1, r9
 8004f28:	4b1a      	ldr	r3, [pc, #104]	; (8004f94 <_strtod_l+0x87c>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f7fb fad4 	bl	80004d8 <__aeabi_dmul>
 8004f30:	4b17      	ldr	r3, [pc, #92]	; (8004f90 <_strtod_l+0x878>)
 8004f32:	4680      	mov	r8, r0
 8004f34:	400b      	ands	r3, r1
 8004f36:	4689      	mov	r9, r1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f47f ae35 	bne.w	8004ba8 <_strtod_l+0x490>
 8004f3e:	2322      	movs	r3, #34	; 0x22
 8004f40:	6023      	str	r3, [r4, #0]
 8004f42:	e631      	b.n	8004ba8 <_strtod_l+0x490>
 8004f44:	f04f 32ff 	mov.w	r2, #4294967295
 8004f48:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4c:	ea03 0808 	and.w	r8, r3, r8
 8004f50:	e6de      	b.n	8004d10 <_strtod_l+0x5f8>
 8004f52:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8004f56:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8004f5a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8004f5e:	37e2      	adds	r7, #226	; 0xe2
 8004f60:	fa01 f307 	lsl.w	r3, r1, r7
 8004f64:	9310      	str	r3, [sp, #64]	; 0x40
 8004f66:	9113      	str	r1, [sp, #76]	; 0x4c
 8004f68:	e745      	b.n	8004df6 <_strtod_l+0x6de>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	9310      	str	r3, [sp, #64]	; 0x40
 8004f6e:	2301      	movs	r3, #1
 8004f70:	9313      	str	r3, [sp, #76]	; 0x4c
 8004f72:	e740      	b.n	8004df6 <_strtod_l+0x6de>
 8004f74:	463a      	mov	r2, r7
 8004f76:	4620      	mov	r0, r4
 8004f78:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004f7a:	f002 fe2d 	bl	8007bd8 <__lshift>
 8004f7e:	901a      	str	r0, [sp, #104]	; 0x68
 8004f80:	2800      	cmp	r0, #0
 8004f82:	f47f af68 	bne.w	8004e56 <_strtod_l+0x73e>
 8004f86:	e605      	b.n	8004b94 <_strtod_l+0x47c>
 8004f88:	080088d8 	.word	0x080088d8
 8004f8c:	fffffc02 	.word	0xfffffc02
 8004f90:	7ff00000 	.word	0x7ff00000
 8004f94:	39500000 	.word	0x39500000
 8004f98:	46ca      	mov	sl, r9
 8004f9a:	d165      	bne.n	8005068 <_strtod_l+0x950>
 8004f9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f9e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004fa2:	b352      	cbz	r2, 8004ffa <_strtod_l+0x8e2>
 8004fa4:	4a9e      	ldr	r2, [pc, #632]	; (8005220 <_strtod_l+0xb08>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d12a      	bne.n	8005000 <_strtod_l+0x8e8>
 8004faa:	9b05      	ldr	r3, [sp, #20]
 8004fac:	4641      	mov	r1, r8
 8004fae:	b1fb      	cbz	r3, 8004ff0 <_strtod_l+0x8d8>
 8004fb0:	4b9c      	ldr	r3, [pc, #624]	; (8005224 <_strtod_l+0xb0c>)
 8004fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb6:	ea09 0303 	and.w	r3, r9, r3
 8004fba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004fbe:	d81a      	bhi.n	8004ff6 <_strtod_l+0x8de>
 8004fc0:	0d1b      	lsrs	r3, r3, #20
 8004fc2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fca:	4299      	cmp	r1, r3
 8004fcc:	d118      	bne.n	8005000 <_strtod_l+0x8e8>
 8004fce:	4b96      	ldr	r3, [pc, #600]	; (8005228 <_strtod_l+0xb10>)
 8004fd0:	459a      	cmp	sl, r3
 8004fd2:	d102      	bne.n	8004fda <_strtod_l+0x8c2>
 8004fd4:	3101      	adds	r1, #1
 8004fd6:	f43f addd 	beq.w	8004b94 <_strtod_l+0x47c>
 8004fda:	f04f 0800 	mov.w	r8, #0
 8004fde:	4b91      	ldr	r3, [pc, #580]	; (8005224 <_strtod_l+0xb0c>)
 8004fe0:	ea0a 0303 	and.w	r3, sl, r3
 8004fe4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8004fe8:	9b05      	ldr	r3, [sp, #20]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d19a      	bne.n	8004f24 <_strtod_l+0x80c>
 8004fee:	e5db      	b.n	8004ba8 <_strtod_l+0x490>
 8004ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff4:	e7e9      	b.n	8004fca <_strtod_l+0x8b2>
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	e7e7      	b.n	8004fca <_strtod_l+0x8b2>
 8004ffa:	ea53 0308 	orrs.w	r3, r3, r8
 8004ffe:	d081      	beq.n	8004f04 <_strtod_l+0x7ec>
 8005000:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005002:	b1e3      	cbz	r3, 800503e <_strtod_l+0x926>
 8005004:	ea13 0f0a 	tst.w	r3, sl
 8005008:	d0ee      	beq.n	8004fe8 <_strtod_l+0x8d0>
 800500a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800500c:	4640      	mov	r0, r8
 800500e:	4649      	mov	r1, r9
 8005010:	9a05      	ldr	r2, [sp, #20]
 8005012:	b1c3      	cbz	r3, 8005046 <_strtod_l+0x92e>
 8005014:	f7ff fb5e 	bl	80046d4 <sulp>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800501e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005020:	f7fb f8a4 	bl	800016c <__adddf3>
 8005024:	4680      	mov	r8, r0
 8005026:	4689      	mov	r9, r1
 8005028:	e7de      	b.n	8004fe8 <_strtod_l+0x8d0>
 800502a:	4013      	ands	r3, r2
 800502c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005030:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005034:	f04f 38ff 	mov.w	r8, #4294967295
 8005038:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800503c:	e7d4      	b.n	8004fe8 <_strtod_l+0x8d0>
 800503e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005040:	ea13 0f08 	tst.w	r3, r8
 8005044:	e7e0      	b.n	8005008 <_strtod_l+0x8f0>
 8005046:	f7ff fb45 	bl	80046d4 <sulp>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005050:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005052:	f7fb f889 	bl	8000168 <__aeabi_dsub>
 8005056:	2200      	movs	r2, #0
 8005058:	2300      	movs	r3, #0
 800505a:	4680      	mov	r8, r0
 800505c:	4689      	mov	r9, r1
 800505e:	f7fb fca3 	bl	80009a8 <__aeabi_dcmpeq>
 8005062:	2800      	cmp	r0, #0
 8005064:	d0c0      	beq.n	8004fe8 <_strtod_l+0x8d0>
 8005066:	e606      	b.n	8004c76 <_strtod_l+0x55e>
 8005068:	4659      	mov	r1, fp
 800506a:	4630      	mov	r0, r6
 800506c:	f002 ff86 	bl	8007f7c <__ratio>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005078:	2200      	movs	r2, #0
 800507a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800507e:	f7fb fca7 	bl	80009d0 <__aeabi_dcmple>
 8005082:	2800      	cmp	r0, #0
 8005084:	d06f      	beq.n	8005166 <_strtod_l+0xa4e>
 8005086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005088:	2b00      	cmp	r3, #0
 800508a:	d17c      	bne.n	8005186 <_strtod_l+0xa6e>
 800508c:	f1b8 0f00 	cmp.w	r8, #0
 8005090:	d159      	bne.n	8005146 <_strtod_l+0xa2e>
 8005092:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005096:	2b00      	cmp	r3, #0
 8005098:	d17b      	bne.n	8005192 <_strtod_l+0xa7a>
 800509a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800509e:	2200      	movs	r2, #0
 80050a0:	4b62      	ldr	r3, [pc, #392]	; (800522c <_strtod_l+0xb14>)
 80050a2:	f7fb fc8b 	bl	80009bc <__aeabi_dcmplt>
 80050a6:	2800      	cmp	r0, #0
 80050a8:	d15a      	bne.n	8005160 <_strtod_l+0xa48>
 80050aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050ae:	2200      	movs	r2, #0
 80050b0:	4b5f      	ldr	r3, [pc, #380]	; (8005230 <_strtod_l+0xb18>)
 80050b2:	f7fb fa11 	bl	80004d8 <__aeabi_dmul>
 80050b6:	4605      	mov	r5, r0
 80050b8:	460f      	mov	r7, r1
 80050ba:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80050be:	9506      	str	r5, [sp, #24]
 80050c0:	9307      	str	r3, [sp, #28]
 80050c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80050c6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80050ca:	4b56      	ldr	r3, [pc, #344]	; (8005224 <_strtod_l+0xb0c>)
 80050cc:	4a55      	ldr	r2, [pc, #340]	; (8005224 <_strtod_l+0xb0c>)
 80050ce:	ea0a 0303 	and.w	r3, sl, r3
 80050d2:	9313      	str	r3, [sp, #76]	; 0x4c
 80050d4:	4b57      	ldr	r3, [pc, #348]	; (8005234 <_strtod_l+0xb1c>)
 80050d6:	ea0a 0202 	and.w	r2, sl, r2
 80050da:	429a      	cmp	r2, r3
 80050dc:	f040 80b0 	bne.w	8005240 <_strtod_l+0xb28>
 80050e0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80050e4:	4640      	mov	r0, r8
 80050e6:	4649      	mov	r1, r9
 80050e8:	f002 fe8a 	bl	8007e00 <__ulp>
 80050ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80050f0:	f7fb f9f2 	bl	80004d8 <__aeabi_dmul>
 80050f4:	4642      	mov	r2, r8
 80050f6:	464b      	mov	r3, r9
 80050f8:	f7fb f838 	bl	800016c <__adddf3>
 80050fc:	f8df a124 	ldr.w	sl, [pc, #292]	; 8005224 <_strtod_l+0xb0c>
 8005100:	4a4d      	ldr	r2, [pc, #308]	; (8005238 <_strtod_l+0xb20>)
 8005102:	ea01 0a0a 	and.w	sl, r1, sl
 8005106:	4592      	cmp	sl, r2
 8005108:	4680      	mov	r8, r0
 800510a:	d948      	bls.n	800519e <_strtod_l+0xa86>
 800510c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800510e:	4b46      	ldr	r3, [pc, #280]	; (8005228 <_strtod_l+0xb10>)
 8005110:	429a      	cmp	r2, r3
 8005112:	d103      	bne.n	800511c <_strtod_l+0xa04>
 8005114:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005116:	3301      	adds	r3, #1
 8005118:	f43f ad3c 	beq.w	8004b94 <_strtod_l+0x47c>
 800511c:	f04f 38ff 	mov.w	r8, #4294967295
 8005120:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8005228 <_strtod_l+0xb10>
 8005124:	4620      	mov	r0, r4
 8005126:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005128:	f002 fb3e 	bl	80077a8 <_Bfree>
 800512c:	4620      	mov	r0, r4
 800512e:	9908      	ldr	r1, [sp, #32]
 8005130:	f002 fb3a 	bl	80077a8 <_Bfree>
 8005134:	4659      	mov	r1, fp
 8005136:	4620      	mov	r0, r4
 8005138:	f002 fb36 	bl	80077a8 <_Bfree>
 800513c:	4631      	mov	r1, r6
 800513e:	4620      	mov	r0, r4
 8005140:	f002 fb32 	bl	80077a8 <_Bfree>
 8005144:	e605      	b.n	8004d52 <_strtod_l+0x63a>
 8005146:	f1b8 0f01 	cmp.w	r8, #1
 800514a:	d103      	bne.n	8005154 <_strtod_l+0xa3c>
 800514c:	f1b9 0f00 	cmp.w	r9, #0
 8005150:	f43f ad91 	beq.w	8004c76 <_strtod_l+0x55e>
 8005154:	2200      	movs	r2, #0
 8005156:	4b39      	ldr	r3, [pc, #228]	; (800523c <_strtod_l+0xb24>)
 8005158:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800515a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800515e:	e016      	b.n	800518e <_strtod_l+0xa76>
 8005160:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005162:	4f33      	ldr	r7, [pc, #204]	; (8005230 <_strtod_l+0xb18>)
 8005164:	e7a9      	b.n	80050ba <_strtod_l+0x9a2>
 8005166:	4b32      	ldr	r3, [pc, #200]	; (8005230 <_strtod_l+0xb18>)
 8005168:	2200      	movs	r2, #0
 800516a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800516e:	f7fb f9b3 	bl	80004d8 <__aeabi_dmul>
 8005172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005174:	4605      	mov	r5, r0
 8005176:	460f      	mov	r7, r1
 8005178:	2b00      	cmp	r3, #0
 800517a:	d09e      	beq.n	80050ba <_strtod_l+0x9a2>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005184:	e79d      	b.n	80050c2 <_strtod_l+0x9aa>
 8005186:	2200      	movs	r2, #0
 8005188:	4b28      	ldr	r3, [pc, #160]	; (800522c <_strtod_l+0xb14>)
 800518a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800518e:	4f27      	ldr	r7, [pc, #156]	; (800522c <_strtod_l+0xb14>)
 8005190:	e797      	b.n	80050c2 <_strtod_l+0x9aa>
 8005192:	2200      	movs	r2, #0
 8005194:	4b29      	ldr	r3, [pc, #164]	; (800523c <_strtod_l+0xb24>)
 8005196:	4645      	mov	r5, r8
 8005198:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800519c:	e7f7      	b.n	800518e <_strtod_l+0xa76>
 800519e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80051a2:	9b05      	ldr	r3, [sp, #20]
 80051a4:	46ca      	mov	sl, r9
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1bc      	bne.n	8005124 <_strtod_l+0xa0c>
 80051aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80051ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80051b0:	0d1b      	lsrs	r3, r3, #20
 80051b2:	051b      	lsls	r3, r3, #20
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d1b5      	bne.n	8005124 <_strtod_l+0xa0c>
 80051b8:	4628      	mov	r0, r5
 80051ba:	4639      	mov	r1, r7
 80051bc:	f7fb ff32 	bl	8001024 <__aeabi_d2lz>
 80051c0:	f7fb f95c 	bl	800047c <__aeabi_l2d>
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	4628      	mov	r0, r5
 80051ca:	4639      	mov	r1, r7
 80051cc:	f7fa ffcc 	bl	8000168 <__aeabi_dsub>
 80051d0:	460b      	mov	r3, r1
 80051d2:	4602      	mov	r2, r0
 80051d4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80051d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80051dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051de:	ea4a 0a08 	orr.w	sl, sl, r8
 80051e2:	ea5a 0a03 	orrs.w	sl, sl, r3
 80051e6:	d06c      	beq.n	80052c2 <_strtod_l+0xbaa>
 80051e8:	a309      	add	r3, pc, #36	; (adr r3, 8005210 <_strtod_l+0xaf8>)
 80051ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ee:	f7fb fbe5 	bl	80009bc <__aeabi_dcmplt>
 80051f2:	2800      	cmp	r0, #0
 80051f4:	f47f acd8 	bne.w	8004ba8 <_strtod_l+0x490>
 80051f8:	a307      	add	r3, pc, #28	; (adr r3, 8005218 <_strtod_l+0xb00>)
 80051fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005202:	f7fb fbf9 	bl	80009f8 <__aeabi_dcmpgt>
 8005206:	2800      	cmp	r0, #0
 8005208:	d08c      	beq.n	8005124 <_strtod_l+0xa0c>
 800520a:	e4cd      	b.n	8004ba8 <_strtod_l+0x490>
 800520c:	f3af 8000 	nop.w
 8005210:	94a03595 	.word	0x94a03595
 8005214:	3fdfffff 	.word	0x3fdfffff
 8005218:	35afe535 	.word	0x35afe535
 800521c:	3fe00000 	.word	0x3fe00000
 8005220:	000fffff 	.word	0x000fffff
 8005224:	7ff00000 	.word	0x7ff00000
 8005228:	7fefffff 	.word	0x7fefffff
 800522c:	3ff00000 	.word	0x3ff00000
 8005230:	3fe00000 	.word	0x3fe00000
 8005234:	7fe00000 	.word	0x7fe00000
 8005238:	7c9fffff 	.word	0x7c9fffff
 800523c:	bff00000 	.word	0xbff00000
 8005240:	9b05      	ldr	r3, [sp, #20]
 8005242:	b333      	cbz	r3, 8005292 <_strtod_l+0xb7a>
 8005244:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005246:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800524a:	d822      	bhi.n	8005292 <_strtod_l+0xb7a>
 800524c:	a328      	add	r3, pc, #160	; (adr r3, 80052f0 <_strtod_l+0xbd8>)
 800524e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005252:	4628      	mov	r0, r5
 8005254:	4639      	mov	r1, r7
 8005256:	f7fb fbbb 	bl	80009d0 <__aeabi_dcmple>
 800525a:	b1a0      	cbz	r0, 8005286 <_strtod_l+0xb6e>
 800525c:	4639      	mov	r1, r7
 800525e:	4628      	mov	r0, r5
 8005260:	f7fb fc12 	bl	8000a88 <__aeabi_d2uiz>
 8005264:	2801      	cmp	r0, #1
 8005266:	bf38      	it	cc
 8005268:	2001      	movcc	r0, #1
 800526a:	f7fb f8bb 	bl	80003e4 <__aeabi_ui2d>
 800526e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005270:	4605      	mov	r5, r0
 8005272:	460f      	mov	r7, r1
 8005274:	bb03      	cbnz	r3, 80052b8 <_strtod_l+0xba0>
 8005276:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800527a:	9014      	str	r0, [sp, #80]	; 0x50
 800527c:	9315      	str	r3, [sp, #84]	; 0x54
 800527e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005282:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005286:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005288:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800528a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800528e:	1a9b      	subs	r3, r3, r2
 8005290:	9311      	str	r3, [sp, #68]	; 0x44
 8005292:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005294:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005296:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800529a:	f002 fdb1 	bl	8007e00 <__ulp>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	4640      	mov	r0, r8
 80052a4:	4649      	mov	r1, r9
 80052a6:	f7fb f917 	bl	80004d8 <__aeabi_dmul>
 80052aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052ae:	f7fa ff5d 	bl	800016c <__adddf3>
 80052b2:	4680      	mov	r8, r0
 80052b4:	4689      	mov	r9, r1
 80052b6:	e774      	b.n	80051a2 <_strtod_l+0xa8a>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80052c0:	e7dd      	b.n	800527e <_strtod_l+0xb66>
 80052c2:	a30d      	add	r3, pc, #52	; (adr r3, 80052f8 <_strtod_l+0xbe0>)
 80052c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c8:	f7fb fb78 	bl	80009bc <__aeabi_dcmplt>
 80052cc:	e79b      	b.n	8005206 <_strtod_l+0xaee>
 80052ce:	2300      	movs	r3, #0
 80052d0:	930e      	str	r3, [sp, #56]	; 0x38
 80052d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80052d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80052d6:	6013      	str	r3, [r2, #0]
 80052d8:	f7ff ba5b 	b.w	8004792 <_strtod_l+0x7a>
 80052dc:	2a65      	cmp	r2, #101	; 0x65
 80052de:	f43f ab52 	beq.w	8004986 <_strtod_l+0x26e>
 80052e2:	2a45      	cmp	r2, #69	; 0x45
 80052e4:	f43f ab4f 	beq.w	8004986 <_strtod_l+0x26e>
 80052e8:	2301      	movs	r3, #1
 80052ea:	f7ff bb87 	b.w	80049fc <_strtod_l+0x2e4>
 80052ee:	bf00      	nop
 80052f0:	ffc00000 	.word	0xffc00000
 80052f4:	41dfffff 	.word	0x41dfffff
 80052f8:	94a03595 	.word	0x94a03595
 80052fc:	3fcfffff 	.word	0x3fcfffff

08005300 <strtod>:
 8005300:	460a      	mov	r2, r1
 8005302:	4601      	mov	r1, r0
 8005304:	4802      	ldr	r0, [pc, #8]	; (8005310 <strtod+0x10>)
 8005306:	4b03      	ldr	r3, [pc, #12]	; (8005314 <strtod+0x14>)
 8005308:	6800      	ldr	r0, [r0, #0]
 800530a:	f7ff ba05 	b.w	8004718 <_strtod_l>
 800530e:	bf00      	nop
 8005310:	200001d0 	.word	0x200001d0
 8005314:	20000018 	.word	0x20000018

08005318 <__cvt>:
 8005318:	2b00      	cmp	r3, #0
 800531a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800531e:	461f      	mov	r7, r3
 8005320:	bfbb      	ittet	lt
 8005322:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005326:	461f      	movlt	r7, r3
 8005328:	2300      	movge	r3, #0
 800532a:	232d      	movlt	r3, #45	; 0x2d
 800532c:	b088      	sub	sp, #32
 800532e:	4614      	mov	r4, r2
 8005330:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005332:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005334:	7013      	strb	r3, [r2, #0]
 8005336:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005338:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800533c:	f023 0820 	bic.w	r8, r3, #32
 8005340:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005344:	d005      	beq.n	8005352 <__cvt+0x3a>
 8005346:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800534a:	d100      	bne.n	800534e <__cvt+0x36>
 800534c:	3501      	adds	r5, #1
 800534e:	2302      	movs	r3, #2
 8005350:	e000      	b.n	8005354 <__cvt+0x3c>
 8005352:	2303      	movs	r3, #3
 8005354:	aa07      	add	r2, sp, #28
 8005356:	9204      	str	r2, [sp, #16]
 8005358:	aa06      	add	r2, sp, #24
 800535a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800535e:	e9cd 3500 	strd	r3, r5, [sp]
 8005362:	4622      	mov	r2, r4
 8005364:	463b      	mov	r3, r7
 8005366:	f000 ff93 	bl	8006290 <_dtoa_r>
 800536a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800536e:	4606      	mov	r6, r0
 8005370:	d102      	bne.n	8005378 <__cvt+0x60>
 8005372:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005374:	07db      	lsls	r3, r3, #31
 8005376:	d522      	bpl.n	80053be <__cvt+0xa6>
 8005378:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800537c:	eb06 0905 	add.w	r9, r6, r5
 8005380:	d110      	bne.n	80053a4 <__cvt+0x8c>
 8005382:	7833      	ldrb	r3, [r6, #0]
 8005384:	2b30      	cmp	r3, #48	; 0x30
 8005386:	d10a      	bne.n	800539e <__cvt+0x86>
 8005388:	2200      	movs	r2, #0
 800538a:	2300      	movs	r3, #0
 800538c:	4620      	mov	r0, r4
 800538e:	4639      	mov	r1, r7
 8005390:	f7fb fb0a 	bl	80009a8 <__aeabi_dcmpeq>
 8005394:	b918      	cbnz	r0, 800539e <__cvt+0x86>
 8005396:	f1c5 0501 	rsb	r5, r5, #1
 800539a:	f8ca 5000 	str.w	r5, [sl]
 800539e:	f8da 3000 	ldr.w	r3, [sl]
 80053a2:	4499      	add	r9, r3
 80053a4:	2200      	movs	r2, #0
 80053a6:	2300      	movs	r3, #0
 80053a8:	4620      	mov	r0, r4
 80053aa:	4639      	mov	r1, r7
 80053ac:	f7fb fafc 	bl	80009a8 <__aeabi_dcmpeq>
 80053b0:	b108      	cbz	r0, 80053b6 <__cvt+0x9e>
 80053b2:	f8cd 901c 	str.w	r9, [sp, #28]
 80053b6:	2230      	movs	r2, #48	; 0x30
 80053b8:	9b07      	ldr	r3, [sp, #28]
 80053ba:	454b      	cmp	r3, r9
 80053bc:	d307      	bcc.n	80053ce <__cvt+0xb6>
 80053be:	4630      	mov	r0, r6
 80053c0:	9b07      	ldr	r3, [sp, #28]
 80053c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80053c4:	1b9b      	subs	r3, r3, r6
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	b008      	add	sp, #32
 80053ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ce:	1c59      	adds	r1, r3, #1
 80053d0:	9107      	str	r1, [sp, #28]
 80053d2:	701a      	strb	r2, [r3, #0]
 80053d4:	e7f0      	b.n	80053b8 <__cvt+0xa0>

080053d6 <__exponent>:
 80053d6:	4603      	mov	r3, r0
 80053d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053da:	2900      	cmp	r1, #0
 80053dc:	f803 2b02 	strb.w	r2, [r3], #2
 80053e0:	bfb6      	itet	lt
 80053e2:	222d      	movlt	r2, #45	; 0x2d
 80053e4:	222b      	movge	r2, #43	; 0x2b
 80053e6:	4249      	neglt	r1, r1
 80053e8:	2909      	cmp	r1, #9
 80053ea:	7042      	strb	r2, [r0, #1]
 80053ec:	dd2a      	ble.n	8005444 <__exponent+0x6e>
 80053ee:	f10d 0207 	add.w	r2, sp, #7
 80053f2:	4617      	mov	r7, r2
 80053f4:	260a      	movs	r6, #10
 80053f6:	fb91 f5f6 	sdiv	r5, r1, r6
 80053fa:	4694      	mov	ip, r2
 80053fc:	fb06 1415 	mls	r4, r6, r5, r1
 8005400:	3430      	adds	r4, #48	; 0x30
 8005402:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005406:	460c      	mov	r4, r1
 8005408:	2c63      	cmp	r4, #99	; 0x63
 800540a:	4629      	mov	r1, r5
 800540c:	f102 32ff 	add.w	r2, r2, #4294967295
 8005410:	dcf1      	bgt.n	80053f6 <__exponent+0x20>
 8005412:	3130      	adds	r1, #48	; 0x30
 8005414:	f1ac 0402 	sub.w	r4, ip, #2
 8005418:	f802 1c01 	strb.w	r1, [r2, #-1]
 800541c:	4622      	mov	r2, r4
 800541e:	1c41      	adds	r1, r0, #1
 8005420:	42ba      	cmp	r2, r7
 8005422:	d30a      	bcc.n	800543a <__exponent+0x64>
 8005424:	f10d 0209 	add.w	r2, sp, #9
 8005428:	eba2 020c 	sub.w	r2, r2, ip
 800542c:	42bc      	cmp	r4, r7
 800542e:	bf88      	it	hi
 8005430:	2200      	movhi	r2, #0
 8005432:	4413      	add	r3, r2
 8005434:	1a18      	subs	r0, r3, r0
 8005436:	b003      	add	sp, #12
 8005438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800543a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800543e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005442:	e7ed      	b.n	8005420 <__exponent+0x4a>
 8005444:	2330      	movs	r3, #48	; 0x30
 8005446:	3130      	adds	r1, #48	; 0x30
 8005448:	7083      	strb	r3, [r0, #2]
 800544a:	70c1      	strb	r1, [r0, #3]
 800544c:	1d03      	adds	r3, r0, #4
 800544e:	e7f1      	b.n	8005434 <__exponent+0x5e>

08005450 <_printf_float>:
 8005450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005454:	b091      	sub	sp, #68	; 0x44
 8005456:	460c      	mov	r4, r1
 8005458:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800545c:	4616      	mov	r6, r2
 800545e:	461f      	mov	r7, r3
 8005460:	4605      	mov	r5, r0
 8005462:	f000 fdeb 	bl	800603c <_localeconv_r>
 8005466:	6803      	ldr	r3, [r0, #0]
 8005468:	4618      	mov	r0, r3
 800546a:	9309      	str	r3, [sp, #36]	; 0x24
 800546c:	f7fa fe70 	bl	8000150 <strlen>
 8005470:	2300      	movs	r3, #0
 8005472:	930e      	str	r3, [sp, #56]	; 0x38
 8005474:	f8d8 3000 	ldr.w	r3, [r8]
 8005478:	900a      	str	r0, [sp, #40]	; 0x28
 800547a:	3307      	adds	r3, #7
 800547c:	f023 0307 	bic.w	r3, r3, #7
 8005480:	f103 0208 	add.w	r2, r3, #8
 8005484:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005488:	f8d4 b000 	ldr.w	fp, [r4]
 800548c:	f8c8 2000 	str.w	r2, [r8]
 8005490:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005494:	4652      	mov	r2, sl
 8005496:	4643      	mov	r3, r8
 8005498:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800549c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80054a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80054a2:	f04f 32ff 	mov.w	r2, #4294967295
 80054a6:	4650      	mov	r0, sl
 80054a8:	4b9c      	ldr	r3, [pc, #624]	; (800571c <_printf_float+0x2cc>)
 80054aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054ac:	f7fb faae 	bl	8000a0c <__aeabi_dcmpun>
 80054b0:	bb70      	cbnz	r0, 8005510 <_printf_float+0xc0>
 80054b2:	f04f 32ff 	mov.w	r2, #4294967295
 80054b6:	4650      	mov	r0, sl
 80054b8:	4b98      	ldr	r3, [pc, #608]	; (800571c <_printf_float+0x2cc>)
 80054ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054bc:	f7fb fa88 	bl	80009d0 <__aeabi_dcmple>
 80054c0:	bb30      	cbnz	r0, 8005510 <_printf_float+0xc0>
 80054c2:	2200      	movs	r2, #0
 80054c4:	2300      	movs	r3, #0
 80054c6:	4650      	mov	r0, sl
 80054c8:	4641      	mov	r1, r8
 80054ca:	f7fb fa77 	bl	80009bc <__aeabi_dcmplt>
 80054ce:	b110      	cbz	r0, 80054d6 <_printf_float+0x86>
 80054d0:	232d      	movs	r3, #45	; 0x2d
 80054d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054d6:	4a92      	ldr	r2, [pc, #584]	; (8005720 <_printf_float+0x2d0>)
 80054d8:	4b92      	ldr	r3, [pc, #584]	; (8005724 <_printf_float+0x2d4>)
 80054da:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80054de:	bf94      	ite	ls
 80054e0:	4690      	movls	r8, r2
 80054e2:	4698      	movhi	r8, r3
 80054e4:	2303      	movs	r3, #3
 80054e6:	f04f 0a00 	mov.w	sl, #0
 80054ea:	6123      	str	r3, [r4, #16]
 80054ec:	f02b 0304 	bic.w	r3, fp, #4
 80054f0:	6023      	str	r3, [r4, #0]
 80054f2:	4633      	mov	r3, r6
 80054f4:	4621      	mov	r1, r4
 80054f6:	4628      	mov	r0, r5
 80054f8:	9700      	str	r7, [sp, #0]
 80054fa:	aa0f      	add	r2, sp, #60	; 0x3c
 80054fc:	f000 f9d6 	bl	80058ac <_printf_common>
 8005500:	3001      	adds	r0, #1
 8005502:	f040 8090 	bne.w	8005626 <_printf_float+0x1d6>
 8005506:	f04f 30ff 	mov.w	r0, #4294967295
 800550a:	b011      	add	sp, #68	; 0x44
 800550c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005510:	4652      	mov	r2, sl
 8005512:	4643      	mov	r3, r8
 8005514:	4650      	mov	r0, sl
 8005516:	4641      	mov	r1, r8
 8005518:	f7fb fa78 	bl	8000a0c <__aeabi_dcmpun>
 800551c:	b148      	cbz	r0, 8005532 <_printf_float+0xe2>
 800551e:	f1b8 0f00 	cmp.w	r8, #0
 8005522:	bfb8      	it	lt
 8005524:	232d      	movlt	r3, #45	; 0x2d
 8005526:	4a80      	ldr	r2, [pc, #512]	; (8005728 <_printf_float+0x2d8>)
 8005528:	bfb8      	it	lt
 800552a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800552e:	4b7f      	ldr	r3, [pc, #508]	; (800572c <_printf_float+0x2dc>)
 8005530:	e7d3      	b.n	80054da <_printf_float+0x8a>
 8005532:	6863      	ldr	r3, [r4, #4]
 8005534:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	d142      	bne.n	80055c2 <_printf_float+0x172>
 800553c:	2306      	movs	r3, #6
 800553e:	6063      	str	r3, [r4, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	9206      	str	r2, [sp, #24]
 8005544:	aa0e      	add	r2, sp, #56	; 0x38
 8005546:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800554a:	aa0d      	add	r2, sp, #52	; 0x34
 800554c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005550:	9203      	str	r2, [sp, #12]
 8005552:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005556:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800555a:	6023      	str	r3, [r4, #0]
 800555c:	6863      	ldr	r3, [r4, #4]
 800555e:	4652      	mov	r2, sl
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	4628      	mov	r0, r5
 8005564:	4643      	mov	r3, r8
 8005566:	910b      	str	r1, [sp, #44]	; 0x2c
 8005568:	f7ff fed6 	bl	8005318 <__cvt>
 800556c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800556e:	4680      	mov	r8, r0
 8005570:	2947      	cmp	r1, #71	; 0x47
 8005572:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005574:	d108      	bne.n	8005588 <_printf_float+0x138>
 8005576:	1cc8      	adds	r0, r1, #3
 8005578:	db02      	blt.n	8005580 <_printf_float+0x130>
 800557a:	6863      	ldr	r3, [r4, #4]
 800557c:	4299      	cmp	r1, r3
 800557e:	dd40      	ble.n	8005602 <_printf_float+0x1b2>
 8005580:	f1a9 0902 	sub.w	r9, r9, #2
 8005584:	fa5f f989 	uxtb.w	r9, r9
 8005588:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800558c:	d81f      	bhi.n	80055ce <_printf_float+0x17e>
 800558e:	464a      	mov	r2, r9
 8005590:	3901      	subs	r1, #1
 8005592:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005596:	910d      	str	r1, [sp, #52]	; 0x34
 8005598:	f7ff ff1d 	bl	80053d6 <__exponent>
 800559c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800559e:	4682      	mov	sl, r0
 80055a0:	1813      	adds	r3, r2, r0
 80055a2:	2a01      	cmp	r2, #1
 80055a4:	6123      	str	r3, [r4, #16]
 80055a6:	dc02      	bgt.n	80055ae <_printf_float+0x15e>
 80055a8:	6822      	ldr	r2, [r4, #0]
 80055aa:	07d2      	lsls	r2, r2, #31
 80055ac:	d501      	bpl.n	80055b2 <_printf_float+0x162>
 80055ae:	3301      	adds	r3, #1
 80055b0:	6123      	str	r3, [r4, #16]
 80055b2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d09b      	beq.n	80054f2 <_printf_float+0xa2>
 80055ba:	232d      	movs	r3, #45	; 0x2d
 80055bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055c0:	e797      	b.n	80054f2 <_printf_float+0xa2>
 80055c2:	2947      	cmp	r1, #71	; 0x47
 80055c4:	d1bc      	bne.n	8005540 <_printf_float+0xf0>
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1ba      	bne.n	8005540 <_printf_float+0xf0>
 80055ca:	2301      	movs	r3, #1
 80055cc:	e7b7      	b.n	800553e <_printf_float+0xee>
 80055ce:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80055d2:	d118      	bne.n	8005606 <_printf_float+0x1b6>
 80055d4:	2900      	cmp	r1, #0
 80055d6:	6863      	ldr	r3, [r4, #4]
 80055d8:	dd0b      	ble.n	80055f2 <_printf_float+0x1a2>
 80055da:	6121      	str	r1, [r4, #16]
 80055dc:	b913      	cbnz	r3, 80055e4 <_printf_float+0x194>
 80055de:	6822      	ldr	r2, [r4, #0]
 80055e0:	07d0      	lsls	r0, r2, #31
 80055e2:	d502      	bpl.n	80055ea <_printf_float+0x19a>
 80055e4:	3301      	adds	r3, #1
 80055e6:	440b      	add	r3, r1
 80055e8:	6123      	str	r3, [r4, #16]
 80055ea:	f04f 0a00 	mov.w	sl, #0
 80055ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80055f0:	e7df      	b.n	80055b2 <_printf_float+0x162>
 80055f2:	b913      	cbnz	r3, 80055fa <_printf_float+0x1aa>
 80055f4:	6822      	ldr	r2, [r4, #0]
 80055f6:	07d2      	lsls	r2, r2, #31
 80055f8:	d501      	bpl.n	80055fe <_printf_float+0x1ae>
 80055fa:	3302      	adds	r3, #2
 80055fc:	e7f4      	b.n	80055e8 <_printf_float+0x198>
 80055fe:	2301      	movs	r3, #1
 8005600:	e7f2      	b.n	80055e8 <_printf_float+0x198>
 8005602:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005606:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005608:	4299      	cmp	r1, r3
 800560a:	db05      	blt.n	8005618 <_printf_float+0x1c8>
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	6121      	str	r1, [r4, #16]
 8005610:	07d8      	lsls	r0, r3, #31
 8005612:	d5ea      	bpl.n	80055ea <_printf_float+0x19a>
 8005614:	1c4b      	adds	r3, r1, #1
 8005616:	e7e7      	b.n	80055e8 <_printf_float+0x198>
 8005618:	2900      	cmp	r1, #0
 800561a:	bfcc      	ite	gt
 800561c:	2201      	movgt	r2, #1
 800561e:	f1c1 0202 	rsble	r2, r1, #2
 8005622:	4413      	add	r3, r2
 8005624:	e7e0      	b.n	80055e8 <_printf_float+0x198>
 8005626:	6823      	ldr	r3, [r4, #0]
 8005628:	055a      	lsls	r2, r3, #21
 800562a:	d407      	bmi.n	800563c <_printf_float+0x1ec>
 800562c:	6923      	ldr	r3, [r4, #16]
 800562e:	4642      	mov	r2, r8
 8005630:	4631      	mov	r1, r6
 8005632:	4628      	mov	r0, r5
 8005634:	47b8      	blx	r7
 8005636:	3001      	adds	r0, #1
 8005638:	d12b      	bne.n	8005692 <_printf_float+0x242>
 800563a:	e764      	b.n	8005506 <_printf_float+0xb6>
 800563c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005640:	f240 80dd 	bls.w	80057fe <_printf_float+0x3ae>
 8005644:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005648:	2200      	movs	r2, #0
 800564a:	2300      	movs	r3, #0
 800564c:	f7fb f9ac 	bl	80009a8 <__aeabi_dcmpeq>
 8005650:	2800      	cmp	r0, #0
 8005652:	d033      	beq.n	80056bc <_printf_float+0x26c>
 8005654:	2301      	movs	r3, #1
 8005656:	4631      	mov	r1, r6
 8005658:	4628      	mov	r0, r5
 800565a:	4a35      	ldr	r2, [pc, #212]	; (8005730 <_printf_float+0x2e0>)
 800565c:	47b8      	blx	r7
 800565e:	3001      	adds	r0, #1
 8005660:	f43f af51 	beq.w	8005506 <_printf_float+0xb6>
 8005664:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005668:	429a      	cmp	r2, r3
 800566a:	db02      	blt.n	8005672 <_printf_float+0x222>
 800566c:	6823      	ldr	r3, [r4, #0]
 800566e:	07d8      	lsls	r0, r3, #31
 8005670:	d50f      	bpl.n	8005692 <_printf_float+0x242>
 8005672:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005676:	4631      	mov	r1, r6
 8005678:	4628      	mov	r0, r5
 800567a:	47b8      	blx	r7
 800567c:	3001      	adds	r0, #1
 800567e:	f43f af42 	beq.w	8005506 <_printf_float+0xb6>
 8005682:	f04f 0800 	mov.w	r8, #0
 8005686:	f104 091a 	add.w	r9, r4, #26
 800568a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800568c:	3b01      	subs	r3, #1
 800568e:	4543      	cmp	r3, r8
 8005690:	dc09      	bgt.n	80056a6 <_printf_float+0x256>
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	079b      	lsls	r3, r3, #30
 8005696:	f100 8104 	bmi.w	80058a2 <_printf_float+0x452>
 800569a:	68e0      	ldr	r0, [r4, #12]
 800569c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800569e:	4298      	cmp	r0, r3
 80056a0:	bfb8      	it	lt
 80056a2:	4618      	movlt	r0, r3
 80056a4:	e731      	b.n	800550a <_printf_float+0xba>
 80056a6:	2301      	movs	r3, #1
 80056a8:	464a      	mov	r2, r9
 80056aa:	4631      	mov	r1, r6
 80056ac:	4628      	mov	r0, r5
 80056ae:	47b8      	blx	r7
 80056b0:	3001      	adds	r0, #1
 80056b2:	f43f af28 	beq.w	8005506 <_printf_float+0xb6>
 80056b6:	f108 0801 	add.w	r8, r8, #1
 80056ba:	e7e6      	b.n	800568a <_printf_float+0x23a>
 80056bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056be:	2b00      	cmp	r3, #0
 80056c0:	dc38      	bgt.n	8005734 <_printf_float+0x2e4>
 80056c2:	2301      	movs	r3, #1
 80056c4:	4631      	mov	r1, r6
 80056c6:	4628      	mov	r0, r5
 80056c8:	4a19      	ldr	r2, [pc, #100]	; (8005730 <_printf_float+0x2e0>)
 80056ca:	47b8      	blx	r7
 80056cc:	3001      	adds	r0, #1
 80056ce:	f43f af1a 	beq.w	8005506 <_printf_float+0xb6>
 80056d2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80056d6:	4313      	orrs	r3, r2
 80056d8:	d102      	bne.n	80056e0 <_printf_float+0x290>
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	07d9      	lsls	r1, r3, #31
 80056de:	d5d8      	bpl.n	8005692 <_printf_float+0x242>
 80056e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056e4:	4631      	mov	r1, r6
 80056e6:	4628      	mov	r0, r5
 80056e8:	47b8      	blx	r7
 80056ea:	3001      	adds	r0, #1
 80056ec:	f43f af0b 	beq.w	8005506 <_printf_float+0xb6>
 80056f0:	f04f 0900 	mov.w	r9, #0
 80056f4:	f104 0a1a 	add.w	sl, r4, #26
 80056f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056fa:	425b      	negs	r3, r3
 80056fc:	454b      	cmp	r3, r9
 80056fe:	dc01      	bgt.n	8005704 <_printf_float+0x2b4>
 8005700:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005702:	e794      	b.n	800562e <_printf_float+0x1de>
 8005704:	2301      	movs	r3, #1
 8005706:	4652      	mov	r2, sl
 8005708:	4631      	mov	r1, r6
 800570a:	4628      	mov	r0, r5
 800570c:	47b8      	blx	r7
 800570e:	3001      	adds	r0, #1
 8005710:	f43f aef9 	beq.w	8005506 <_printf_float+0xb6>
 8005714:	f109 0901 	add.w	r9, r9, #1
 8005718:	e7ee      	b.n	80056f8 <_printf_float+0x2a8>
 800571a:	bf00      	nop
 800571c:	7fefffff 	.word	0x7fefffff
 8005720:	08008900 	.word	0x08008900
 8005724:	08008904 	.word	0x08008904
 8005728:	08008908 	.word	0x08008908
 800572c:	0800890c 	.word	0x0800890c
 8005730:	08008910 	.word	0x08008910
 8005734:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005736:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005738:	429a      	cmp	r2, r3
 800573a:	bfa8      	it	ge
 800573c:	461a      	movge	r2, r3
 800573e:	2a00      	cmp	r2, #0
 8005740:	4691      	mov	r9, r2
 8005742:	dc37      	bgt.n	80057b4 <_printf_float+0x364>
 8005744:	f04f 0b00 	mov.w	fp, #0
 8005748:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800574c:	f104 021a 	add.w	r2, r4, #26
 8005750:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005754:	ebaa 0309 	sub.w	r3, sl, r9
 8005758:	455b      	cmp	r3, fp
 800575a:	dc33      	bgt.n	80057c4 <_printf_float+0x374>
 800575c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005760:	429a      	cmp	r2, r3
 8005762:	db3b      	blt.n	80057dc <_printf_float+0x38c>
 8005764:	6823      	ldr	r3, [r4, #0]
 8005766:	07da      	lsls	r2, r3, #31
 8005768:	d438      	bmi.n	80057dc <_printf_float+0x38c>
 800576a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800576e:	eba2 0903 	sub.w	r9, r2, r3
 8005772:	eba2 020a 	sub.w	r2, r2, sl
 8005776:	4591      	cmp	r9, r2
 8005778:	bfa8      	it	ge
 800577a:	4691      	movge	r9, r2
 800577c:	f1b9 0f00 	cmp.w	r9, #0
 8005780:	dc34      	bgt.n	80057ec <_printf_float+0x39c>
 8005782:	f04f 0800 	mov.w	r8, #0
 8005786:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800578a:	f104 0a1a 	add.w	sl, r4, #26
 800578e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005792:	1a9b      	subs	r3, r3, r2
 8005794:	eba3 0309 	sub.w	r3, r3, r9
 8005798:	4543      	cmp	r3, r8
 800579a:	f77f af7a 	ble.w	8005692 <_printf_float+0x242>
 800579e:	2301      	movs	r3, #1
 80057a0:	4652      	mov	r2, sl
 80057a2:	4631      	mov	r1, r6
 80057a4:	4628      	mov	r0, r5
 80057a6:	47b8      	blx	r7
 80057a8:	3001      	adds	r0, #1
 80057aa:	f43f aeac 	beq.w	8005506 <_printf_float+0xb6>
 80057ae:	f108 0801 	add.w	r8, r8, #1
 80057b2:	e7ec      	b.n	800578e <_printf_float+0x33e>
 80057b4:	4613      	mov	r3, r2
 80057b6:	4631      	mov	r1, r6
 80057b8:	4642      	mov	r2, r8
 80057ba:	4628      	mov	r0, r5
 80057bc:	47b8      	blx	r7
 80057be:	3001      	adds	r0, #1
 80057c0:	d1c0      	bne.n	8005744 <_printf_float+0x2f4>
 80057c2:	e6a0      	b.n	8005506 <_printf_float+0xb6>
 80057c4:	2301      	movs	r3, #1
 80057c6:	4631      	mov	r1, r6
 80057c8:	4628      	mov	r0, r5
 80057ca:	920b      	str	r2, [sp, #44]	; 0x2c
 80057cc:	47b8      	blx	r7
 80057ce:	3001      	adds	r0, #1
 80057d0:	f43f ae99 	beq.w	8005506 <_printf_float+0xb6>
 80057d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80057d6:	f10b 0b01 	add.w	fp, fp, #1
 80057da:	e7b9      	b.n	8005750 <_printf_float+0x300>
 80057dc:	4631      	mov	r1, r6
 80057de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057e2:	4628      	mov	r0, r5
 80057e4:	47b8      	blx	r7
 80057e6:	3001      	adds	r0, #1
 80057e8:	d1bf      	bne.n	800576a <_printf_float+0x31a>
 80057ea:	e68c      	b.n	8005506 <_printf_float+0xb6>
 80057ec:	464b      	mov	r3, r9
 80057ee:	4631      	mov	r1, r6
 80057f0:	4628      	mov	r0, r5
 80057f2:	eb08 020a 	add.w	r2, r8, sl
 80057f6:	47b8      	blx	r7
 80057f8:	3001      	adds	r0, #1
 80057fa:	d1c2      	bne.n	8005782 <_printf_float+0x332>
 80057fc:	e683      	b.n	8005506 <_printf_float+0xb6>
 80057fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005800:	2a01      	cmp	r2, #1
 8005802:	dc01      	bgt.n	8005808 <_printf_float+0x3b8>
 8005804:	07db      	lsls	r3, r3, #31
 8005806:	d539      	bpl.n	800587c <_printf_float+0x42c>
 8005808:	2301      	movs	r3, #1
 800580a:	4642      	mov	r2, r8
 800580c:	4631      	mov	r1, r6
 800580e:	4628      	mov	r0, r5
 8005810:	47b8      	blx	r7
 8005812:	3001      	adds	r0, #1
 8005814:	f43f ae77 	beq.w	8005506 <_printf_float+0xb6>
 8005818:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800581c:	4631      	mov	r1, r6
 800581e:	4628      	mov	r0, r5
 8005820:	47b8      	blx	r7
 8005822:	3001      	adds	r0, #1
 8005824:	f43f ae6f 	beq.w	8005506 <_printf_float+0xb6>
 8005828:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800582c:	2200      	movs	r2, #0
 800582e:	2300      	movs	r3, #0
 8005830:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005834:	f7fb f8b8 	bl	80009a8 <__aeabi_dcmpeq>
 8005838:	b9d8      	cbnz	r0, 8005872 <_printf_float+0x422>
 800583a:	f109 33ff 	add.w	r3, r9, #4294967295
 800583e:	f108 0201 	add.w	r2, r8, #1
 8005842:	4631      	mov	r1, r6
 8005844:	4628      	mov	r0, r5
 8005846:	47b8      	blx	r7
 8005848:	3001      	adds	r0, #1
 800584a:	d10e      	bne.n	800586a <_printf_float+0x41a>
 800584c:	e65b      	b.n	8005506 <_printf_float+0xb6>
 800584e:	2301      	movs	r3, #1
 8005850:	464a      	mov	r2, r9
 8005852:	4631      	mov	r1, r6
 8005854:	4628      	mov	r0, r5
 8005856:	47b8      	blx	r7
 8005858:	3001      	adds	r0, #1
 800585a:	f43f ae54 	beq.w	8005506 <_printf_float+0xb6>
 800585e:	f108 0801 	add.w	r8, r8, #1
 8005862:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005864:	3b01      	subs	r3, #1
 8005866:	4543      	cmp	r3, r8
 8005868:	dcf1      	bgt.n	800584e <_printf_float+0x3fe>
 800586a:	4653      	mov	r3, sl
 800586c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005870:	e6de      	b.n	8005630 <_printf_float+0x1e0>
 8005872:	f04f 0800 	mov.w	r8, #0
 8005876:	f104 091a 	add.w	r9, r4, #26
 800587a:	e7f2      	b.n	8005862 <_printf_float+0x412>
 800587c:	2301      	movs	r3, #1
 800587e:	4642      	mov	r2, r8
 8005880:	e7df      	b.n	8005842 <_printf_float+0x3f2>
 8005882:	2301      	movs	r3, #1
 8005884:	464a      	mov	r2, r9
 8005886:	4631      	mov	r1, r6
 8005888:	4628      	mov	r0, r5
 800588a:	47b8      	blx	r7
 800588c:	3001      	adds	r0, #1
 800588e:	f43f ae3a 	beq.w	8005506 <_printf_float+0xb6>
 8005892:	f108 0801 	add.w	r8, r8, #1
 8005896:	68e3      	ldr	r3, [r4, #12]
 8005898:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800589a:	1a5b      	subs	r3, r3, r1
 800589c:	4543      	cmp	r3, r8
 800589e:	dcf0      	bgt.n	8005882 <_printf_float+0x432>
 80058a0:	e6fb      	b.n	800569a <_printf_float+0x24a>
 80058a2:	f04f 0800 	mov.w	r8, #0
 80058a6:	f104 0919 	add.w	r9, r4, #25
 80058aa:	e7f4      	b.n	8005896 <_printf_float+0x446>

080058ac <_printf_common>:
 80058ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058b0:	4616      	mov	r6, r2
 80058b2:	4699      	mov	r9, r3
 80058b4:	688a      	ldr	r2, [r1, #8]
 80058b6:	690b      	ldr	r3, [r1, #16]
 80058b8:	4607      	mov	r7, r0
 80058ba:	4293      	cmp	r3, r2
 80058bc:	bfb8      	it	lt
 80058be:	4613      	movlt	r3, r2
 80058c0:	6033      	str	r3, [r6, #0]
 80058c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058c6:	460c      	mov	r4, r1
 80058c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058cc:	b10a      	cbz	r2, 80058d2 <_printf_common+0x26>
 80058ce:	3301      	adds	r3, #1
 80058d0:	6033      	str	r3, [r6, #0]
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	0699      	lsls	r1, r3, #26
 80058d6:	bf42      	ittt	mi
 80058d8:	6833      	ldrmi	r3, [r6, #0]
 80058da:	3302      	addmi	r3, #2
 80058dc:	6033      	strmi	r3, [r6, #0]
 80058de:	6825      	ldr	r5, [r4, #0]
 80058e0:	f015 0506 	ands.w	r5, r5, #6
 80058e4:	d106      	bne.n	80058f4 <_printf_common+0x48>
 80058e6:	f104 0a19 	add.w	sl, r4, #25
 80058ea:	68e3      	ldr	r3, [r4, #12]
 80058ec:	6832      	ldr	r2, [r6, #0]
 80058ee:	1a9b      	subs	r3, r3, r2
 80058f0:	42ab      	cmp	r3, r5
 80058f2:	dc2b      	bgt.n	800594c <_printf_common+0xa0>
 80058f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058f8:	1e13      	subs	r3, r2, #0
 80058fa:	6822      	ldr	r2, [r4, #0]
 80058fc:	bf18      	it	ne
 80058fe:	2301      	movne	r3, #1
 8005900:	0692      	lsls	r2, r2, #26
 8005902:	d430      	bmi.n	8005966 <_printf_common+0xba>
 8005904:	4649      	mov	r1, r9
 8005906:	4638      	mov	r0, r7
 8005908:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800590c:	47c0      	blx	r8
 800590e:	3001      	adds	r0, #1
 8005910:	d023      	beq.n	800595a <_printf_common+0xae>
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	6922      	ldr	r2, [r4, #16]
 8005916:	f003 0306 	and.w	r3, r3, #6
 800591a:	2b04      	cmp	r3, #4
 800591c:	bf14      	ite	ne
 800591e:	2500      	movne	r5, #0
 8005920:	6833      	ldreq	r3, [r6, #0]
 8005922:	f04f 0600 	mov.w	r6, #0
 8005926:	bf08      	it	eq
 8005928:	68e5      	ldreq	r5, [r4, #12]
 800592a:	f104 041a 	add.w	r4, r4, #26
 800592e:	bf08      	it	eq
 8005930:	1aed      	subeq	r5, r5, r3
 8005932:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005936:	bf08      	it	eq
 8005938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800593c:	4293      	cmp	r3, r2
 800593e:	bfc4      	itt	gt
 8005940:	1a9b      	subgt	r3, r3, r2
 8005942:	18ed      	addgt	r5, r5, r3
 8005944:	42b5      	cmp	r5, r6
 8005946:	d11a      	bne.n	800597e <_printf_common+0xd2>
 8005948:	2000      	movs	r0, #0
 800594a:	e008      	b.n	800595e <_printf_common+0xb2>
 800594c:	2301      	movs	r3, #1
 800594e:	4652      	mov	r2, sl
 8005950:	4649      	mov	r1, r9
 8005952:	4638      	mov	r0, r7
 8005954:	47c0      	blx	r8
 8005956:	3001      	adds	r0, #1
 8005958:	d103      	bne.n	8005962 <_printf_common+0xb6>
 800595a:	f04f 30ff 	mov.w	r0, #4294967295
 800595e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005962:	3501      	adds	r5, #1
 8005964:	e7c1      	b.n	80058ea <_printf_common+0x3e>
 8005966:	2030      	movs	r0, #48	; 0x30
 8005968:	18e1      	adds	r1, r4, r3
 800596a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005974:	4422      	add	r2, r4
 8005976:	3302      	adds	r3, #2
 8005978:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800597c:	e7c2      	b.n	8005904 <_printf_common+0x58>
 800597e:	2301      	movs	r3, #1
 8005980:	4622      	mov	r2, r4
 8005982:	4649      	mov	r1, r9
 8005984:	4638      	mov	r0, r7
 8005986:	47c0      	blx	r8
 8005988:	3001      	adds	r0, #1
 800598a:	d0e6      	beq.n	800595a <_printf_common+0xae>
 800598c:	3601      	adds	r6, #1
 800598e:	e7d9      	b.n	8005944 <_printf_common+0x98>

08005990 <_printf_i>:
 8005990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005994:	7e0f      	ldrb	r7, [r1, #24]
 8005996:	4691      	mov	r9, r2
 8005998:	2f78      	cmp	r7, #120	; 0x78
 800599a:	4680      	mov	r8, r0
 800599c:	460c      	mov	r4, r1
 800599e:	469a      	mov	sl, r3
 80059a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059a6:	d807      	bhi.n	80059b8 <_printf_i+0x28>
 80059a8:	2f62      	cmp	r7, #98	; 0x62
 80059aa:	d80a      	bhi.n	80059c2 <_printf_i+0x32>
 80059ac:	2f00      	cmp	r7, #0
 80059ae:	f000 80d5 	beq.w	8005b5c <_printf_i+0x1cc>
 80059b2:	2f58      	cmp	r7, #88	; 0x58
 80059b4:	f000 80c1 	beq.w	8005b3a <_printf_i+0x1aa>
 80059b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059c0:	e03a      	b.n	8005a38 <_printf_i+0xa8>
 80059c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059c6:	2b15      	cmp	r3, #21
 80059c8:	d8f6      	bhi.n	80059b8 <_printf_i+0x28>
 80059ca:	a101      	add	r1, pc, #4	; (adr r1, 80059d0 <_printf_i+0x40>)
 80059cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059d0:	08005a29 	.word	0x08005a29
 80059d4:	08005a3d 	.word	0x08005a3d
 80059d8:	080059b9 	.word	0x080059b9
 80059dc:	080059b9 	.word	0x080059b9
 80059e0:	080059b9 	.word	0x080059b9
 80059e4:	080059b9 	.word	0x080059b9
 80059e8:	08005a3d 	.word	0x08005a3d
 80059ec:	080059b9 	.word	0x080059b9
 80059f0:	080059b9 	.word	0x080059b9
 80059f4:	080059b9 	.word	0x080059b9
 80059f8:	080059b9 	.word	0x080059b9
 80059fc:	08005b43 	.word	0x08005b43
 8005a00:	08005a69 	.word	0x08005a69
 8005a04:	08005afd 	.word	0x08005afd
 8005a08:	080059b9 	.word	0x080059b9
 8005a0c:	080059b9 	.word	0x080059b9
 8005a10:	08005b65 	.word	0x08005b65
 8005a14:	080059b9 	.word	0x080059b9
 8005a18:	08005a69 	.word	0x08005a69
 8005a1c:	080059b9 	.word	0x080059b9
 8005a20:	080059b9 	.word	0x080059b9
 8005a24:	08005b05 	.word	0x08005b05
 8005a28:	682b      	ldr	r3, [r5, #0]
 8005a2a:	1d1a      	adds	r2, r3, #4
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	602a      	str	r2, [r5, #0]
 8005a30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e0a0      	b.n	8005b7e <_printf_i+0x1ee>
 8005a3c:	6820      	ldr	r0, [r4, #0]
 8005a3e:	682b      	ldr	r3, [r5, #0]
 8005a40:	0607      	lsls	r7, r0, #24
 8005a42:	f103 0104 	add.w	r1, r3, #4
 8005a46:	6029      	str	r1, [r5, #0]
 8005a48:	d501      	bpl.n	8005a4e <_printf_i+0xbe>
 8005a4a:	681e      	ldr	r6, [r3, #0]
 8005a4c:	e003      	b.n	8005a56 <_printf_i+0xc6>
 8005a4e:	0646      	lsls	r6, r0, #25
 8005a50:	d5fb      	bpl.n	8005a4a <_printf_i+0xba>
 8005a52:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005a56:	2e00      	cmp	r6, #0
 8005a58:	da03      	bge.n	8005a62 <_printf_i+0xd2>
 8005a5a:	232d      	movs	r3, #45	; 0x2d
 8005a5c:	4276      	negs	r6, r6
 8005a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a62:	230a      	movs	r3, #10
 8005a64:	4859      	ldr	r0, [pc, #356]	; (8005bcc <_printf_i+0x23c>)
 8005a66:	e012      	b.n	8005a8e <_printf_i+0xfe>
 8005a68:	682b      	ldr	r3, [r5, #0]
 8005a6a:	6820      	ldr	r0, [r4, #0]
 8005a6c:	1d19      	adds	r1, r3, #4
 8005a6e:	6029      	str	r1, [r5, #0]
 8005a70:	0605      	lsls	r5, r0, #24
 8005a72:	d501      	bpl.n	8005a78 <_printf_i+0xe8>
 8005a74:	681e      	ldr	r6, [r3, #0]
 8005a76:	e002      	b.n	8005a7e <_printf_i+0xee>
 8005a78:	0641      	lsls	r1, r0, #25
 8005a7a:	d5fb      	bpl.n	8005a74 <_printf_i+0xe4>
 8005a7c:	881e      	ldrh	r6, [r3, #0]
 8005a7e:	2f6f      	cmp	r7, #111	; 0x6f
 8005a80:	bf0c      	ite	eq
 8005a82:	2308      	moveq	r3, #8
 8005a84:	230a      	movne	r3, #10
 8005a86:	4851      	ldr	r0, [pc, #324]	; (8005bcc <_printf_i+0x23c>)
 8005a88:	2100      	movs	r1, #0
 8005a8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a8e:	6865      	ldr	r5, [r4, #4]
 8005a90:	2d00      	cmp	r5, #0
 8005a92:	bfa8      	it	ge
 8005a94:	6821      	ldrge	r1, [r4, #0]
 8005a96:	60a5      	str	r5, [r4, #8]
 8005a98:	bfa4      	itt	ge
 8005a9a:	f021 0104 	bicge.w	r1, r1, #4
 8005a9e:	6021      	strge	r1, [r4, #0]
 8005aa0:	b90e      	cbnz	r6, 8005aa6 <_printf_i+0x116>
 8005aa2:	2d00      	cmp	r5, #0
 8005aa4:	d04b      	beq.n	8005b3e <_printf_i+0x1ae>
 8005aa6:	4615      	mov	r5, r2
 8005aa8:	fbb6 f1f3 	udiv	r1, r6, r3
 8005aac:	fb03 6711 	mls	r7, r3, r1, r6
 8005ab0:	5dc7      	ldrb	r7, [r0, r7]
 8005ab2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ab6:	4637      	mov	r7, r6
 8005ab8:	42bb      	cmp	r3, r7
 8005aba:	460e      	mov	r6, r1
 8005abc:	d9f4      	bls.n	8005aa8 <_printf_i+0x118>
 8005abe:	2b08      	cmp	r3, #8
 8005ac0:	d10b      	bne.n	8005ada <_printf_i+0x14a>
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	07de      	lsls	r6, r3, #31
 8005ac6:	d508      	bpl.n	8005ada <_printf_i+0x14a>
 8005ac8:	6923      	ldr	r3, [r4, #16]
 8005aca:	6861      	ldr	r1, [r4, #4]
 8005acc:	4299      	cmp	r1, r3
 8005ace:	bfde      	ittt	le
 8005ad0:	2330      	movle	r3, #48	; 0x30
 8005ad2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ad6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ada:	1b52      	subs	r2, r2, r5
 8005adc:	6122      	str	r2, [r4, #16]
 8005ade:	464b      	mov	r3, r9
 8005ae0:	4621      	mov	r1, r4
 8005ae2:	4640      	mov	r0, r8
 8005ae4:	f8cd a000 	str.w	sl, [sp]
 8005ae8:	aa03      	add	r2, sp, #12
 8005aea:	f7ff fedf 	bl	80058ac <_printf_common>
 8005aee:	3001      	adds	r0, #1
 8005af0:	d14a      	bne.n	8005b88 <_printf_i+0x1f8>
 8005af2:	f04f 30ff 	mov.w	r0, #4294967295
 8005af6:	b004      	add	sp, #16
 8005af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005afc:	6823      	ldr	r3, [r4, #0]
 8005afe:	f043 0320 	orr.w	r3, r3, #32
 8005b02:	6023      	str	r3, [r4, #0]
 8005b04:	2778      	movs	r7, #120	; 0x78
 8005b06:	4832      	ldr	r0, [pc, #200]	; (8005bd0 <_printf_i+0x240>)
 8005b08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	6829      	ldr	r1, [r5, #0]
 8005b10:	061f      	lsls	r7, r3, #24
 8005b12:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b16:	d402      	bmi.n	8005b1e <_printf_i+0x18e>
 8005b18:	065f      	lsls	r7, r3, #25
 8005b1a:	bf48      	it	mi
 8005b1c:	b2b6      	uxthmi	r6, r6
 8005b1e:	07df      	lsls	r7, r3, #31
 8005b20:	bf48      	it	mi
 8005b22:	f043 0320 	orrmi.w	r3, r3, #32
 8005b26:	6029      	str	r1, [r5, #0]
 8005b28:	bf48      	it	mi
 8005b2a:	6023      	strmi	r3, [r4, #0]
 8005b2c:	b91e      	cbnz	r6, 8005b36 <_printf_i+0x1a6>
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	f023 0320 	bic.w	r3, r3, #32
 8005b34:	6023      	str	r3, [r4, #0]
 8005b36:	2310      	movs	r3, #16
 8005b38:	e7a6      	b.n	8005a88 <_printf_i+0xf8>
 8005b3a:	4824      	ldr	r0, [pc, #144]	; (8005bcc <_printf_i+0x23c>)
 8005b3c:	e7e4      	b.n	8005b08 <_printf_i+0x178>
 8005b3e:	4615      	mov	r5, r2
 8005b40:	e7bd      	b.n	8005abe <_printf_i+0x12e>
 8005b42:	682b      	ldr	r3, [r5, #0]
 8005b44:	6826      	ldr	r6, [r4, #0]
 8005b46:	1d18      	adds	r0, r3, #4
 8005b48:	6961      	ldr	r1, [r4, #20]
 8005b4a:	6028      	str	r0, [r5, #0]
 8005b4c:	0635      	lsls	r5, r6, #24
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	d501      	bpl.n	8005b56 <_printf_i+0x1c6>
 8005b52:	6019      	str	r1, [r3, #0]
 8005b54:	e002      	b.n	8005b5c <_printf_i+0x1cc>
 8005b56:	0670      	lsls	r0, r6, #25
 8005b58:	d5fb      	bpl.n	8005b52 <_printf_i+0x1c2>
 8005b5a:	8019      	strh	r1, [r3, #0]
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	4615      	mov	r5, r2
 8005b60:	6123      	str	r3, [r4, #16]
 8005b62:	e7bc      	b.n	8005ade <_printf_i+0x14e>
 8005b64:	682b      	ldr	r3, [r5, #0]
 8005b66:	2100      	movs	r1, #0
 8005b68:	1d1a      	adds	r2, r3, #4
 8005b6a:	602a      	str	r2, [r5, #0]
 8005b6c:	681d      	ldr	r5, [r3, #0]
 8005b6e:	6862      	ldr	r2, [r4, #4]
 8005b70:	4628      	mov	r0, r5
 8005b72:	f000 fada 	bl	800612a <memchr>
 8005b76:	b108      	cbz	r0, 8005b7c <_printf_i+0x1ec>
 8005b78:	1b40      	subs	r0, r0, r5
 8005b7a:	6060      	str	r0, [r4, #4]
 8005b7c:	6863      	ldr	r3, [r4, #4]
 8005b7e:	6123      	str	r3, [r4, #16]
 8005b80:	2300      	movs	r3, #0
 8005b82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b86:	e7aa      	b.n	8005ade <_printf_i+0x14e>
 8005b88:	462a      	mov	r2, r5
 8005b8a:	4649      	mov	r1, r9
 8005b8c:	4640      	mov	r0, r8
 8005b8e:	6923      	ldr	r3, [r4, #16]
 8005b90:	47d0      	blx	sl
 8005b92:	3001      	adds	r0, #1
 8005b94:	d0ad      	beq.n	8005af2 <_printf_i+0x162>
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	079b      	lsls	r3, r3, #30
 8005b9a:	d413      	bmi.n	8005bc4 <_printf_i+0x234>
 8005b9c:	68e0      	ldr	r0, [r4, #12]
 8005b9e:	9b03      	ldr	r3, [sp, #12]
 8005ba0:	4298      	cmp	r0, r3
 8005ba2:	bfb8      	it	lt
 8005ba4:	4618      	movlt	r0, r3
 8005ba6:	e7a6      	b.n	8005af6 <_printf_i+0x166>
 8005ba8:	2301      	movs	r3, #1
 8005baa:	4632      	mov	r2, r6
 8005bac:	4649      	mov	r1, r9
 8005bae:	4640      	mov	r0, r8
 8005bb0:	47d0      	blx	sl
 8005bb2:	3001      	adds	r0, #1
 8005bb4:	d09d      	beq.n	8005af2 <_printf_i+0x162>
 8005bb6:	3501      	adds	r5, #1
 8005bb8:	68e3      	ldr	r3, [r4, #12]
 8005bba:	9903      	ldr	r1, [sp, #12]
 8005bbc:	1a5b      	subs	r3, r3, r1
 8005bbe:	42ab      	cmp	r3, r5
 8005bc0:	dcf2      	bgt.n	8005ba8 <_printf_i+0x218>
 8005bc2:	e7eb      	b.n	8005b9c <_printf_i+0x20c>
 8005bc4:	2500      	movs	r5, #0
 8005bc6:	f104 0619 	add.w	r6, r4, #25
 8005bca:	e7f5      	b.n	8005bb8 <_printf_i+0x228>
 8005bcc:	08008912 	.word	0x08008912
 8005bd0:	08008923 	.word	0x08008923

08005bd4 <std>:
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	b510      	push	{r4, lr}
 8005bd8:	4604      	mov	r4, r0
 8005bda:	e9c0 3300 	strd	r3, r3, [r0]
 8005bde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005be2:	6083      	str	r3, [r0, #8]
 8005be4:	8181      	strh	r1, [r0, #12]
 8005be6:	6643      	str	r3, [r0, #100]	; 0x64
 8005be8:	81c2      	strh	r2, [r0, #14]
 8005bea:	6183      	str	r3, [r0, #24]
 8005bec:	4619      	mov	r1, r3
 8005bee:	2208      	movs	r2, #8
 8005bf0:	305c      	adds	r0, #92	; 0x5c
 8005bf2:	f000 fa09 	bl	8006008 <memset>
 8005bf6:	4b0d      	ldr	r3, [pc, #52]	; (8005c2c <std+0x58>)
 8005bf8:	6224      	str	r4, [r4, #32]
 8005bfa:	6263      	str	r3, [r4, #36]	; 0x24
 8005bfc:	4b0c      	ldr	r3, [pc, #48]	; (8005c30 <std+0x5c>)
 8005bfe:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c00:	4b0c      	ldr	r3, [pc, #48]	; (8005c34 <std+0x60>)
 8005c02:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c04:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <std+0x64>)
 8005c06:	6323      	str	r3, [r4, #48]	; 0x30
 8005c08:	4b0c      	ldr	r3, [pc, #48]	; (8005c3c <std+0x68>)
 8005c0a:	429c      	cmp	r4, r3
 8005c0c:	d006      	beq.n	8005c1c <std+0x48>
 8005c0e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005c12:	4294      	cmp	r4, r2
 8005c14:	d002      	beq.n	8005c1c <std+0x48>
 8005c16:	33d0      	adds	r3, #208	; 0xd0
 8005c18:	429c      	cmp	r4, r3
 8005c1a:	d105      	bne.n	8005c28 <std+0x54>
 8005c1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c24:	f000 ba7e 	b.w	8006124 <__retarget_lock_init_recursive>
 8005c28:	bd10      	pop	{r4, pc}
 8005c2a:	bf00      	nop
 8005c2c:	08005e59 	.word	0x08005e59
 8005c30:	08005e7b 	.word	0x08005e7b
 8005c34:	08005eb3 	.word	0x08005eb3
 8005c38:	08005ed7 	.word	0x08005ed7
 8005c3c:	20000a90 	.word	0x20000a90

08005c40 <stdio_exit_handler>:
 8005c40:	4a02      	ldr	r2, [pc, #8]	; (8005c4c <stdio_exit_handler+0xc>)
 8005c42:	4903      	ldr	r1, [pc, #12]	; (8005c50 <stdio_exit_handler+0x10>)
 8005c44:	4803      	ldr	r0, [pc, #12]	; (8005c54 <stdio_exit_handler+0x14>)
 8005c46:	f000 b87b 	b.w	8005d40 <_fwalk_sglue>
 8005c4a:	bf00      	nop
 8005c4c:	2000000c 	.word	0x2000000c
 8005c50:	08008401 	.word	0x08008401
 8005c54:	20000184 	.word	0x20000184

08005c58 <cleanup_stdio>:
 8005c58:	6841      	ldr	r1, [r0, #4]
 8005c5a:	4b0c      	ldr	r3, [pc, #48]	; (8005c8c <cleanup_stdio+0x34>)
 8005c5c:	b510      	push	{r4, lr}
 8005c5e:	4299      	cmp	r1, r3
 8005c60:	4604      	mov	r4, r0
 8005c62:	d001      	beq.n	8005c68 <cleanup_stdio+0x10>
 8005c64:	f002 fbcc 	bl	8008400 <_fflush_r>
 8005c68:	68a1      	ldr	r1, [r4, #8]
 8005c6a:	4b09      	ldr	r3, [pc, #36]	; (8005c90 <cleanup_stdio+0x38>)
 8005c6c:	4299      	cmp	r1, r3
 8005c6e:	d002      	beq.n	8005c76 <cleanup_stdio+0x1e>
 8005c70:	4620      	mov	r0, r4
 8005c72:	f002 fbc5 	bl	8008400 <_fflush_r>
 8005c76:	68e1      	ldr	r1, [r4, #12]
 8005c78:	4b06      	ldr	r3, [pc, #24]	; (8005c94 <cleanup_stdio+0x3c>)
 8005c7a:	4299      	cmp	r1, r3
 8005c7c:	d004      	beq.n	8005c88 <cleanup_stdio+0x30>
 8005c7e:	4620      	mov	r0, r4
 8005c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c84:	f002 bbbc 	b.w	8008400 <_fflush_r>
 8005c88:	bd10      	pop	{r4, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20000a90 	.word	0x20000a90
 8005c90:	20000af8 	.word	0x20000af8
 8005c94:	20000b60 	.word	0x20000b60

08005c98 <global_stdio_init.part.0>:
 8005c98:	b510      	push	{r4, lr}
 8005c9a:	4b0b      	ldr	r3, [pc, #44]	; (8005cc8 <global_stdio_init.part.0+0x30>)
 8005c9c:	4c0b      	ldr	r4, [pc, #44]	; (8005ccc <global_stdio_init.part.0+0x34>)
 8005c9e:	4a0c      	ldr	r2, [pc, #48]	; (8005cd0 <global_stdio_init.part.0+0x38>)
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	2104      	movs	r1, #4
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f7ff ff94 	bl	8005bd4 <std>
 8005cac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	2109      	movs	r1, #9
 8005cb4:	f7ff ff8e 	bl	8005bd4 <std>
 8005cb8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cc2:	2112      	movs	r1, #18
 8005cc4:	f7ff bf86 	b.w	8005bd4 <std>
 8005cc8:	20000bc8 	.word	0x20000bc8
 8005ccc:	20000a90 	.word	0x20000a90
 8005cd0:	08005c41 	.word	0x08005c41

08005cd4 <__sfp_lock_acquire>:
 8005cd4:	4801      	ldr	r0, [pc, #4]	; (8005cdc <__sfp_lock_acquire+0x8>)
 8005cd6:	f000 ba26 	b.w	8006126 <__retarget_lock_acquire_recursive>
 8005cda:	bf00      	nop
 8005cdc:	20000bd1 	.word	0x20000bd1

08005ce0 <__sfp_lock_release>:
 8005ce0:	4801      	ldr	r0, [pc, #4]	; (8005ce8 <__sfp_lock_release+0x8>)
 8005ce2:	f000 ba21 	b.w	8006128 <__retarget_lock_release_recursive>
 8005ce6:	bf00      	nop
 8005ce8:	20000bd1 	.word	0x20000bd1

08005cec <__sinit>:
 8005cec:	b510      	push	{r4, lr}
 8005cee:	4604      	mov	r4, r0
 8005cf0:	f7ff fff0 	bl	8005cd4 <__sfp_lock_acquire>
 8005cf4:	6a23      	ldr	r3, [r4, #32]
 8005cf6:	b11b      	cbz	r3, 8005d00 <__sinit+0x14>
 8005cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cfc:	f7ff bff0 	b.w	8005ce0 <__sfp_lock_release>
 8005d00:	4b04      	ldr	r3, [pc, #16]	; (8005d14 <__sinit+0x28>)
 8005d02:	6223      	str	r3, [r4, #32]
 8005d04:	4b04      	ldr	r3, [pc, #16]	; (8005d18 <__sinit+0x2c>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1f5      	bne.n	8005cf8 <__sinit+0xc>
 8005d0c:	f7ff ffc4 	bl	8005c98 <global_stdio_init.part.0>
 8005d10:	e7f2      	b.n	8005cf8 <__sinit+0xc>
 8005d12:	bf00      	nop
 8005d14:	08005c59 	.word	0x08005c59
 8005d18:	20000bc8 	.word	0x20000bc8

08005d1c <fiprintf>:
 8005d1c:	b40e      	push	{r1, r2, r3}
 8005d1e:	b503      	push	{r0, r1, lr}
 8005d20:	4601      	mov	r1, r0
 8005d22:	ab03      	add	r3, sp, #12
 8005d24:	4805      	ldr	r0, [pc, #20]	; (8005d3c <fiprintf+0x20>)
 8005d26:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d2a:	6800      	ldr	r0, [r0, #0]
 8005d2c:	9301      	str	r3, [sp, #4]
 8005d2e:	f002 f9cb 	bl	80080c8 <_vfiprintf_r>
 8005d32:	b002      	add	sp, #8
 8005d34:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d38:	b003      	add	sp, #12
 8005d3a:	4770      	bx	lr
 8005d3c:	200001d0 	.word	0x200001d0

08005d40 <_fwalk_sglue>:
 8005d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d44:	4607      	mov	r7, r0
 8005d46:	4688      	mov	r8, r1
 8005d48:	4614      	mov	r4, r2
 8005d4a:	2600      	movs	r6, #0
 8005d4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d50:	f1b9 0901 	subs.w	r9, r9, #1
 8005d54:	d505      	bpl.n	8005d62 <_fwalk_sglue+0x22>
 8005d56:	6824      	ldr	r4, [r4, #0]
 8005d58:	2c00      	cmp	r4, #0
 8005d5a:	d1f7      	bne.n	8005d4c <_fwalk_sglue+0xc>
 8005d5c:	4630      	mov	r0, r6
 8005d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d62:	89ab      	ldrh	r3, [r5, #12]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d907      	bls.n	8005d78 <_fwalk_sglue+0x38>
 8005d68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	d003      	beq.n	8005d78 <_fwalk_sglue+0x38>
 8005d70:	4629      	mov	r1, r5
 8005d72:	4638      	mov	r0, r7
 8005d74:	47c0      	blx	r8
 8005d76:	4306      	orrs	r6, r0
 8005d78:	3568      	adds	r5, #104	; 0x68
 8005d7a:	e7e9      	b.n	8005d50 <_fwalk_sglue+0x10>

08005d7c <iprintf>:
 8005d7c:	b40f      	push	{r0, r1, r2, r3}
 8005d7e:	b507      	push	{r0, r1, r2, lr}
 8005d80:	4906      	ldr	r1, [pc, #24]	; (8005d9c <iprintf+0x20>)
 8005d82:	ab04      	add	r3, sp, #16
 8005d84:	6808      	ldr	r0, [r1, #0]
 8005d86:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d8a:	6881      	ldr	r1, [r0, #8]
 8005d8c:	9301      	str	r3, [sp, #4]
 8005d8e:	f002 f99b 	bl	80080c8 <_vfiprintf_r>
 8005d92:	b003      	add	sp, #12
 8005d94:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d98:	b004      	add	sp, #16
 8005d9a:	4770      	bx	lr
 8005d9c:	200001d0 	.word	0x200001d0

08005da0 <_puts_r>:
 8005da0:	6a03      	ldr	r3, [r0, #32]
 8005da2:	b570      	push	{r4, r5, r6, lr}
 8005da4:	4605      	mov	r5, r0
 8005da6:	460e      	mov	r6, r1
 8005da8:	6884      	ldr	r4, [r0, #8]
 8005daa:	b90b      	cbnz	r3, 8005db0 <_puts_r+0x10>
 8005dac:	f7ff ff9e 	bl	8005cec <__sinit>
 8005db0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005db2:	07db      	lsls	r3, r3, #31
 8005db4:	d405      	bmi.n	8005dc2 <_puts_r+0x22>
 8005db6:	89a3      	ldrh	r3, [r4, #12]
 8005db8:	0598      	lsls	r0, r3, #22
 8005dba:	d402      	bmi.n	8005dc2 <_puts_r+0x22>
 8005dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dbe:	f000 f9b2 	bl	8006126 <__retarget_lock_acquire_recursive>
 8005dc2:	89a3      	ldrh	r3, [r4, #12]
 8005dc4:	0719      	lsls	r1, r3, #28
 8005dc6:	d513      	bpl.n	8005df0 <_puts_r+0x50>
 8005dc8:	6923      	ldr	r3, [r4, #16]
 8005dca:	b18b      	cbz	r3, 8005df0 <_puts_r+0x50>
 8005dcc:	3e01      	subs	r6, #1
 8005dce:	68a3      	ldr	r3, [r4, #8]
 8005dd0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	60a3      	str	r3, [r4, #8]
 8005dd8:	b9e9      	cbnz	r1, 8005e16 <_puts_r+0x76>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	da2e      	bge.n	8005e3c <_puts_r+0x9c>
 8005dde:	4622      	mov	r2, r4
 8005de0:	210a      	movs	r1, #10
 8005de2:	4628      	mov	r0, r5
 8005de4:	f000 f87b 	bl	8005ede <__swbuf_r>
 8005de8:	3001      	adds	r0, #1
 8005dea:	d007      	beq.n	8005dfc <_puts_r+0x5c>
 8005dec:	250a      	movs	r5, #10
 8005dee:	e007      	b.n	8005e00 <_puts_r+0x60>
 8005df0:	4621      	mov	r1, r4
 8005df2:	4628      	mov	r0, r5
 8005df4:	f000 f8b0 	bl	8005f58 <__swsetup_r>
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	d0e7      	beq.n	8005dcc <_puts_r+0x2c>
 8005dfc:	f04f 35ff 	mov.w	r5, #4294967295
 8005e00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e02:	07da      	lsls	r2, r3, #31
 8005e04:	d405      	bmi.n	8005e12 <_puts_r+0x72>
 8005e06:	89a3      	ldrh	r3, [r4, #12]
 8005e08:	059b      	lsls	r3, r3, #22
 8005e0a:	d402      	bmi.n	8005e12 <_puts_r+0x72>
 8005e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e0e:	f000 f98b 	bl	8006128 <__retarget_lock_release_recursive>
 8005e12:	4628      	mov	r0, r5
 8005e14:	bd70      	pop	{r4, r5, r6, pc}
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	da04      	bge.n	8005e24 <_puts_r+0x84>
 8005e1a:	69a2      	ldr	r2, [r4, #24]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	dc06      	bgt.n	8005e2e <_puts_r+0x8e>
 8005e20:	290a      	cmp	r1, #10
 8005e22:	d004      	beq.n	8005e2e <_puts_r+0x8e>
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	1c5a      	adds	r2, r3, #1
 8005e28:	6022      	str	r2, [r4, #0]
 8005e2a:	7019      	strb	r1, [r3, #0]
 8005e2c:	e7cf      	b.n	8005dce <_puts_r+0x2e>
 8005e2e:	4622      	mov	r2, r4
 8005e30:	4628      	mov	r0, r5
 8005e32:	f000 f854 	bl	8005ede <__swbuf_r>
 8005e36:	3001      	adds	r0, #1
 8005e38:	d1c9      	bne.n	8005dce <_puts_r+0x2e>
 8005e3a:	e7df      	b.n	8005dfc <_puts_r+0x5c>
 8005e3c:	250a      	movs	r5, #10
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	1c5a      	adds	r2, r3, #1
 8005e42:	6022      	str	r2, [r4, #0]
 8005e44:	701d      	strb	r5, [r3, #0]
 8005e46:	e7db      	b.n	8005e00 <_puts_r+0x60>

08005e48 <puts>:
 8005e48:	4b02      	ldr	r3, [pc, #8]	; (8005e54 <puts+0xc>)
 8005e4a:	4601      	mov	r1, r0
 8005e4c:	6818      	ldr	r0, [r3, #0]
 8005e4e:	f7ff bfa7 	b.w	8005da0 <_puts_r>
 8005e52:	bf00      	nop
 8005e54:	200001d0 	.word	0x200001d0

08005e58 <__sread>:
 8005e58:	b510      	push	{r4, lr}
 8005e5a:	460c      	mov	r4, r1
 8005e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e60:	f000 f912 	bl	8006088 <_read_r>
 8005e64:	2800      	cmp	r0, #0
 8005e66:	bfab      	itete	ge
 8005e68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e6a:	89a3      	ldrhlt	r3, [r4, #12]
 8005e6c:	181b      	addge	r3, r3, r0
 8005e6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e72:	bfac      	ite	ge
 8005e74:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e76:	81a3      	strhlt	r3, [r4, #12]
 8005e78:	bd10      	pop	{r4, pc}

08005e7a <__swrite>:
 8005e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e7e:	461f      	mov	r7, r3
 8005e80:	898b      	ldrh	r3, [r1, #12]
 8005e82:	4605      	mov	r5, r0
 8005e84:	05db      	lsls	r3, r3, #23
 8005e86:	460c      	mov	r4, r1
 8005e88:	4616      	mov	r6, r2
 8005e8a:	d505      	bpl.n	8005e98 <__swrite+0x1e>
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e94:	f000 f8e6 	bl	8006064 <_lseek_r>
 8005e98:	89a3      	ldrh	r3, [r4, #12]
 8005e9a:	4632      	mov	r2, r6
 8005e9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ea0:	81a3      	strh	r3, [r4, #12]
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	463b      	mov	r3, r7
 8005ea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005eae:	f000 b8fd 	b.w	80060ac <_write_r>

08005eb2 <__sseek>:
 8005eb2:	b510      	push	{r4, lr}
 8005eb4:	460c      	mov	r4, r1
 8005eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eba:	f000 f8d3 	bl	8006064 <_lseek_r>
 8005ebe:	1c43      	adds	r3, r0, #1
 8005ec0:	89a3      	ldrh	r3, [r4, #12]
 8005ec2:	bf15      	itete	ne
 8005ec4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ec6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005eca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ece:	81a3      	strheq	r3, [r4, #12]
 8005ed0:	bf18      	it	ne
 8005ed2:	81a3      	strhne	r3, [r4, #12]
 8005ed4:	bd10      	pop	{r4, pc}

08005ed6 <__sclose>:
 8005ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eda:	f000 b8b3 	b.w	8006044 <_close_r>

08005ede <__swbuf_r>:
 8005ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee0:	460e      	mov	r6, r1
 8005ee2:	4614      	mov	r4, r2
 8005ee4:	4605      	mov	r5, r0
 8005ee6:	b118      	cbz	r0, 8005ef0 <__swbuf_r+0x12>
 8005ee8:	6a03      	ldr	r3, [r0, #32]
 8005eea:	b90b      	cbnz	r3, 8005ef0 <__swbuf_r+0x12>
 8005eec:	f7ff fefe 	bl	8005cec <__sinit>
 8005ef0:	69a3      	ldr	r3, [r4, #24]
 8005ef2:	60a3      	str	r3, [r4, #8]
 8005ef4:	89a3      	ldrh	r3, [r4, #12]
 8005ef6:	071a      	lsls	r2, r3, #28
 8005ef8:	d525      	bpl.n	8005f46 <__swbuf_r+0x68>
 8005efa:	6923      	ldr	r3, [r4, #16]
 8005efc:	b31b      	cbz	r3, 8005f46 <__swbuf_r+0x68>
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	6922      	ldr	r2, [r4, #16]
 8005f02:	b2f6      	uxtb	r6, r6
 8005f04:	1a98      	subs	r0, r3, r2
 8005f06:	6963      	ldr	r3, [r4, #20]
 8005f08:	4637      	mov	r7, r6
 8005f0a:	4283      	cmp	r3, r0
 8005f0c:	dc04      	bgt.n	8005f18 <__swbuf_r+0x3a>
 8005f0e:	4621      	mov	r1, r4
 8005f10:	4628      	mov	r0, r5
 8005f12:	f002 fa75 	bl	8008400 <_fflush_r>
 8005f16:	b9e0      	cbnz	r0, 8005f52 <__swbuf_r+0x74>
 8005f18:	68a3      	ldr	r3, [r4, #8]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	60a3      	str	r3, [r4, #8]
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	6022      	str	r2, [r4, #0]
 8005f24:	701e      	strb	r6, [r3, #0]
 8005f26:	6962      	ldr	r2, [r4, #20]
 8005f28:	1c43      	adds	r3, r0, #1
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d004      	beq.n	8005f38 <__swbuf_r+0x5a>
 8005f2e:	89a3      	ldrh	r3, [r4, #12]
 8005f30:	07db      	lsls	r3, r3, #31
 8005f32:	d506      	bpl.n	8005f42 <__swbuf_r+0x64>
 8005f34:	2e0a      	cmp	r6, #10
 8005f36:	d104      	bne.n	8005f42 <__swbuf_r+0x64>
 8005f38:	4621      	mov	r1, r4
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	f002 fa60 	bl	8008400 <_fflush_r>
 8005f40:	b938      	cbnz	r0, 8005f52 <__swbuf_r+0x74>
 8005f42:	4638      	mov	r0, r7
 8005f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f46:	4621      	mov	r1, r4
 8005f48:	4628      	mov	r0, r5
 8005f4a:	f000 f805 	bl	8005f58 <__swsetup_r>
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	d0d5      	beq.n	8005efe <__swbuf_r+0x20>
 8005f52:	f04f 37ff 	mov.w	r7, #4294967295
 8005f56:	e7f4      	b.n	8005f42 <__swbuf_r+0x64>

08005f58 <__swsetup_r>:
 8005f58:	b538      	push	{r3, r4, r5, lr}
 8005f5a:	4b2a      	ldr	r3, [pc, #168]	; (8006004 <__swsetup_r+0xac>)
 8005f5c:	4605      	mov	r5, r0
 8005f5e:	6818      	ldr	r0, [r3, #0]
 8005f60:	460c      	mov	r4, r1
 8005f62:	b118      	cbz	r0, 8005f6c <__swsetup_r+0x14>
 8005f64:	6a03      	ldr	r3, [r0, #32]
 8005f66:	b90b      	cbnz	r3, 8005f6c <__swsetup_r+0x14>
 8005f68:	f7ff fec0 	bl	8005cec <__sinit>
 8005f6c:	89a3      	ldrh	r3, [r4, #12]
 8005f6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f72:	0718      	lsls	r0, r3, #28
 8005f74:	d422      	bmi.n	8005fbc <__swsetup_r+0x64>
 8005f76:	06d9      	lsls	r1, r3, #27
 8005f78:	d407      	bmi.n	8005f8a <__swsetup_r+0x32>
 8005f7a:	2309      	movs	r3, #9
 8005f7c:	602b      	str	r3, [r5, #0]
 8005f7e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f82:	f04f 30ff 	mov.w	r0, #4294967295
 8005f86:	81a3      	strh	r3, [r4, #12]
 8005f88:	e034      	b.n	8005ff4 <__swsetup_r+0x9c>
 8005f8a:	0758      	lsls	r0, r3, #29
 8005f8c:	d512      	bpl.n	8005fb4 <__swsetup_r+0x5c>
 8005f8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f90:	b141      	cbz	r1, 8005fa4 <__swsetup_r+0x4c>
 8005f92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f96:	4299      	cmp	r1, r3
 8005f98:	d002      	beq.n	8005fa0 <__swsetup_r+0x48>
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	f000 ff5c 	bl	8006e58 <_free_r>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	6363      	str	r3, [r4, #52]	; 0x34
 8005fa4:	89a3      	ldrh	r3, [r4, #12]
 8005fa6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005faa:	81a3      	strh	r3, [r4, #12]
 8005fac:	2300      	movs	r3, #0
 8005fae:	6063      	str	r3, [r4, #4]
 8005fb0:	6923      	ldr	r3, [r4, #16]
 8005fb2:	6023      	str	r3, [r4, #0]
 8005fb4:	89a3      	ldrh	r3, [r4, #12]
 8005fb6:	f043 0308 	orr.w	r3, r3, #8
 8005fba:	81a3      	strh	r3, [r4, #12]
 8005fbc:	6923      	ldr	r3, [r4, #16]
 8005fbe:	b94b      	cbnz	r3, 8005fd4 <__swsetup_r+0x7c>
 8005fc0:	89a3      	ldrh	r3, [r4, #12]
 8005fc2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fca:	d003      	beq.n	8005fd4 <__swsetup_r+0x7c>
 8005fcc:	4621      	mov	r1, r4
 8005fce:	4628      	mov	r0, r5
 8005fd0:	f002 fa63 	bl	800849a <__smakebuf_r>
 8005fd4:	89a0      	ldrh	r0, [r4, #12]
 8005fd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fda:	f010 0301 	ands.w	r3, r0, #1
 8005fde:	d00a      	beq.n	8005ff6 <__swsetup_r+0x9e>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	60a3      	str	r3, [r4, #8]
 8005fe4:	6963      	ldr	r3, [r4, #20]
 8005fe6:	425b      	negs	r3, r3
 8005fe8:	61a3      	str	r3, [r4, #24]
 8005fea:	6923      	ldr	r3, [r4, #16]
 8005fec:	b943      	cbnz	r3, 8006000 <__swsetup_r+0xa8>
 8005fee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ff2:	d1c4      	bne.n	8005f7e <__swsetup_r+0x26>
 8005ff4:	bd38      	pop	{r3, r4, r5, pc}
 8005ff6:	0781      	lsls	r1, r0, #30
 8005ff8:	bf58      	it	pl
 8005ffa:	6963      	ldrpl	r3, [r4, #20]
 8005ffc:	60a3      	str	r3, [r4, #8]
 8005ffe:	e7f4      	b.n	8005fea <__swsetup_r+0x92>
 8006000:	2000      	movs	r0, #0
 8006002:	e7f7      	b.n	8005ff4 <__swsetup_r+0x9c>
 8006004:	200001d0 	.word	0x200001d0

08006008 <memset>:
 8006008:	4603      	mov	r3, r0
 800600a:	4402      	add	r2, r0
 800600c:	4293      	cmp	r3, r2
 800600e:	d100      	bne.n	8006012 <memset+0xa>
 8006010:	4770      	bx	lr
 8006012:	f803 1b01 	strb.w	r1, [r3], #1
 8006016:	e7f9      	b.n	800600c <memset+0x4>

08006018 <strncmp>:
 8006018:	b510      	push	{r4, lr}
 800601a:	b16a      	cbz	r2, 8006038 <strncmp+0x20>
 800601c:	3901      	subs	r1, #1
 800601e:	1884      	adds	r4, r0, r2
 8006020:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006024:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006028:	429a      	cmp	r2, r3
 800602a:	d103      	bne.n	8006034 <strncmp+0x1c>
 800602c:	42a0      	cmp	r0, r4
 800602e:	d001      	beq.n	8006034 <strncmp+0x1c>
 8006030:	2a00      	cmp	r2, #0
 8006032:	d1f5      	bne.n	8006020 <strncmp+0x8>
 8006034:	1ad0      	subs	r0, r2, r3
 8006036:	bd10      	pop	{r4, pc}
 8006038:	4610      	mov	r0, r2
 800603a:	e7fc      	b.n	8006036 <strncmp+0x1e>

0800603c <_localeconv_r>:
 800603c:	4800      	ldr	r0, [pc, #0]	; (8006040 <_localeconv_r+0x4>)
 800603e:	4770      	bx	lr
 8006040:	20000108 	.word	0x20000108

08006044 <_close_r>:
 8006044:	b538      	push	{r3, r4, r5, lr}
 8006046:	2300      	movs	r3, #0
 8006048:	4d05      	ldr	r5, [pc, #20]	; (8006060 <_close_r+0x1c>)
 800604a:	4604      	mov	r4, r0
 800604c:	4608      	mov	r0, r1
 800604e:	602b      	str	r3, [r5, #0]
 8006050:	f7fb fe3c 	bl	8001ccc <_close>
 8006054:	1c43      	adds	r3, r0, #1
 8006056:	d102      	bne.n	800605e <_close_r+0x1a>
 8006058:	682b      	ldr	r3, [r5, #0]
 800605a:	b103      	cbz	r3, 800605e <_close_r+0x1a>
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	bd38      	pop	{r3, r4, r5, pc}
 8006060:	20000bcc 	.word	0x20000bcc

08006064 <_lseek_r>:
 8006064:	b538      	push	{r3, r4, r5, lr}
 8006066:	4604      	mov	r4, r0
 8006068:	4608      	mov	r0, r1
 800606a:	4611      	mov	r1, r2
 800606c:	2200      	movs	r2, #0
 800606e:	4d05      	ldr	r5, [pc, #20]	; (8006084 <_lseek_r+0x20>)
 8006070:	602a      	str	r2, [r5, #0]
 8006072:	461a      	mov	r2, r3
 8006074:	f7fb fe4e 	bl	8001d14 <_lseek>
 8006078:	1c43      	adds	r3, r0, #1
 800607a:	d102      	bne.n	8006082 <_lseek_r+0x1e>
 800607c:	682b      	ldr	r3, [r5, #0]
 800607e:	b103      	cbz	r3, 8006082 <_lseek_r+0x1e>
 8006080:	6023      	str	r3, [r4, #0]
 8006082:	bd38      	pop	{r3, r4, r5, pc}
 8006084:	20000bcc 	.word	0x20000bcc

08006088 <_read_r>:
 8006088:	b538      	push	{r3, r4, r5, lr}
 800608a:	4604      	mov	r4, r0
 800608c:	4608      	mov	r0, r1
 800608e:	4611      	mov	r1, r2
 8006090:	2200      	movs	r2, #0
 8006092:	4d05      	ldr	r5, [pc, #20]	; (80060a8 <_read_r+0x20>)
 8006094:	602a      	str	r2, [r5, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	f7fb fdfb 	bl	8001c92 <_read>
 800609c:	1c43      	adds	r3, r0, #1
 800609e:	d102      	bne.n	80060a6 <_read_r+0x1e>
 80060a0:	682b      	ldr	r3, [r5, #0]
 80060a2:	b103      	cbz	r3, 80060a6 <_read_r+0x1e>
 80060a4:	6023      	str	r3, [r4, #0]
 80060a6:	bd38      	pop	{r3, r4, r5, pc}
 80060a8:	20000bcc 	.word	0x20000bcc

080060ac <_write_r>:
 80060ac:	b538      	push	{r3, r4, r5, lr}
 80060ae:	4604      	mov	r4, r0
 80060b0:	4608      	mov	r0, r1
 80060b2:	4611      	mov	r1, r2
 80060b4:	2200      	movs	r2, #0
 80060b6:	4d05      	ldr	r5, [pc, #20]	; (80060cc <_write_r+0x20>)
 80060b8:	602a      	str	r2, [r5, #0]
 80060ba:	461a      	mov	r2, r3
 80060bc:	f7fa ffea 	bl	8001094 <_write>
 80060c0:	1c43      	adds	r3, r0, #1
 80060c2:	d102      	bne.n	80060ca <_write_r+0x1e>
 80060c4:	682b      	ldr	r3, [r5, #0]
 80060c6:	b103      	cbz	r3, 80060ca <_write_r+0x1e>
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	bd38      	pop	{r3, r4, r5, pc}
 80060cc:	20000bcc 	.word	0x20000bcc

080060d0 <__errno>:
 80060d0:	4b01      	ldr	r3, [pc, #4]	; (80060d8 <__errno+0x8>)
 80060d2:	6818      	ldr	r0, [r3, #0]
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	200001d0 	.word	0x200001d0

080060dc <__libc_init_array>:
 80060dc:	b570      	push	{r4, r5, r6, lr}
 80060de:	2600      	movs	r6, #0
 80060e0:	4d0c      	ldr	r5, [pc, #48]	; (8006114 <__libc_init_array+0x38>)
 80060e2:	4c0d      	ldr	r4, [pc, #52]	; (8006118 <__libc_init_array+0x3c>)
 80060e4:	1b64      	subs	r4, r4, r5
 80060e6:	10a4      	asrs	r4, r4, #2
 80060e8:	42a6      	cmp	r6, r4
 80060ea:	d109      	bne.n	8006100 <__libc_init_array+0x24>
 80060ec:	f002 fa9c 	bl	8008628 <_init>
 80060f0:	2600      	movs	r6, #0
 80060f2:	4d0a      	ldr	r5, [pc, #40]	; (800611c <__libc_init_array+0x40>)
 80060f4:	4c0a      	ldr	r4, [pc, #40]	; (8006120 <__libc_init_array+0x44>)
 80060f6:	1b64      	subs	r4, r4, r5
 80060f8:	10a4      	asrs	r4, r4, #2
 80060fa:	42a6      	cmp	r6, r4
 80060fc:	d105      	bne.n	800610a <__libc_init_array+0x2e>
 80060fe:	bd70      	pop	{r4, r5, r6, pc}
 8006100:	f855 3b04 	ldr.w	r3, [r5], #4
 8006104:	4798      	blx	r3
 8006106:	3601      	adds	r6, #1
 8006108:	e7ee      	b.n	80060e8 <__libc_init_array+0xc>
 800610a:	f855 3b04 	ldr.w	r3, [r5], #4
 800610e:	4798      	blx	r3
 8006110:	3601      	adds	r6, #1
 8006112:	e7f2      	b.n	80060fa <__libc_init_array+0x1e>
 8006114:	08008c98 	.word	0x08008c98
 8006118:	08008c98 	.word	0x08008c98
 800611c:	08008c98 	.word	0x08008c98
 8006120:	08008c9c 	.word	0x08008c9c

08006124 <__retarget_lock_init_recursive>:
 8006124:	4770      	bx	lr

08006126 <__retarget_lock_acquire_recursive>:
 8006126:	4770      	bx	lr

08006128 <__retarget_lock_release_recursive>:
 8006128:	4770      	bx	lr

0800612a <memchr>:
 800612a:	4603      	mov	r3, r0
 800612c:	b510      	push	{r4, lr}
 800612e:	b2c9      	uxtb	r1, r1
 8006130:	4402      	add	r2, r0
 8006132:	4293      	cmp	r3, r2
 8006134:	4618      	mov	r0, r3
 8006136:	d101      	bne.n	800613c <memchr+0x12>
 8006138:	2000      	movs	r0, #0
 800613a:	e003      	b.n	8006144 <memchr+0x1a>
 800613c:	7804      	ldrb	r4, [r0, #0]
 800613e:	3301      	adds	r3, #1
 8006140:	428c      	cmp	r4, r1
 8006142:	d1f6      	bne.n	8006132 <memchr+0x8>
 8006144:	bd10      	pop	{r4, pc}

08006146 <memcpy>:
 8006146:	440a      	add	r2, r1
 8006148:	4291      	cmp	r1, r2
 800614a:	f100 33ff 	add.w	r3, r0, #4294967295
 800614e:	d100      	bne.n	8006152 <memcpy+0xc>
 8006150:	4770      	bx	lr
 8006152:	b510      	push	{r4, lr}
 8006154:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006158:	4291      	cmp	r1, r2
 800615a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800615e:	d1f9      	bne.n	8006154 <memcpy+0xe>
 8006160:	bd10      	pop	{r4, pc}
	...

08006164 <nan>:
 8006164:	2000      	movs	r0, #0
 8006166:	4901      	ldr	r1, [pc, #4]	; (800616c <nan+0x8>)
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	7ff80000 	.word	0x7ff80000

08006170 <abort>:
 8006170:	2006      	movs	r0, #6
 8006172:	b508      	push	{r3, lr}
 8006174:	f002 f9f6 	bl	8008564 <raise>
 8006178:	2001      	movs	r0, #1
 800617a:	f7fb fd80 	bl	8001c7e <_exit>

0800617e <quorem>:
 800617e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006182:	6903      	ldr	r3, [r0, #16]
 8006184:	690c      	ldr	r4, [r1, #16]
 8006186:	4607      	mov	r7, r0
 8006188:	42a3      	cmp	r3, r4
 800618a:	db7f      	blt.n	800628c <quorem+0x10e>
 800618c:	3c01      	subs	r4, #1
 800618e:	f100 0514 	add.w	r5, r0, #20
 8006192:	f101 0814 	add.w	r8, r1, #20
 8006196:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800619a:	9301      	str	r3, [sp, #4]
 800619c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80061a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061a4:	3301      	adds	r3, #1
 80061a6:	429a      	cmp	r2, r3
 80061a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80061ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80061b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061b4:	d331      	bcc.n	800621a <quorem+0x9c>
 80061b6:	f04f 0e00 	mov.w	lr, #0
 80061ba:	4640      	mov	r0, r8
 80061bc:	46ac      	mov	ip, r5
 80061be:	46f2      	mov	sl, lr
 80061c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80061c4:	b293      	uxth	r3, r2
 80061c6:	fb06 e303 	mla	r3, r6, r3, lr
 80061ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80061ce:	0c1a      	lsrs	r2, r3, #16
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	fb06 220e 	mla	r2, r6, lr, r2
 80061d6:	ebaa 0303 	sub.w	r3, sl, r3
 80061da:	f8dc a000 	ldr.w	sl, [ip]
 80061de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80061e2:	fa1f fa8a 	uxth.w	sl, sl
 80061e6:	4453      	add	r3, sl
 80061e8:	f8dc a000 	ldr.w	sl, [ip]
 80061ec:	b292      	uxth	r2, r2
 80061ee:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80061f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061fc:	4581      	cmp	r9, r0
 80061fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006202:	f84c 3b04 	str.w	r3, [ip], #4
 8006206:	d2db      	bcs.n	80061c0 <quorem+0x42>
 8006208:	f855 300b 	ldr.w	r3, [r5, fp]
 800620c:	b92b      	cbnz	r3, 800621a <quorem+0x9c>
 800620e:	9b01      	ldr	r3, [sp, #4]
 8006210:	3b04      	subs	r3, #4
 8006212:	429d      	cmp	r5, r3
 8006214:	461a      	mov	r2, r3
 8006216:	d32d      	bcc.n	8006274 <quorem+0xf6>
 8006218:	613c      	str	r4, [r7, #16]
 800621a:	4638      	mov	r0, r7
 800621c:	f001 fd48 	bl	8007cb0 <__mcmp>
 8006220:	2800      	cmp	r0, #0
 8006222:	db23      	blt.n	800626c <quorem+0xee>
 8006224:	4629      	mov	r1, r5
 8006226:	2000      	movs	r0, #0
 8006228:	3601      	adds	r6, #1
 800622a:	f858 2b04 	ldr.w	r2, [r8], #4
 800622e:	f8d1 c000 	ldr.w	ip, [r1]
 8006232:	b293      	uxth	r3, r2
 8006234:	1ac3      	subs	r3, r0, r3
 8006236:	0c12      	lsrs	r2, r2, #16
 8006238:	fa1f f08c 	uxth.w	r0, ip
 800623c:	4403      	add	r3, r0
 800623e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006242:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006246:	b29b      	uxth	r3, r3
 8006248:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800624c:	45c1      	cmp	r9, r8
 800624e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006252:	f841 3b04 	str.w	r3, [r1], #4
 8006256:	d2e8      	bcs.n	800622a <quorem+0xac>
 8006258:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800625c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006260:	b922      	cbnz	r2, 800626c <quorem+0xee>
 8006262:	3b04      	subs	r3, #4
 8006264:	429d      	cmp	r5, r3
 8006266:	461a      	mov	r2, r3
 8006268:	d30a      	bcc.n	8006280 <quorem+0x102>
 800626a:	613c      	str	r4, [r7, #16]
 800626c:	4630      	mov	r0, r6
 800626e:	b003      	add	sp, #12
 8006270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006274:	6812      	ldr	r2, [r2, #0]
 8006276:	3b04      	subs	r3, #4
 8006278:	2a00      	cmp	r2, #0
 800627a:	d1cd      	bne.n	8006218 <quorem+0x9a>
 800627c:	3c01      	subs	r4, #1
 800627e:	e7c8      	b.n	8006212 <quorem+0x94>
 8006280:	6812      	ldr	r2, [r2, #0]
 8006282:	3b04      	subs	r3, #4
 8006284:	2a00      	cmp	r2, #0
 8006286:	d1f0      	bne.n	800626a <quorem+0xec>
 8006288:	3c01      	subs	r4, #1
 800628a:	e7eb      	b.n	8006264 <quorem+0xe6>
 800628c:	2000      	movs	r0, #0
 800628e:	e7ee      	b.n	800626e <quorem+0xf0>

08006290 <_dtoa_r>:
 8006290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006294:	4616      	mov	r6, r2
 8006296:	461f      	mov	r7, r3
 8006298:	69c4      	ldr	r4, [r0, #28]
 800629a:	b099      	sub	sp, #100	; 0x64
 800629c:	4605      	mov	r5, r0
 800629e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80062a2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80062a6:	b974      	cbnz	r4, 80062c6 <_dtoa_r+0x36>
 80062a8:	2010      	movs	r0, #16
 80062aa:	f001 f977 	bl	800759c <malloc>
 80062ae:	4602      	mov	r2, r0
 80062b0:	61e8      	str	r0, [r5, #28]
 80062b2:	b920      	cbnz	r0, 80062be <_dtoa_r+0x2e>
 80062b4:	21ef      	movs	r1, #239	; 0xef
 80062b6:	4bac      	ldr	r3, [pc, #688]	; (8006568 <_dtoa_r+0x2d8>)
 80062b8:	48ac      	ldr	r0, [pc, #688]	; (800656c <_dtoa_r+0x2dc>)
 80062ba:	f7fe f9ed 	bl	8004698 <__assert_func>
 80062be:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062c2:	6004      	str	r4, [r0, #0]
 80062c4:	60c4      	str	r4, [r0, #12]
 80062c6:	69eb      	ldr	r3, [r5, #28]
 80062c8:	6819      	ldr	r1, [r3, #0]
 80062ca:	b151      	cbz	r1, 80062e2 <_dtoa_r+0x52>
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	2301      	movs	r3, #1
 80062d0:	4093      	lsls	r3, r2
 80062d2:	604a      	str	r2, [r1, #4]
 80062d4:	608b      	str	r3, [r1, #8]
 80062d6:	4628      	mov	r0, r5
 80062d8:	f001 fa66 	bl	80077a8 <_Bfree>
 80062dc:	2200      	movs	r2, #0
 80062de:	69eb      	ldr	r3, [r5, #28]
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	1e3b      	subs	r3, r7, #0
 80062e4:	bfaf      	iteee	ge
 80062e6:	2300      	movge	r3, #0
 80062e8:	2201      	movlt	r2, #1
 80062ea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80062ee:	9305      	strlt	r3, [sp, #20]
 80062f0:	bfa8      	it	ge
 80062f2:	f8c8 3000 	strge.w	r3, [r8]
 80062f6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80062fa:	4b9d      	ldr	r3, [pc, #628]	; (8006570 <_dtoa_r+0x2e0>)
 80062fc:	bfb8      	it	lt
 80062fe:	f8c8 2000 	strlt.w	r2, [r8]
 8006302:	ea33 0309 	bics.w	r3, r3, r9
 8006306:	d119      	bne.n	800633c <_dtoa_r+0xac>
 8006308:	f242 730f 	movw	r3, #9999	; 0x270f
 800630c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800630e:	6013      	str	r3, [r2, #0]
 8006310:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006314:	4333      	orrs	r3, r6
 8006316:	f000 8589 	beq.w	8006e2c <_dtoa_r+0xb9c>
 800631a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800631c:	b953      	cbnz	r3, 8006334 <_dtoa_r+0xa4>
 800631e:	4b95      	ldr	r3, [pc, #596]	; (8006574 <_dtoa_r+0x2e4>)
 8006320:	e023      	b.n	800636a <_dtoa_r+0xda>
 8006322:	4b95      	ldr	r3, [pc, #596]	; (8006578 <_dtoa_r+0x2e8>)
 8006324:	9303      	str	r3, [sp, #12]
 8006326:	3308      	adds	r3, #8
 8006328:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800632a:	6013      	str	r3, [r2, #0]
 800632c:	9803      	ldr	r0, [sp, #12]
 800632e:	b019      	add	sp, #100	; 0x64
 8006330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006334:	4b8f      	ldr	r3, [pc, #572]	; (8006574 <_dtoa_r+0x2e4>)
 8006336:	9303      	str	r3, [sp, #12]
 8006338:	3303      	adds	r3, #3
 800633a:	e7f5      	b.n	8006328 <_dtoa_r+0x98>
 800633c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006340:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006344:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006348:	2200      	movs	r2, #0
 800634a:	2300      	movs	r3, #0
 800634c:	f7fa fb2c 	bl	80009a8 <__aeabi_dcmpeq>
 8006350:	4680      	mov	r8, r0
 8006352:	b160      	cbz	r0, 800636e <_dtoa_r+0xde>
 8006354:	2301      	movs	r3, #1
 8006356:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006358:	6013      	str	r3, [r2, #0]
 800635a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 8562 	beq.w	8006e26 <_dtoa_r+0xb96>
 8006362:	4b86      	ldr	r3, [pc, #536]	; (800657c <_dtoa_r+0x2ec>)
 8006364:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006366:	6013      	str	r3, [r2, #0]
 8006368:	3b01      	subs	r3, #1
 800636a:	9303      	str	r3, [sp, #12]
 800636c:	e7de      	b.n	800632c <_dtoa_r+0x9c>
 800636e:	ab16      	add	r3, sp, #88	; 0x58
 8006370:	9301      	str	r3, [sp, #4]
 8006372:	ab17      	add	r3, sp, #92	; 0x5c
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	4628      	mov	r0, r5
 8006378:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800637c:	f001 fda8 	bl	8007ed0 <__d2b>
 8006380:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006384:	4682      	mov	sl, r0
 8006386:	2c00      	cmp	r4, #0
 8006388:	d07e      	beq.n	8006488 <_dtoa_r+0x1f8>
 800638a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800638e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006390:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006398:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800639c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80063a0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80063a4:	4619      	mov	r1, r3
 80063a6:	2200      	movs	r2, #0
 80063a8:	4b75      	ldr	r3, [pc, #468]	; (8006580 <_dtoa_r+0x2f0>)
 80063aa:	f7f9 fedd 	bl	8000168 <__aeabi_dsub>
 80063ae:	a368      	add	r3, pc, #416	; (adr r3, 8006550 <_dtoa_r+0x2c0>)
 80063b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b4:	f7fa f890 	bl	80004d8 <__aeabi_dmul>
 80063b8:	a367      	add	r3, pc, #412	; (adr r3, 8006558 <_dtoa_r+0x2c8>)
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	f7f9 fed5 	bl	800016c <__adddf3>
 80063c2:	4606      	mov	r6, r0
 80063c4:	4620      	mov	r0, r4
 80063c6:	460f      	mov	r7, r1
 80063c8:	f7fa f81c 	bl	8000404 <__aeabi_i2d>
 80063cc:	a364      	add	r3, pc, #400	; (adr r3, 8006560 <_dtoa_r+0x2d0>)
 80063ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d2:	f7fa f881 	bl	80004d8 <__aeabi_dmul>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4630      	mov	r0, r6
 80063dc:	4639      	mov	r1, r7
 80063de:	f7f9 fec5 	bl	800016c <__adddf3>
 80063e2:	4606      	mov	r6, r0
 80063e4:	460f      	mov	r7, r1
 80063e6:	f7fa fb27 	bl	8000a38 <__aeabi_d2iz>
 80063ea:	2200      	movs	r2, #0
 80063ec:	4683      	mov	fp, r0
 80063ee:	2300      	movs	r3, #0
 80063f0:	4630      	mov	r0, r6
 80063f2:	4639      	mov	r1, r7
 80063f4:	f7fa fae2 	bl	80009bc <__aeabi_dcmplt>
 80063f8:	b148      	cbz	r0, 800640e <_dtoa_r+0x17e>
 80063fa:	4658      	mov	r0, fp
 80063fc:	f7fa f802 	bl	8000404 <__aeabi_i2d>
 8006400:	4632      	mov	r2, r6
 8006402:	463b      	mov	r3, r7
 8006404:	f7fa fad0 	bl	80009a8 <__aeabi_dcmpeq>
 8006408:	b908      	cbnz	r0, 800640e <_dtoa_r+0x17e>
 800640a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800640e:	f1bb 0f16 	cmp.w	fp, #22
 8006412:	d857      	bhi.n	80064c4 <_dtoa_r+0x234>
 8006414:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006418:	4b5a      	ldr	r3, [pc, #360]	; (8006584 <_dtoa_r+0x2f4>)
 800641a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800641e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006422:	f7fa facb 	bl	80009bc <__aeabi_dcmplt>
 8006426:	2800      	cmp	r0, #0
 8006428:	d04e      	beq.n	80064c8 <_dtoa_r+0x238>
 800642a:	2300      	movs	r3, #0
 800642c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006430:	930f      	str	r3, [sp, #60]	; 0x3c
 8006432:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006434:	1b1b      	subs	r3, r3, r4
 8006436:	1e5a      	subs	r2, r3, #1
 8006438:	bf46      	itte	mi
 800643a:	f1c3 0901 	rsbmi	r9, r3, #1
 800643e:	2300      	movmi	r3, #0
 8006440:	f04f 0900 	movpl.w	r9, #0
 8006444:	9209      	str	r2, [sp, #36]	; 0x24
 8006446:	bf48      	it	mi
 8006448:	9309      	strmi	r3, [sp, #36]	; 0x24
 800644a:	f1bb 0f00 	cmp.w	fp, #0
 800644e:	db3d      	blt.n	80064cc <_dtoa_r+0x23c>
 8006450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006452:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006456:	445b      	add	r3, fp
 8006458:	9309      	str	r3, [sp, #36]	; 0x24
 800645a:	2300      	movs	r3, #0
 800645c:	930a      	str	r3, [sp, #40]	; 0x28
 800645e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006460:	2b09      	cmp	r3, #9
 8006462:	d867      	bhi.n	8006534 <_dtoa_r+0x2a4>
 8006464:	2b05      	cmp	r3, #5
 8006466:	bfc4      	itt	gt
 8006468:	3b04      	subgt	r3, #4
 800646a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800646c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800646e:	bfc8      	it	gt
 8006470:	2400      	movgt	r4, #0
 8006472:	f1a3 0302 	sub.w	r3, r3, #2
 8006476:	bfd8      	it	le
 8006478:	2401      	movle	r4, #1
 800647a:	2b03      	cmp	r3, #3
 800647c:	f200 8086 	bhi.w	800658c <_dtoa_r+0x2fc>
 8006480:	e8df f003 	tbb	[pc, r3]
 8006484:	5637392c 	.word	0x5637392c
 8006488:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800648c:	441c      	add	r4, r3
 800648e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006492:	2b20      	cmp	r3, #32
 8006494:	bfc1      	itttt	gt
 8006496:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800649a:	fa09 f903 	lslgt.w	r9, r9, r3
 800649e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80064a2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80064a6:	bfd6      	itet	le
 80064a8:	f1c3 0320 	rsble	r3, r3, #32
 80064ac:	ea49 0003 	orrgt.w	r0, r9, r3
 80064b0:	fa06 f003 	lslle.w	r0, r6, r3
 80064b4:	f7f9 ff96 	bl	80003e4 <__aeabi_ui2d>
 80064b8:	2201      	movs	r2, #1
 80064ba:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80064be:	3c01      	subs	r4, #1
 80064c0:	9213      	str	r2, [sp, #76]	; 0x4c
 80064c2:	e76f      	b.n	80063a4 <_dtoa_r+0x114>
 80064c4:	2301      	movs	r3, #1
 80064c6:	e7b3      	b.n	8006430 <_dtoa_r+0x1a0>
 80064c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80064ca:	e7b2      	b.n	8006432 <_dtoa_r+0x1a2>
 80064cc:	f1cb 0300 	rsb	r3, fp, #0
 80064d0:	930a      	str	r3, [sp, #40]	; 0x28
 80064d2:	2300      	movs	r3, #0
 80064d4:	eba9 090b 	sub.w	r9, r9, fp
 80064d8:	930e      	str	r3, [sp, #56]	; 0x38
 80064da:	e7c0      	b.n	800645e <_dtoa_r+0x1ce>
 80064dc:	2300      	movs	r3, #0
 80064de:	930b      	str	r3, [sp, #44]	; 0x2c
 80064e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	dc55      	bgt.n	8006592 <_dtoa_r+0x302>
 80064e6:	2301      	movs	r3, #1
 80064e8:	461a      	mov	r2, r3
 80064ea:	9306      	str	r3, [sp, #24]
 80064ec:	9308      	str	r3, [sp, #32]
 80064ee:	9223      	str	r2, [sp, #140]	; 0x8c
 80064f0:	e00b      	b.n	800650a <_dtoa_r+0x27a>
 80064f2:	2301      	movs	r3, #1
 80064f4:	e7f3      	b.n	80064de <_dtoa_r+0x24e>
 80064f6:	2300      	movs	r3, #0
 80064f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80064fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064fc:	445b      	add	r3, fp
 80064fe:	9306      	str	r3, [sp, #24]
 8006500:	3301      	adds	r3, #1
 8006502:	2b01      	cmp	r3, #1
 8006504:	9308      	str	r3, [sp, #32]
 8006506:	bfb8      	it	lt
 8006508:	2301      	movlt	r3, #1
 800650a:	2100      	movs	r1, #0
 800650c:	2204      	movs	r2, #4
 800650e:	69e8      	ldr	r0, [r5, #28]
 8006510:	f102 0614 	add.w	r6, r2, #20
 8006514:	429e      	cmp	r6, r3
 8006516:	d940      	bls.n	800659a <_dtoa_r+0x30a>
 8006518:	6041      	str	r1, [r0, #4]
 800651a:	4628      	mov	r0, r5
 800651c:	f001 f904 	bl	8007728 <_Balloc>
 8006520:	9003      	str	r0, [sp, #12]
 8006522:	2800      	cmp	r0, #0
 8006524:	d13c      	bne.n	80065a0 <_dtoa_r+0x310>
 8006526:	4602      	mov	r2, r0
 8006528:	f240 11af 	movw	r1, #431	; 0x1af
 800652c:	4b16      	ldr	r3, [pc, #88]	; (8006588 <_dtoa_r+0x2f8>)
 800652e:	e6c3      	b.n	80062b8 <_dtoa_r+0x28>
 8006530:	2301      	movs	r3, #1
 8006532:	e7e1      	b.n	80064f8 <_dtoa_r+0x268>
 8006534:	2401      	movs	r4, #1
 8006536:	2300      	movs	r3, #0
 8006538:	940b      	str	r4, [sp, #44]	; 0x2c
 800653a:	9322      	str	r3, [sp, #136]	; 0x88
 800653c:	f04f 33ff 	mov.w	r3, #4294967295
 8006540:	2200      	movs	r2, #0
 8006542:	9306      	str	r3, [sp, #24]
 8006544:	9308      	str	r3, [sp, #32]
 8006546:	2312      	movs	r3, #18
 8006548:	e7d1      	b.n	80064ee <_dtoa_r+0x25e>
 800654a:	bf00      	nop
 800654c:	f3af 8000 	nop.w
 8006550:	636f4361 	.word	0x636f4361
 8006554:	3fd287a7 	.word	0x3fd287a7
 8006558:	8b60c8b3 	.word	0x8b60c8b3
 800655c:	3fc68a28 	.word	0x3fc68a28
 8006560:	509f79fb 	.word	0x509f79fb
 8006564:	3fd34413 	.word	0x3fd34413
 8006568:	08008949 	.word	0x08008949
 800656c:	08008960 	.word	0x08008960
 8006570:	7ff00000 	.word	0x7ff00000
 8006574:	08008945 	.word	0x08008945
 8006578:	0800893c 	.word	0x0800893c
 800657c:	08008911 	.word	0x08008911
 8006580:	3ff80000 	.word	0x3ff80000
 8006584:	08008ab0 	.word	0x08008ab0
 8006588:	080089b8 	.word	0x080089b8
 800658c:	2301      	movs	r3, #1
 800658e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006590:	e7d4      	b.n	800653c <_dtoa_r+0x2ac>
 8006592:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006594:	9306      	str	r3, [sp, #24]
 8006596:	9308      	str	r3, [sp, #32]
 8006598:	e7b7      	b.n	800650a <_dtoa_r+0x27a>
 800659a:	3101      	adds	r1, #1
 800659c:	0052      	lsls	r2, r2, #1
 800659e:	e7b7      	b.n	8006510 <_dtoa_r+0x280>
 80065a0:	69eb      	ldr	r3, [r5, #28]
 80065a2:	9a03      	ldr	r2, [sp, #12]
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	9b08      	ldr	r3, [sp, #32]
 80065a8:	2b0e      	cmp	r3, #14
 80065aa:	f200 80a8 	bhi.w	80066fe <_dtoa_r+0x46e>
 80065ae:	2c00      	cmp	r4, #0
 80065b0:	f000 80a5 	beq.w	80066fe <_dtoa_r+0x46e>
 80065b4:	f1bb 0f00 	cmp.w	fp, #0
 80065b8:	dd34      	ble.n	8006624 <_dtoa_r+0x394>
 80065ba:	4b9a      	ldr	r3, [pc, #616]	; (8006824 <_dtoa_r+0x594>)
 80065bc:	f00b 020f 	and.w	r2, fp, #15
 80065c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065c4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80065c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80065cc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80065d0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80065d4:	d016      	beq.n	8006604 <_dtoa_r+0x374>
 80065d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065da:	4b93      	ldr	r3, [pc, #588]	; (8006828 <_dtoa_r+0x598>)
 80065dc:	2703      	movs	r7, #3
 80065de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80065e2:	f7fa f8a3 	bl	800072c <__aeabi_ddiv>
 80065e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065ea:	f004 040f 	and.w	r4, r4, #15
 80065ee:	4e8e      	ldr	r6, [pc, #568]	; (8006828 <_dtoa_r+0x598>)
 80065f0:	b954      	cbnz	r4, 8006608 <_dtoa_r+0x378>
 80065f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065fa:	f7fa f897 	bl	800072c <__aeabi_ddiv>
 80065fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006602:	e029      	b.n	8006658 <_dtoa_r+0x3c8>
 8006604:	2702      	movs	r7, #2
 8006606:	e7f2      	b.n	80065ee <_dtoa_r+0x35e>
 8006608:	07e1      	lsls	r1, r4, #31
 800660a:	d508      	bpl.n	800661e <_dtoa_r+0x38e>
 800660c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006610:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006614:	f7f9 ff60 	bl	80004d8 <__aeabi_dmul>
 8006618:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800661c:	3701      	adds	r7, #1
 800661e:	1064      	asrs	r4, r4, #1
 8006620:	3608      	adds	r6, #8
 8006622:	e7e5      	b.n	80065f0 <_dtoa_r+0x360>
 8006624:	f000 80a5 	beq.w	8006772 <_dtoa_r+0x4e2>
 8006628:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800662c:	f1cb 0400 	rsb	r4, fp, #0
 8006630:	4b7c      	ldr	r3, [pc, #496]	; (8006824 <_dtoa_r+0x594>)
 8006632:	f004 020f 	and.w	r2, r4, #15
 8006636:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800663a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663e:	f7f9 ff4b 	bl	80004d8 <__aeabi_dmul>
 8006642:	2702      	movs	r7, #2
 8006644:	2300      	movs	r3, #0
 8006646:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800664a:	4e77      	ldr	r6, [pc, #476]	; (8006828 <_dtoa_r+0x598>)
 800664c:	1124      	asrs	r4, r4, #4
 800664e:	2c00      	cmp	r4, #0
 8006650:	f040 8084 	bne.w	800675c <_dtoa_r+0x4cc>
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1d2      	bne.n	80065fe <_dtoa_r+0x36e>
 8006658:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800665c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006660:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006662:	2b00      	cmp	r3, #0
 8006664:	f000 8087 	beq.w	8006776 <_dtoa_r+0x4e6>
 8006668:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800666c:	2200      	movs	r2, #0
 800666e:	4b6f      	ldr	r3, [pc, #444]	; (800682c <_dtoa_r+0x59c>)
 8006670:	f7fa f9a4 	bl	80009bc <__aeabi_dcmplt>
 8006674:	2800      	cmp	r0, #0
 8006676:	d07e      	beq.n	8006776 <_dtoa_r+0x4e6>
 8006678:	9b08      	ldr	r3, [sp, #32]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d07b      	beq.n	8006776 <_dtoa_r+0x4e6>
 800667e:	9b06      	ldr	r3, [sp, #24]
 8006680:	2b00      	cmp	r3, #0
 8006682:	dd38      	ble.n	80066f6 <_dtoa_r+0x466>
 8006684:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006688:	2200      	movs	r2, #0
 800668a:	4b69      	ldr	r3, [pc, #420]	; (8006830 <_dtoa_r+0x5a0>)
 800668c:	f7f9 ff24 	bl	80004d8 <__aeabi_dmul>
 8006690:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006694:	9c06      	ldr	r4, [sp, #24]
 8006696:	f10b 38ff 	add.w	r8, fp, #4294967295
 800669a:	3701      	adds	r7, #1
 800669c:	4638      	mov	r0, r7
 800669e:	f7f9 feb1 	bl	8000404 <__aeabi_i2d>
 80066a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066a6:	f7f9 ff17 	bl	80004d8 <__aeabi_dmul>
 80066aa:	2200      	movs	r2, #0
 80066ac:	4b61      	ldr	r3, [pc, #388]	; (8006834 <_dtoa_r+0x5a4>)
 80066ae:	f7f9 fd5d 	bl	800016c <__adddf3>
 80066b2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80066b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80066ba:	9611      	str	r6, [sp, #68]	; 0x44
 80066bc:	2c00      	cmp	r4, #0
 80066be:	d15d      	bne.n	800677c <_dtoa_r+0x4ec>
 80066c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066c4:	2200      	movs	r2, #0
 80066c6:	4b5c      	ldr	r3, [pc, #368]	; (8006838 <_dtoa_r+0x5a8>)
 80066c8:	f7f9 fd4e 	bl	8000168 <__aeabi_dsub>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80066d4:	4633      	mov	r3, r6
 80066d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80066d8:	f7fa f98e 	bl	80009f8 <__aeabi_dcmpgt>
 80066dc:	2800      	cmp	r0, #0
 80066de:	f040 8295 	bne.w	8006c0c <_dtoa_r+0x97c>
 80066e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80066e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80066ec:	f7fa f966 	bl	80009bc <__aeabi_dcmplt>
 80066f0:	2800      	cmp	r0, #0
 80066f2:	f040 8289 	bne.w	8006c08 <_dtoa_r+0x978>
 80066f6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80066fa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80066fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006700:	2b00      	cmp	r3, #0
 8006702:	f2c0 8151 	blt.w	80069a8 <_dtoa_r+0x718>
 8006706:	f1bb 0f0e 	cmp.w	fp, #14
 800670a:	f300 814d 	bgt.w	80069a8 <_dtoa_r+0x718>
 800670e:	4b45      	ldr	r3, [pc, #276]	; (8006824 <_dtoa_r+0x594>)
 8006710:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006714:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006718:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800671c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800671e:	2b00      	cmp	r3, #0
 8006720:	f280 80da 	bge.w	80068d8 <_dtoa_r+0x648>
 8006724:	9b08      	ldr	r3, [sp, #32]
 8006726:	2b00      	cmp	r3, #0
 8006728:	f300 80d6 	bgt.w	80068d8 <_dtoa_r+0x648>
 800672c:	f040 826b 	bne.w	8006c06 <_dtoa_r+0x976>
 8006730:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006734:	2200      	movs	r2, #0
 8006736:	4b40      	ldr	r3, [pc, #256]	; (8006838 <_dtoa_r+0x5a8>)
 8006738:	f7f9 fece 	bl	80004d8 <__aeabi_dmul>
 800673c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006740:	f7fa f950 	bl	80009e4 <__aeabi_dcmpge>
 8006744:	9c08      	ldr	r4, [sp, #32]
 8006746:	4626      	mov	r6, r4
 8006748:	2800      	cmp	r0, #0
 800674a:	f040 8241 	bne.w	8006bd0 <_dtoa_r+0x940>
 800674e:	2331      	movs	r3, #49	; 0x31
 8006750:	9f03      	ldr	r7, [sp, #12]
 8006752:	f10b 0b01 	add.w	fp, fp, #1
 8006756:	f807 3b01 	strb.w	r3, [r7], #1
 800675a:	e23d      	b.n	8006bd8 <_dtoa_r+0x948>
 800675c:	07e2      	lsls	r2, r4, #31
 800675e:	d505      	bpl.n	800676c <_dtoa_r+0x4dc>
 8006760:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006764:	f7f9 feb8 	bl	80004d8 <__aeabi_dmul>
 8006768:	2301      	movs	r3, #1
 800676a:	3701      	adds	r7, #1
 800676c:	1064      	asrs	r4, r4, #1
 800676e:	3608      	adds	r6, #8
 8006770:	e76d      	b.n	800664e <_dtoa_r+0x3be>
 8006772:	2702      	movs	r7, #2
 8006774:	e770      	b.n	8006658 <_dtoa_r+0x3c8>
 8006776:	46d8      	mov	r8, fp
 8006778:	9c08      	ldr	r4, [sp, #32]
 800677a:	e78f      	b.n	800669c <_dtoa_r+0x40c>
 800677c:	9903      	ldr	r1, [sp, #12]
 800677e:	4b29      	ldr	r3, [pc, #164]	; (8006824 <_dtoa_r+0x594>)
 8006780:	4421      	add	r1, r4
 8006782:	9112      	str	r1, [sp, #72]	; 0x48
 8006784:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006786:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800678a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800678e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006792:	2900      	cmp	r1, #0
 8006794:	d054      	beq.n	8006840 <_dtoa_r+0x5b0>
 8006796:	2000      	movs	r0, #0
 8006798:	4928      	ldr	r1, [pc, #160]	; (800683c <_dtoa_r+0x5ac>)
 800679a:	f7f9 ffc7 	bl	800072c <__aeabi_ddiv>
 800679e:	463b      	mov	r3, r7
 80067a0:	4632      	mov	r2, r6
 80067a2:	f7f9 fce1 	bl	8000168 <__aeabi_dsub>
 80067a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067aa:	9f03      	ldr	r7, [sp, #12]
 80067ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067b0:	f7fa f942 	bl	8000a38 <__aeabi_d2iz>
 80067b4:	4604      	mov	r4, r0
 80067b6:	f7f9 fe25 	bl	8000404 <__aeabi_i2d>
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067c2:	f7f9 fcd1 	bl	8000168 <__aeabi_dsub>
 80067c6:	4602      	mov	r2, r0
 80067c8:	460b      	mov	r3, r1
 80067ca:	3430      	adds	r4, #48	; 0x30
 80067cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80067d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067d4:	f807 4b01 	strb.w	r4, [r7], #1
 80067d8:	f7fa f8f0 	bl	80009bc <__aeabi_dcmplt>
 80067dc:	2800      	cmp	r0, #0
 80067de:	d173      	bne.n	80068c8 <_dtoa_r+0x638>
 80067e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067e4:	2000      	movs	r0, #0
 80067e6:	4911      	ldr	r1, [pc, #68]	; (800682c <_dtoa_r+0x59c>)
 80067e8:	f7f9 fcbe 	bl	8000168 <__aeabi_dsub>
 80067ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067f0:	f7fa f8e4 	bl	80009bc <__aeabi_dcmplt>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	f040 80b6 	bne.w	8006966 <_dtoa_r+0x6d6>
 80067fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067fc:	429f      	cmp	r7, r3
 80067fe:	f43f af7a 	beq.w	80066f6 <_dtoa_r+0x466>
 8006802:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006806:	2200      	movs	r2, #0
 8006808:	4b09      	ldr	r3, [pc, #36]	; (8006830 <_dtoa_r+0x5a0>)
 800680a:	f7f9 fe65 	bl	80004d8 <__aeabi_dmul>
 800680e:	2200      	movs	r2, #0
 8006810:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006814:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006818:	4b05      	ldr	r3, [pc, #20]	; (8006830 <_dtoa_r+0x5a0>)
 800681a:	f7f9 fe5d 	bl	80004d8 <__aeabi_dmul>
 800681e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006822:	e7c3      	b.n	80067ac <_dtoa_r+0x51c>
 8006824:	08008ab0 	.word	0x08008ab0
 8006828:	08008a88 	.word	0x08008a88
 800682c:	3ff00000 	.word	0x3ff00000
 8006830:	40240000 	.word	0x40240000
 8006834:	401c0000 	.word	0x401c0000
 8006838:	40140000 	.word	0x40140000
 800683c:	3fe00000 	.word	0x3fe00000
 8006840:	4630      	mov	r0, r6
 8006842:	4639      	mov	r1, r7
 8006844:	f7f9 fe48 	bl	80004d8 <__aeabi_dmul>
 8006848:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800684a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800684e:	9c03      	ldr	r4, [sp, #12]
 8006850:	9314      	str	r3, [sp, #80]	; 0x50
 8006852:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006856:	f7fa f8ef 	bl	8000a38 <__aeabi_d2iz>
 800685a:	9015      	str	r0, [sp, #84]	; 0x54
 800685c:	f7f9 fdd2 	bl	8000404 <__aeabi_i2d>
 8006860:	4602      	mov	r2, r0
 8006862:	460b      	mov	r3, r1
 8006864:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006868:	f7f9 fc7e 	bl	8000168 <__aeabi_dsub>
 800686c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800686e:	4606      	mov	r6, r0
 8006870:	3330      	adds	r3, #48	; 0x30
 8006872:	f804 3b01 	strb.w	r3, [r4], #1
 8006876:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006878:	460f      	mov	r7, r1
 800687a:	429c      	cmp	r4, r3
 800687c:	f04f 0200 	mov.w	r2, #0
 8006880:	d124      	bne.n	80068cc <_dtoa_r+0x63c>
 8006882:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006886:	4baf      	ldr	r3, [pc, #700]	; (8006b44 <_dtoa_r+0x8b4>)
 8006888:	f7f9 fc70 	bl	800016c <__adddf3>
 800688c:	4602      	mov	r2, r0
 800688e:	460b      	mov	r3, r1
 8006890:	4630      	mov	r0, r6
 8006892:	4639      	mov	r1, r7
 8006894:	f7fa f8b0 	bl	80009f8 <__aeabi_dcmpgt>
 8006898:	2800      	cmp	r0, #0
 800689a:	d163      	bne.n	8006964 <_dtoa_r+0x6d4>
 800689c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068a0:	2000      	movs	r0, #0
 80068a2:	49a8      	ldr	r1, [pc, #672]	; (8006b44 <_dtoa_r+0x8b4>)
 80068a4:	f7f9 fc60 	bl	8000168 <__aeabi_dsub>
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	4630      	mov	r0, r6
 80068ae:	4639      	mov	r1, r7
 80068b0:	f7fa f884 	bl	80009bc <__aeabi_dcmplt>
 80068b4:	2800      	cmp	r0, #0
 80068b6:	f43f af1e 	beq.w	80066f6 <_dtoa_r+0x466>
 80068ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80068bc:	1e7b      	subs	r3, r7, #1
 80068be:	9314      	str	r3, [sp, #80]	; 0x50
 80068c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80068c4:	2b30      	cmp	r3, #48	; 0x30
 80068c6:	d0f8      	beq.n	80068ba <_dtoa_r+0x62a>
 80068c8:	46c3      	mov	fp, r8
 80068ca:	e03b      	b.n	8006944 <_dtoa_r+0x6b4>
 80068cc:	4b9e      	ldr	r3, [pc, #632]	; (8006b48 <_dtoa_r+0x8b8>)
 80068ce:	f7f9 fe03 	bl	80004d8 <__aeabi_dmul>
 80068d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068d6:	e7bc      	b.n	8006852 <_dtoa_r+0x5c2>
 80068d8:	9f03      	ldr	r7, [sp, #12]
 80068da:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80068de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068e2:	4640      	mov	r0, r8
 80068e4:	4649      	mov	r1, r9
 80068e6:	f7f9 ff21 	bl	800072c <__aeabi_ddiv>
 80068ea:	f7fa f8a5 	bl	8000a38 <__aeabi_d2iz>
 80068ee:	4604      	mov	r4, r0
 80068f0:	f7f9 fd88 	bl	8000404 <__aeabi_i2d>
 80068f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068f8:	f7f9 fdee 	bl	80004d8 <__aeabi_dmul>
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	4640      	mov	r0, r8
 8006902:	4649      	mov	r1, r9
 8006904:	f7f9 fc30 	bl	8000168 <__aeabi_dsub>
 8006908:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800690c:	f807 6b01 	strb.w	r6, [r7], #1
 8006910:	9e03      	ldr	r6, [sp, #12]
 8006912:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006916:	1bbe      	subs	r6, r7, r6
 8006918:	45b4      	cmp	ip, r6
 800691a:	4602      	mov	r2, r0
 800691c:	460b      	mov	r3, r1
 800691e:	d136      	bne.n	800698e <_dtoa_r+0x6fe>
 8006920:	f7f9 fc24 	bl	800016c <__adddf3>
 8006924:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006928:	4680      	mov	r8, r0
 800692a:	4689      	mov	r9, r1
 800692c:	f7fa f864 	bl	80009f8 <__aeabi_dcmpgt>
 8006930:	bb58      	cbnz	r0, 800698a <_dtoa_r+0x6fa>
 8006932:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006936:	4640      	mov	r0, r8
 8006938:	4649      	mov	r1, r9
 800693a:	f7fa f835 	bl	80009a8 <__aeabi_dcmpeq>
 800693e:	b108      	cbz	r0, 8006944 <_dtoa_r+0x6b4>
 8006940:	07e3      	lsls	r3, r4, #31
 8006942:	d422      	bmi.n	800698a <_dtoa_r+0x6fa>
 8006944:	4651      	mov	r1, sl
 8006946:	4628      	mov	r0, r5
 8006948:	f000 ff2e 	bl	80077a8 <_Bfree>
 800694c:	2300      	movs	r3, #0
 800694e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006950:	703b      	strb	r3, [r7, #0]
 8006952:	f10b 0301 	add.w	r3, fp, #1
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800695a:	2b00      	cmp	r3, #0
 800695c:	f43f ace6 	beq.w	800632c <_dtoa_r+0x9c>
 8006960:	601f      	str	r7, [r3, #0]
 8006962:	e4e3      	b.n	800632c <_dtoa_r+0x9c>
 8006964:	4627      	mov	r7, r4
 8006966:	463b      	mov	r3, r7
 8006968:	461f      	mov	r7, r3
 800696a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800696e:	2a39      	cmp	r2, #57	; 0x39
 8006970:	d107      	bne.n	8006982 <_dtoa_r+0x6f2>
 8006972:	9a03      	ldr	r2, [sp, #12]
 8006974:	429a      	cmp	r2, r3
 8006976:	d1f7      	bne.n	8006968 <_dtoa_r+0x6d8>
 8006978:	2230      	movs	r2, #48	; 0x30
 800697a:	9903      	ldr	r1, [sp, #12]
 800697c:	f108 0801 	add.w	r8, r8, #1
 8006980:	700a      	strb	r2, [r1, #0]
 8006982:	781a      	ldrb	r2, [r3, #0]
 8006984:	3201      	adds	r2, #1
 8006986:	701a      	strb	r2, [r3, #0]
 8006988:	e79e      	b.n	80068c8 <_dtoa_r+0x638>
 800698a:	46d8      	mov	r8, fp
 800698c:	e7eb      	b.n	8006966 <_dtoa_r+0x6d6>
 800698e:	2200      	movs	r2, #0
 8006990:	4b6d      	ldr	r3, [pc, #436]	; (8006b48 <_dtoa_r+0x8b8>)
 8006992:	f7f9 fda1 	bl	80004d8 <__aeabi_dmul>
 8006996:	2200      	movs	r2, #0
 8006998:	2300      	movs	r3, #0
 800699a:	4680      	mov	r8, r0
 800699c:	4689      	mov	r9, r1
 800699e:	f7fa f803 	bl	80009a8 <__aeabi_dcmpeq>
 80069a2:	2800      	cmp	r0, #0
 80069a4:	d09b      	beq.n	80068de <_dtoa_r+0x64e>
 80069a6:	e7cd      	b.n	8006944 <_dtoa_r+0x6b4>
 80069a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069aa:	2a00      	cmp	r2, #0
 80069ac:	f000 80c4 	beq.w	8006b38 <_dtoa_r+0x8a8>
 80069b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80069b2:	2a01      	cmp	r2, #1
 80069b4:	f300 80a8 	bgt.w	8006b08 <_dtoa_r+0x878>
 80069b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80069ba:	2a00      	cmp	r2, #0
 80069bc:	f000 80a0 	beq.w	8006b00 <_dtoa_r+0x870>
 80069c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80069c4:	464f      	mov	r7, r9
 80069c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80069c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069ca:	2101      	movs	r1, #1
 80069cc:	441a      	add	r2, r3
 80069ce:	4628      	mov	r0, r5
 80069d0:	4499      	add	r9, r3
 80069d2:	9209      	str	r2, [sp, #36]	; 0x24
 80069d4:	f000 ffe8 	bl	80079a8 <__i2b>
 80069d8:	4606      	mov	r6, r0
 80069da:	b15f      	cbz	r7, 80069f4 <_dtoa_r+0x764>
 80069dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069de:	2b00      	cmp	r3, #0
 80069e0:	dd08      	ble.n	80069f4 <_dtoa_r+0x764>
 80069e2:	42bb      	cmp	r3, r7
 80069e4:	bfa8      	it	ge
 80069e6:	463b      	movge	r3, r7
 80069e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069ea:	eba9 0903 	sub.w	r9, r9, r3
 80069ee:	1aff      	subs	r7, r7, r3
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	9309      	str	r3, [sp, #36]	; 0x24
 80069f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069f6:	b1f3      	cbz	r3, 8006a36 <_dtoa_r+0x7a6>
 80069f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f000 80a0 	beq.w	8006b40 <_dtoa_r+0x8b0>
 8006a00:	2c00      	cmp	r4, #0
 8006a02:	dd10      	ble.n	8006a26 <_dtoa_r+0x796>
 8006a04:	4631      	mov	r1, r6
 8006a06:	4622      	mov	r2, r4
 8006a08:	4628      	mov	r0, r5
 8006a0a:	f001 f88b 	bl	8007b24 <__pow5mult>
 8006a0e:	4652      	mov	r2, sl
 8006a10:	4601      	mov	r1, r0
 8006a12:	4606      	mov	r6, r0
 8006a14:	4628      	mov	r0, r5
 8006a16:	f000 ffdd 	bl	80079d4 <__multiply>
 8006a1a:	4680      	mov	r8, r0
 8006a1c:	4651      	mov	r1, sl
 8006a1e:	4628      	mov	r0, r5
 8006a20:	f000 fec2 	bl	80077a8 <_Bfree>
 8006a24:	46c2      	mov	sl, r8
 8006a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a28:	1b1a      	subs	r2, r3, r4
 8006a2a:	d004      	beq.n	8006a36 <_dtoa_r+0x7a6>
 8006a2c:	4651      	mov	r1, sl
 8006a2e:	4628      	mov	r0, r5
 8006a30:	f001 f878 	bl	8007b24 <__pow5mult>
 8006a34:	4682      	mov	sl, r0
 8006a36:	2101      	movs	r1, #1
 8006a38:	4628      	mov	r0, r5
 8006a3a:	f000 ffb5 	bl	80079a8 <__i2b>
 8006a3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a40:	4604      	mov	r4, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f340 8082 	ble.w	8006b4c <_dtoa_r+0x8bc>
 8006a48:	461a      	mov	r2, r3
 8006a4a:	4601      	mov	r1, r0
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	f001 f869 	bl	8007b24 <__pow5mult>
 8006a52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a54:	4604      	mov	r4, r0
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	dd7b      	ble.n	8006b52 <_dtoa_r+0x8c2>
 8006a5a:	f04f 0800 	mov.w	r8, #0
 8006a5e:	6923      	ldr	r3, [r4, #16]
 8006a60:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006a64:	6918      	ldr	r0, [r3, #16]
 8006a66:	f000 ff51 	bl	800790c <__hi0bits>
 8006a6a:	f1c0 0020 	rsb	r0, r0, #32
 8006a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a70:	4418      	add	r0, r3
 8006a72:	f010 001f 	ands.w	r0, r0, #31
 8006a76:	f000 8092 	beq.w	8006b9e <_dtoa_r+0x90e>
 8006a7a:	f1c0 0320 	rsb	r3, r0, #32
 8006a7e:	2b04      	cmp	r3, #4
 8006a80:	f340 8085 	ble.w	8006b8e <_dtoa_r+0x8fe>
 8006a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a86:	f1c0 001c 	rsb	r0, r0, #28
 8006a8a:	4403      	add	r3, r0
 8006a8c:	4481      	add	r9, r0
 8006a8e:	4407      	add	r7, r0
 8006a90:	9309      	str	r3, [sp, #36]	; 0x24
 8006a92:	f1b9 0f00 	cmp.w	r9, #0
 8006a96:	dd05      	ble.n	8006aa4 <_dtoa_r+0x814>
 8006a98:	4651      	mov	r1, sl
 8006a9a:	464a      	mov	r2, r9
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	f001 f89b 	bl	8007bd8 <__lshift>
 8006aa2:	4682      	mov	sl, r0
 8006aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	dd05      	ble.n	8006ab6 <_dtoa_r+0x826>
 8006aaa:	4621      	mov	r1, r4
 8006aac:	461a      	mov	r2, r3
 8006aae:	4628      	mov	r0, r5
 8006ab0:	f001 f892 	bl	8007bd8 <__lshift>
 8006ab4:	4604      	mov	r4, r0
 8006ab6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d072      	beq.n	8006ba2 <_dtoa_r+0x912>
 8006abc:	4621      	mov	r1, r4
 8006abe:	4650      	mov	r0, sl
 8006ac0:	f001 f8f6 	bl	8007cb0 <__mcmp>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	da6c      	bge.n	8006ba2 <_dtoa_r+0x912>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	4651      	mov	r1, sl
 8006acc:	220a      	movs	r2, #10
 8006ace:	4628      	mov	r0, r5
 8006ad0:	f000 fe8c 	bl	80077ec <__multadd>
 8006ad4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ad6:	4682      	mov	sl, r0
 8006ad8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 81ac 	beq.w	8006e3a <_dtoa_r+0xbaa>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	4631      	mov	r1, r6
 8006ae6:	220a      	movs	r2, #10
 8006ae8:	4628      	mov	r0, r5
 8006aea:	f000 fe7f 	bl	80077ec <__multadd>
 8006aee:	9b06      	ldr	r3, [sp, #24]
 8006af0:	4606      	mov	r6, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f300 8093 	bgt.w	8006c1e <_dtoa_r+0x98e>
 8006af8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	dc59      	bgt.n	8006bb2 <_dtoa_r+0x922>
 8006afe:	e08e      	b.n	8006c1e <_dtoa_r+0x98e>
 8006b00:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006b02:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b06:	e75d      	b.n	80069c4 <_dtoa_r+0x734>
 8006b08:	9b08      	ldr	r3, [sp, #32]
 8006b0a:	1e5c      	subs	r4, r3, #1
 8006b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b0e:	42a3      	cmp	r3, r4
 8006b10:	bfbf      	itttt	lt
 8006b12:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006b14:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006b16:	1ae3      	sublt	r3, r4, r3
 8006b18:	18d2      	addlt	r2, r2, r3
 8006b1a:	bfa8      	it	ge
 8006b1c:	1b1c      	subge	r4, r3, r4
 8006b1e:	9b08      	ldr	r3, [sp, #32]
 8006b20:	bfbe      	ittt	lt
 8006b22:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006b24:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006b26:	2400      	movlt	r4, #0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	bfb5      	itete	lt
 8006b2c:	eba9 0703 	sublt.w	r7, r9, r3
 8006b30:	464f      	movge	r7, r9
 8006b32:	2300      	movlt	r3, #0
 8006b34:	9b08      	ldrge	r3, [sp, #32]
 8006b36:	e747      	b.n	80069c8 <_dtoa_r+0x738>
 8006b38:	464f      	mov	r7, r9
 8006b3a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006b3c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006b3e:	e74c      	b.n	80069da <_dtoa_r+0x74a>
 8006b40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b42:	e773      	b.n	8006a2c <_dtoa_r+0x79c>
 8006b44:	3fe00000 	.word	0x3fe00000
 8006b48:	40240000 	.word	0x40240000
 8006b4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	dc18      	bgt.n	8006b84 <_dtoa_r+0x8f4>
 8006b52:	9b04      	ldr	r3, [sp, #16]
 8006b54:	b9b3      	cbnz	r3, 8006b84 <_dtoa_r+0x8f4>
 8006b56:	9b05      	ldr	r3, [sp, #20]
 8006b58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b5c:	b993      	cbnz	r3, 8006b84 <_dtoa_r+0x8f4>
 8006b5e:	9b05      	ldr	r3, [sp, #20]
 8006b60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b64:	0d1b      	lsrs	r3, r3, #20
 8006b66:	051b      	lsls	r3, r3, #20
 8006b68:	b17b      	cbz	r3, 8006b8a <_dtoa_r+0x8fa>
 8006b6a:	f04f 0801 	mov.w	r8, #1
 8006b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b70:	f109 0901 	add.w	r9, r9, #1
 8006b74:	3301      	adds	r3, #1
 8006b76:	9309      	str	r3, [sp, #36]	; 0x24
 8006b78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f47f af6f 	bne.w	8006a5e <_dtoa_r+0x7ce>
 8006b80:	2001      	movs	r0, #1
 8006b82:	e774      	b.n	8006a6e <_dtoa_r+0x7de>
 8006b84:	f04f 0800 	mov.w	r8, #0
 8006b88:	e7f6      	b.n	8006b78 <_dtoa_r+0x8e8>
 8006b8a:	4698      	mov	r8, r3
 8006b8c:	e7f4      	b.n	8006b78 <_dtoa_r+0x8e8>
 8006b8e:	d080      	beq.n	8006a92 <_dtoa_r+0x802>
 8006b90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b92:	331c      	adds	r3, #28
 8006b94:	441a      	add	r2, r3
 8006b96:	4499      	add	r9, r3
 8006b98:	441f      	add	r7, r3
 8006b9a:	9209      	str	r2, [sp, #36]	; 0x24
 8006b9c:	e779      	b.n	8006a92 <_dtoa_r+0x802>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	e7f6      	b.n	8006b90 <_dtoa_r+0x900>
 8006ba2:	9b08      	ldr	r3, [sp, #32]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	dc34      	bgt.n	8006c12 <_dtoa_r+0x982>
 8006ba8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	dd31      	ble.n	8006c12 <_dtoa_r+0x982>
 8006bae:	9b08      	ldr	r3, [sp, #32]
 8006bb0:	9306      	str	r3, [sp, #24]
 8006bb2:	9b06      	ldr	r3, [sp, #24]
 8006bb4:	b963      	cbnz	r3, 8006bd0 <_dtoa_r+0x940>
 8006bb6:	4621      	mov	r1, r4
 8006bb8:	2205      	movs	r2, #5
 8006bba:	4628      	mov	r0, r5
 8006bbc:	f000 fe16 	bl	80077ec <__multadd>
 8006bc0:	4601      	mov	r1, r0
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	4650      	mov	r0, sl
 8006bc6:	f001 f873 	bl	8007cb0 <__mcmp>
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	f73f adbf 	bgt.w	800674e <_dtoa_r+0x4be>
 8006bd0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006bd2:	9f03      	ldr	r7, [sp, #12]
 8006bd4:	ea6f 0b03 	mvn.w	fp, r3
 8006bd8:	f04f 0800 	mov.w	r8, #0
 8006bdc:	4621      	mov	r1, r4
 8006bde:	4628      	mov	r0, r5
 8006be0:	f000 fde2 	bl	80077a8 <_Bfree>
 8006be4:	2e00      	cmp	r6, #0
 8006be6:	f43f aead 	beq.w	8006944 <_dtoa_r+0x6b4>
 8006bea:	f1b8 0f00 	cmp.w	r8, #0
 8006bee:	d005      	beq.n	8006bfc <_dtoa_r+0x96c>
 8006bf0:	45b0      	cmp	r8, r6
 8006bf2:	d003      	beq.n	8006bfc <_dtoa_r+0x96c>
 8006bf4:	4641      	mov	r1, r8
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	f000 fdd6 	bl	80077a8 <_Bfree>
 8006bfc:	4631      	mov	r1, r6
 8006bfe:	4628      	mov	r0, r5
 8006c00:	f000 fdd2 	bl	80077a8 <_Bfree>
 8006c04:	e69e      	b.n	8006944 <_dtoa_r+0x6b4>
 8006c06:	2400      	movs	r4, #0
 8006c08:	4626      	mov	r6, r4
 8006c0a:	e7e1      	b.n	8006bd0 <_dtoa_r+0x940>
 8006c0c:	46c3      	mov	fp, r8
 8006c0e:	4626      	mov	r6, r4
 8006c10:	e59d      	b.n	800674e <_dtoa_r+0x4be>
 8006c12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 80c8 	beq.w	8006daa <_dtoa_r+0xb1a>
 8006c1a:	9b08      	ldr	r3, [sp, #32]
 8006c1c:	9306      	str	r3, [sp, #24]
 8006c1e:	2f00      	cmp	r7, #0
 8006c20:	dd05      	ble.n	8006c2e <_dtoa_r+0x99e>
 8006c22:	4631      	mov	r1, r6
 8006c24:	463a      	mov	r2, r7
 8006c26:	4628      	mov	r0, r5
 8006c28:	f000 ffd6 	bl	8007bd8 <__lshift>
 8006c2c:	4606      	mov	r6, r0
 8006c2e:	f1b8 0f00 	cmp.w	r8, #0
 8006c32:	d05b      	beq.n	8006cec <_dtoa_r+0xa5c>
 8006c34:	4628      	mov	r0, r5
 8006c36:	6871      	ldr	r1, [r6, #4]
 8006c38:	f000 fd76 	bl	8007728 <_Balloc>
 8006c3c:	4607      	mov	r7, r0
 8006c3e:	b928      	cbnz	r0, 8006c4c <_dtoa_r+0x9bc>
 8006c40:	4602      	mov	r2, r0
 8006c42:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006c46:	4b81      	ldr	r3, [pc, #516]	; (8006e4c <_dtoa_r+0xbbc>)
 8006c48:	f7ff bb36 	b.w	80062b8 <_dtoa_r+0x28>
 8006c4c:	6932      	ldr	r2, [r6, #16]
 8006c4e:	f106 010c 	add.w	r1, r6, #12
 8006c52:	3202      	adds	r2, #2
 8006c54:	0092      	lsls	r2, r2, #2
 8006c56:	300c      	adds	r0, #12
 8006c58:	f7ff fa75 	bl	8006146 <memcpy>
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	4639      	mov	r1, r7
 8006c60:	4628      	mov	r0, r5
 8006c62:	f000 ffb9 	bl	8007bd8 <__lshift>
 8006c66:	46b0      	mov	r8, r6
 8006c68:	4606      	mov	r6, r0
 8006c6a:	9b03      	ldr	r3, [sp, #12]
 8006c6c:	9a03      	ldr	r2, [sp, #12]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	9308      	str	r3, [sp, #32]
 8006c72:	9b06      	ldr	r3, [sp, #24]
 8006c74:	4413      	add	r3, r2
 8006c76:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c78:	9b04      	ldr	r3, [sp, #16]
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	930a      	str	r3, [sp, #40]	; 0x28
 8006c80:	9b08      	ldr	r3, [sp, #32]
 8006c82:	4621      	mov	r1, r4
 8006c84:	3b01      	subs	r3, #1
 8006c86:	4650      	mov	r0, sl
 8006c88:	9304      	str	r3, [sp, #16]
 8006c8a:	f7ff fa78 	bl	800617e <quorem>
 8006c8e:	4641      	mov	r1, r8
 8006c90:	9006      	str	r0, [sp, #24]
 8006c92:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006c96:	4650      	mov	r0, sl
 8006c98:	f001 f80a 	bl	8007cb0 <__mcmp>
 8006c9c:	4632      	mov	r2, r6
 8006c9e:	9009      	str	r0, [sp, #36]	; 0x24
 8006ca0:	4621      	mov	r1, r4
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	f001 f820 	bl	8007ce8 <__mdiff>
 8006ca8:	68c2      	ldr	r2, [r0, #12]
 8006caa:	4607      	mov	r7, r0
 8006cac:	bb02      	cbnz	r2, 8006cf0 <_dtoa_r+0xa60>
 8006cae:	4601      	mov	r1, r0
 8006cb0:	4650      	mov	r0, sl
 8006cb2:	f000 fffd 	bl	8007cb0 <__mcmp>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	4639      	mov	r1, r7
 8006cba:	4628      	mov	r0, r5
 8006cbc:	920c      	str	r2, [sp, #48]	; 0x30
 8006cbe:	f000 fd73 	bl	80077a8 <_Bfree>
 8006cc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cc6:	9f08      	ldr	r7, [sp, #32]
 8006cc8:	ea43 0102 	orr.w	r1, r3, r2
 8006ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cce:	4319      	orrs	r1, r3
 8006cd0:	d110      	bne.n	8006cf4 <_dtoa_r+0xa64>
 8006cd2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006cd6:	d029      	beq.n	8006d2c <_dtoa_r+0xa9c>
 8006cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	dd02      	ble.n	8006ce4 <_dtoa_r+0xa54>
 8006cde:	9b06      	ldr	r3, [sp, #24]
 8006ce0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006ce4:	9b04      	ldr	r3, [sp, #16]
 8006ce6:	f883 9000 	strb.w	r9, [r3]
 8006cea:	e777      	b.n	8006bdc <_dtoa_r+0x94c>
 8006cec:	4630      	mov	r0, r6
 8006cee:	e7ba      	b.n	8006c66 <_dtoa_r+0x9d6>
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	e7e1      	b.n	8006cb8 <_dtoa_r+0xa28>
 8006cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	db04      	blt.n	8006d04 <_dtoa_r+0xa74>
 8006cfa:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006cfc:	430b      	orrs	r3, r1
 8006cfe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006d00:	430b      	orrs	r3, r1
 8006d02:	d120      	bne.n	8006d46 <_dtoa_r+0xab6>
 8006d04:	2a00      	cmp	r2, #0
 8006d06:	dded      	ble.n	8006ce4 <_dtoa_r+0xa54>
 8006d08:	4651      	mov	r1, sl
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	f000 ff63 	bl	8007bd8 <__lshift>
 8006d12:	4621      	mov	r1, r4
 8006d14:	4682      	mov	sl, r0
 8006d16:	f000 ffcb 	bl	8007cb0 <__mcmp>
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	dc03      	bgt.n	8006d26 <_dtoa_r+0xa96>
 8006d1e:	d1e1      	bne.n	8006ce4 <_dtoa_r+0xa54>
 8006d20:	f019 0f01 	tst.w	r9, #1
 8006d24:	d0de      	beq.n	8006ce4 <_dtoa_r+0xa54>
 8006d26:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d2a:	d1d8      	bne.n	8006cde <_dtoa_r+0xa4e>
 8006d2c:	2339      	movs	r3, #57	; 0x39
 8006d2e:	9a04      	ldr	r2, [sp, #16]
 8006d30:	7013      	strb	r3, [r2, #0]
 8006d32:	463b      	mov	r3, r7
 8006d34:	461f      	mov	r7, r3
 8006d36:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	2a39      	cmp	r2, #57	; 0x39
 8006d3e:	d06b      	beq.n	8006e18 <_dtoa_r+0xb88>
 8006d40:	3201      	adds	r2, #1
 8006d42:	701a      	strb	r2, [r3, #0]
 8006d44:	e74a      	b.n	8006bdc <_dtoa_r+0x94c>
 8006d46:	2a00      	cmp	r2, #0
 8006d48:	dd07      	ble.n	8006d5a <_dtoa_r+0xaca>
 8006d4a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d4e:	d0ed      	beq.n	8006d2c <_dtoa_r+0xa9c>
 8006d50:	9a04      	ldr	r2, [sp, #16]
 8006d52:	f109 0301 	add.w	r3, r9, #1
 8006d56:	7013      	strb	r3, [r2, #0]
 8006d58:	e740      	b.n	8006bdc <_dtoa_r+0x94c>
 8006d5a:	9b08      	ldr	r3, [sp, #32]
 8006d5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d5e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d042      	beq.n	8006dec <_dtoa_r+0xb5c>
 8006d66:	4651      	mov	r1, sl
 8006d68:	2300      	movs	r3, #0
 8006d6a:	220a      	movs	r2, #10
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	f000 fd3d 	bl	80077ec <__multadd>
 8006d72:	45b0      	cmp	r8, r6
 8006d74:	4682      	mov	sl, r0
 8006d76:	f04f 0300 	mov.w	r3, #0
 8006d7a:	f04f 020a 	mov.w	r2, #10
 8006d7e:	4641      	mov	r1, r8
 8006d80:	4628      	mov	r0, r5
 8006d82:	d107      	bne.n	8006d94 <_dtoa_r+0xb04>
 8006d84:	f000 fd32 	bl	80077ec <__multadd>
 8006d88:	4680      	mov	r8, r0
 8006d8a:	4606      	mov	r6, r0
 8006d8c:	9b08      	ldr	r3, [sp, #32]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	9308      	str	r3, [sp, #32]
 8006d92:	e775      	b.n	8006c80 <_dtoa_r+0x9f0>
 8006d94:	f000 fd2a 	bl	80077ec <__multadd>
 8006d98:	4631      	mov	r1, r6
 8006d9a:	4680      	mov	r8, r0
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	220a      	movs	r2, #10
 8006da0:	4628      	mov	r0, r5
 8006da2:	f000 fd23 	bl	80077ec <__multadd>
 8006da6:	4606      	mov	r6, r0
 8006da8:	e7f0      	b.n	8006d8c <_dtoa_r+0xafc>
 8006daa:	9b08      	ldr	r3, [sp, #32]
 8006dac:	9306      	str	r3, [sp, #24]
 8006dae:	9f03      	ldr	r7, [sp, #12]
 8006db0:	4621      	mov	r1, r4
 8006db2:	4650      	mov	r0, sl
 8006db4:	f7ff f9e3 	bl	800617e <quorem>
 8006db8:	9b03      	ldr	r3, [sp, #12]
 8006dba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006dbe:	f807 9b01 	strb.w	r9, [r7], #1
 8006dc2:	1afa      	subs	r2, r7, r3
 8006dc4:	9b06      	ldr	r3, [sp, #24]
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	dd07      	ble.n	8006dda <_dtoa_r+0xb4a>
 8006dca:	4651      	mov	r1, sl
 8006dcc:	2300      	movs	r3, #0
 8006dce:	220a      	movs	r2, #10
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	f000 fd0b 	bl	80077ec <__multadd>
 8006dd6:	4682      	mov	sl, r0
 8006dd8:	e7ea      	b.n	8006db0 <_dtoa_r+0xb20>
 8006dda:	9b06      	ldr	r3, [sp, #24]
 8006ddc:	f04f 0800 	mov.w	r8, #0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	bfcc      	ite	gt
 8006de4:	461f      	movgt	r7, r3
 8006de6:	2701      	movle	r7, #1
 8006de8:	9b03      	ldr	r3, [sp, #12]
 8006dea:	441f      	add	r7, r3
 8006dec:	4651      	mov	r1, sl
 8006dee:	2201      	movs	r2, #1
 8006df0:	4628      	mov	r0, r5
 8006df2:	f000 fef1 	bl	8007bd8 <__lshift>
 8006df6:	4621      	mov	r1, r4
 8006df8:	4682      	mov	sl, r0
 8006dfa:	f000 ff59 	bl	8007cb0 <__mcmp>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	dc97      	bgt.n	8006d32 <_dtoa_r+0xaa2>
 8006e02:	d102      	bne.n	8006e0a <_dtoa_r+0xb7a>
 8006e04:	f019 0f01 	tst.w	r9, #1
 8006e08:	d193      	bne.n	8006d32 <_dtoa_r+0xaa2>
 8006e0a:	463b      	mov	r3, r7
 8006e0c:	461f      	mov	r7, r3
 8006e0e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e12:	2a30      	cmp	r2, #48	; 0x30
 8006e14:	d0fa      	beq.n	8006e0c <_dtoa_r+0xb7c>
 8006e16:	e6e1      	b.n	8006bdc <_dtoa_r+0x94c>
 8006e18:	9a03      	ldr	r2, [sp, #12]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d18a      	bne.n	8006d34 <_dtoa_r+0xaa4>
 8006e1e:	2331      	movs	r3, #49	; 0x31
 8006e20:	f10b 0b01 	add.w	fp, fp, #1
 8006e24:	e797      	b.n	8006d56 <_dtoa_r+0xac6>
 8006e26:	4b0a      	ldr	r3, [pc, #40]	; (8006e50 <_dtoa_r+0xbc0>)
 8006e28:	f7ff ba9f 	b.w	800636a <_dtoa_r+0xda>
 8006e2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f47f aa77 	bne.w	8006322 <_dtoa_r+0x92>
 8006e34:	4b07      	ldr	r3, [pc, #28]	; (8006e54 <_dtoa_r+0xbc4>)
 8006e36:	f7ff ba98 	b.w	800636a <_dtoa_r+0xda>
 8006e3a:	9b06      	ldr	r3, [sp, #24]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	dcb6      	bgt.n	8006dae <_dtoa_r+0xb1e>
 8006e40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	f73f aeb5 	bgt.w	8006bb2 <_dtoa_r+0x922>
 8006e48:	e7b1      	b.n	8006dae <_dtoa_r+0xb1e>
 8006e4a:	bf00      	nop
 8006e4c:	080089b8 	.word	0x080089b8
 8006e50:	08008910 	.word	0x08008910
 8006e54:	0800893c 	.word	0x0800893c

08006e58 <_free_r>:
 8006e58:	b538      	push	{r3, r4, r5, lr}
 8006e5a:	4605      	mov	r5, r0
 8006e5c:	2900      	cmp	r1, #0
 8006e5e:	d040      	beq.n	8006ee2 <_free_r+0x8a>
 8006e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e64:	1f0c      	subs	r4, r1, #4
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	bfb8      	it	lt
 8006e6a:	18e4      	addlt	r4, r4, r3
 8006e6c:	f000 fc50 	bl	8007710 <__malloc_lock>
 8006e70:	4a1c      	ldr	r2, [pc, #112]	; (8006ee4 <_free_r+0x8c>)
 8006e72:	6813      	ldr	r3, [r2, #0]
 8006e74:	b933      	cbnz	r3, 8006e84 <_free_r+0x2c>
 8006e76:	6063      	str	r3, [r4, #4]
 8006e78:	6014      	str	r4, [r2, #0]
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e80:	f000 bc4c 	b.w	800771c <__malloc_unlock>
 8006e84:	42a3      	cmp	r3, r4
 8006e86:	d908      	bls.n	8006e9a <_free_r+0x42>
 8006e88:	6820      	ldr	r0, [r4, #0]
 8006e8a:	1821      	adds	r1, r4, r0
 8006e8c:	428b      	cmp	r3, r1
 8006e8e:	bf01      	itttt	eq
 8006e90:	6819      	ldreq	r1, [r3, #0]
 8006e92:	685b      	ldreq	r3, [r3, #4]
 8006e94:	1809      	addeq	r1, r1, r0
 8006e96:	6021      	streq	r1, [r4, #0]
 8006e98:	e7ed      	b.n	8006e76 <_free_r+0x1e>
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	b10b      	cbz	r3, 8006ea4 <_free_r+0x4c>
 8006ea0:	42a3      	cmp	r3, r4
 8006ea2:	d9fa      	bls.n	8006e9a <_free_r+0x42>
 8006ea4:	6811      	ldr	r1, [r2, #0]
 8006ea6:	1850      	adds	r0, r2, r1
 8006ea8:	42a0      	cmp	r0, r4
 8006eaa:	d10b      	bne.n	8006ec4 <_free_r+0x6c>
 8006eac:	6820      	ldr	r0, [r4, #0]
 8006eae:	4401      	add	r1, r0
 8006eb0:	1850      	adds	r0, r2, r1
 8006eb2:	4283      	cmp	r3, r0
 8006eb4:	6011      	str	r1, [r2, #0]
 8006eb6:	d1e0      	bne.n	8006e7a <_free_r+0x22>
 8006eb8:	6818      	ldr	r0, [r3, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	4408      	add	r0, r1
 8006ebe:	6010      	str	r0, [r2, #0]
 8006ec0:	6053      	str	r3, [r2, #4]
 8006ec2:	e7da      	b.n	8006e7a <_free_r+0x22>
 8006ec4:	d902      	bls.n	8006ecc <_free_r+0x74>
 8006ec6:	230c      	movs	r3, #12
 8006ec8:	602b      	str	r3, [r5, #0]
 8006eca:	e7d6      	b.n	8006e7a <_free_r+0x22>
 8006ecc:	6820      	ldr	r0, [r4, #0]
 8006ece:	1821      	adds	r1, r4, r0
 8006ed0:	428b      	cmp	r3, r1
 8006ed2:	bf01      	itttt	eq
 8006ed4:	6819      	ldreq	r1, [r3, #0]
 8006ed6:	685b      	ldreq	r3, [r3, #4]
 8006ed8:	1809      	addeq	r1, r1, r0
 8006eda:	6021      	streq	r1, [r4, #0]
 8006edc:	6063      	str	r3, [r4, #4]
 8006ede:	6054      	str	r4, [r2, #4]
 8006ee0:	e7cb      	b.n	8006e7a <_free_r+0x22>
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}
 8006ee4:	20000bd4 	.word	0x20000bd4

08006ee8 <rshift>:
 8006ee8:	6903      	ldr	r3, [r0, #16]
 8006eea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006eee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006ef2:	f100 0414 	add.w	r4, r0, #20
 8006ef6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006efa:	dd46      	ble.n	8006f8a <rshift+0xa2>
 8006efc:	f011 011f 	ands.w	r1, r1, #31
 8006f00:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006f04:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006f08:	d10c      	bne.n	8006f24 <rshift+0x3c>
 8006f0a:	4629      	mov	r1, r5
 8006f0c:	f100 0710 	add.w	r7, r0, #16
 8006f10:	42b1      	cmp	r1, r6
 8006f12:	d335      	bcc.n	8006f80 <rshift+0x98>
 8006f14:	1a9b      	subs	r3, r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	1eea      	subs	r2, r5, #3
 8006f1a:	4296      	cmp	r6, r2
 8006f1c:	bf38      	it	cc
 8006f1e:	2300      	movcc	r3, #0
 8006f20:	4423      	add	r3, r4
 8006f22:	e015      	b.n	8006f50 <rshift+0x68>
 8006f24:	46a1      	mov	r9, r4
 8006f26:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006f2a:	f1c1 0820 	rsb	r8, r1, #32
 8006f2e:	40cf      	lsrs	r7, r1
 8006f30:	f105 0e04 	add.w	lr, r5, #4
 8006f34:	4576      	cmp	r6, lr
 8006f36:	46f4      	mov	ip, lr
 8006f38:	d816      	bhi.n	8006f68 <rshift+0x80>
 8006f3a:	1a9a      	subs	r2, r3, r2
 8006f3c:	0092      	lsls	r2, r2, #2
 8006f3e:	3a04      	subs	r2, #4
 8006f40:	3501      	adds	r5, #1
 8006f42:	42ae      	cmp	r6, r5
 8006f44:	bf38      	it	cc
 8006f46:	2200      	movcc	r2, #0
 8006f48:	18a3      	adds	r3, r4, r2
 8006f4a:	50a7      	str	r7, [r4, r2]
 8006f4c:	b107      	cbz	r7, 8006f50 <rshift+0x68>
 8006f4e:	3304      	adds	r3, #4
 8006f50:	42a3      	cmp	r3, r4
 8006f52:	eba3 0204 	sub.w	r2, r3, r4
 8006f56:	bf08      	it	eq
 8006f58:	2300      	moveq	r3, #0
 8006f5a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006f5e:	6102      	str	r2, [r0, #16]
 8006f60:	bf08      	it	eq
 8006f62:	6143      	streq	r3, [r0, #20]
 8006f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f68:	f8dc c000 	ldr.w	ip, [ip]
 8006f6c:	fa0c fc08 	lsl.w	ip, ip, r8
 8006f70:	ea4c 0707 	orr.w	r7, ip, r7
 8006f74:	f849 7b04 	str.w	r7, [r9], #4
 8006f78:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006f7c:	40cf      	lsrs	r7, r1
 8006f7e:	e7d9      	b.n	8006f34 <rshift+0x4c>
 8006f80:	f851 cb04 	ldr.w	ip, [r1], #4
 8006f84:	f847 cf04 	str.w	ip, [r7, #4]!
 8006f88:	e7c2      	b.n	8006f10 <rshift+0x28>
 8006f8a:	4623      	mov	r3, r4
 8006f8c:	e7e0      	b.n	8006f50 <rshift+0x68>

08006f8e <__hexdig_fun>:
 8006f8e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006f92:	2b09      	cmp	r3, #9
 8006f94:	d802      	bhi.n	8006f9c <__hexdig_fun+0xe>
 8006f96:	3820      	subs	r0, #32
 8006f98:	b2c0      	uxtb	r0, r0
 8006f9a:	4770      	bx	lr
 8006f9c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006fa0:	2b05      	cmp	r3, #5
 8006fa2:	d801      	bhi.n	8006fa8 <__hexdig_fun+0x1a>
 8006fa4:	3847      	subs	r0, #71	; 0x47
 8006fa6:	e7f7      	b.n	8006f98 <__hexdig_fun+0xa>
 8006fa8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006fac:	2b05      	cmp	r3, #5
 8006fae:	d801      	bhi.n	8006fb4 <__hexdig_fun+0x26>
 8006fb0:	3827      	subs	r0, #39	; 0x27
 8006fb2:	e7f1      	b.n	8006f98 <__hexdig_fun+0xa>
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	4770      	bx	lr

08006fb8 <__gethex>:
 8006fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fbc:	4681      	mov	r9, r0
 8006fbe:	468a      	mov	sl, r1
 8006fc0:	4617      	mov	r7, r2
 8006fc2:	680a      	ldr	r2, [r1, #0]
 8006fc4:	b085      	sub	sp, #20
 8006fc6:	f102 0b02 	add.w	fp, r2, #2
 8006fca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006fce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006fd2:	9302      	str	r3, [sp, #8]
 8006fd4:	32fe      	adds	r2, #254	; 0xfe
 8006fd6:	eb02 030b 	add.w	r3, r2, fp
 8006fda:	46d8      	mov	r8, fp
 8006fdc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8006fe0:	9301      	str	r3, [sp, #4]
 8006fe2:	2830      	cmp	r0, #48	; 0x30
 8006fe4:	d0f7      	beq.n	8006fd6 <__gethex+0x1e>
 8006fe6:	f7ff ffd2 	bl	8006f8e <__hexdig_fun>
 8006fea:	4604      	mov	r4, r0
 8006fec:	2800      	cmp	r0, #0
 8006fee:	d138      	bne.n	8007062 <__gethex+0xaa>
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	4640      	mov	r0, r8
 8006ff4:	49a7      	ldr	r1, [pc, #668]	; (8007294 <__gethex+0x2dc>)
 8006ff6:	f7ff f80f 	bl	8006018 <strncmp>
 8006ffa:	4606      	mov	r6, r0
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	d169      	bne.n	80070d4 <__gethex+0x11c>
 8007000:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007004:	465d      	mov	r5, fp
 8007006:	f7ff ffc2 	bl	8006f8e <__hexdig_fun>
 800700a:	2800      	cmp	r0, #0
 800700c:	d064      	beq.n	80070d8 <__gethex+0x120>
 800700e:	465a      	mov	r2, fp
 8007010:	7810      	ldrb	r0, [r2, #0]
 8007012:	4690      	mov	r8, r2
 8007014:	2830      	cmp	r0, #48	; 0x30
 8007016:	f102 0201 	add.w	r2, r2, #1
 800701a:	d0f9      	beq.n	8007010 <__gethex+0x58>
 800701c:	f7ff ffb7 	bl	8006f8e <__hexdig_fun>
 8007020:	2301      	movs	r3, #1
 8007022:	fab0 f480 	clz	r4, r0
 8007026:	465e      	mov	r6, fp
 8007028:	0964      	lsrs	r4, r4, #5
 800702a:	9301      	str	r3, [sp, #4]
 800702c:	4642      	mov	r2, r8
 800702e:	4615      	mov	r5, r2
 8007030:	7828      	ldrb	r0, [r5, #0]
 8007032:	3201      	adds	r2, #1
 8007034:	f7ff ffab 	bl	8006f8e <__hexdig_fun>
 8007038:	2800      	cmp	r0, #0
 800703a:	d1f8      	bne.n	800702e <__gethex+0x76>
 800703c:	2201      	movs	r2, #1
 800703e:	4628      	mov	r0, r5
 8007040:	4994      	ldr	r1, [pc, #592]	; (8007294 <__gethex+0x2dc>)
 8007042:	f7fe ffe9 	bl	8006018 <strncmp>
 8007046:	b978      	cbnz	r0, 8007068 <__gethex+0xb0>
 8007048:	b946      	cbnz	r6, 800705c <__gethex+0xa4>
 800704a:	1c6e      	adds	r6, r5, #1
 800704c:	4632      	mov	r2, r6
 800704e:	4615      	mov	r5, r2
 8007050:	7828      	ldrb	r0, [r5, #0]
 8007052:	3201      	adds	r2, #1
 8007054:	f7ff ff9b 	bl	8006f8e <__hexdig_fun>
 8007058:	2800      	cmp	r0, #0
 800705a:	d1f8      	bne.n	800704e <__gethex+0x96>
 800705c:	1b73      	subs	r3, r6, r5
 800705e:	009e      	lsls	r6, r3, #2
 8007060:	e004      	b.n	800706c <__gethex+0xb4>
 8007062:	2400      	movs	r4, #0
 8007064:	4626      	mov	r6, r4
 8007066:	e7e1      	b.n	800702c <__gethex+0x74>
 8007068:	2e00      	cmp	r6, #0
 800706a:	d1f7      	bne.n	800705c <__gethex+0xa4>
 800706c:	782b      	ldrb	r3, [r5, #0]
 800706e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007072:	2b50      	cmp	r3, #80	; 0x50
 8007074:	d13d      	bne.n	80070f2 <__gethex+0x13a>
 8007076:	786b      	ldrb	r3, [r5, #1]
 8007078:	2b2b      	cmp	r3, #43	; 0x2b
 800707a:	d02f      	beq.n	80070dc <__gethex+0x124>
 800707c:	2b2d      	cmp	r3, #45	; 0x2d
 800707e:	d031      	beq.n	80070e4 <__gethex+0x12c>
 8007080:	f04f 0b00 	mov.w	fp, #0
 8007084:	1c69      	adds	r1, r5, #1
 8007086:	7808      	ldrb	r0, [r1, #0]
 8007088:	f7ff ff81 	bl	8006f8e <__hexdig_fun>
 800708c:	1e42      	subs	r2, r0, #1
 800708e:	b2d2      	uxtb	r2, r2
 8007090:	2a18      	cmp	r2, #24
 8007092:	d82e      	bhi.n	80070f2 <__gethex+0x13a>
 8007094:	f1a0 0210 	sub.w	r2, r0, #16
 8007098:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800709c:	f7ff ff77 	bl	8006f8e <__hexdig_fun>
 80070a0:	f100 3cff 	add.w	ip, r0, #4294967295
 80070a4:	fa5f fc8c 	uxtb.w	ip, ip
 80070a8:	f1bc 0f18 	cmp.w	ip, #24
 80070ac:	d91d      	bls.n	80070ea <__gethex+0x132>
 80070ae:	f1bb 0f00 	cmp.w	fp, #0
 80070b2:	d000      	beq.n	80070b6 <__gethex+0xfe>
 80070b4:	4252      	negs	r2, r2
 80070b6:	4416      	add	r6, r2
 80070b8:	f8ca 1000 	str.w	r1, [sl]
 80070bc:	b1dc      	cbz	r4, 80070f6 <__gethex+0x13e>
 80070be:	9b01      	ldr	r3, [sp, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	bf14      	ite	ne
 80070c4:	f04f 0800 	movne.w	r8, #0
 80070c8:	f04f 0806 	moveq.w	r8, #6
 80070cc:	4640      	mov	r0, r8
 80070ce:	b005      	add	sp, #20
 80070d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d4:	4645      	mov	r5, r8
 80070d6:	4626      	mov	r6, r4
 80070d8:	2401      	movs	r4, #1
 80070da:	e7c7      	b.n	800706c <__gethex+0xb4>
 80070dc:	f04f 0b00 	mov.w	fp, #0
 80070e0:	1ca9      	adds	r1, r5, #2
 80070e2:	e7d0      	b.n	8007086 <__gethex+0xce>
 80070e4:	f04f 0b01 	mov.w	fp, #1
 80070e8:	e7fa      	b.n	80070e0 <__gethex+0x128>
 80070ea:	230a      	movs	r3, #10
 80070ec:	fb03 0002 	mla	r0, r3, r2, r0
 80070f0:	e7d0      	b.n	8007094 <__gethex+0xdc>
 80070f2:	4629      	mov	r1, r5
 80070f4:	e7e0      	b.n	80070b8 <__gethex+0x100>
 80070f6:	4621      	mov	r1, r4
 80070f8:	eba5 0308 	sub.w	r3, r5, r8
 80070fc:	3b01      	subs	r3, #1
 80070fe:	2b07      	cmp	r3, #7
 8007100:	dc0a      	bgt.n	8007118 <__gethex+0x160>
 8007102:	4648      	mov	r0, r9
 8007104:	f000 fb10 	bl	8007728 <_Balloc>
 8007108:	4604      	mov	r4, r0
 800710a:	b940      	cbnz	r0, 800711e <__gethex+0x166>
 800710c:	4602      	mov	r2, r0
 800710e:	21e4      	movs	r1, #228	; 0xe4
 8007110:	4b61      	ldr	r3, [pc, #388]	; (8007298 <__gethex+0x2e0>)
 8007112:	4862      	ldr	r0, [pc, #392]	; (800729c <__gethex+0x2e4>)
 8007114:	f7fd fac0 	bl	8004698 <__assert_func>
 8007118:	3101      	adds	r1, #1
 800711a:	105b      	asrs	r3, r3, #1
 800711c:	e7ef      	b.n	80070fe <__gethex+0x146>
 800711e:	2300      	movs	r3, #0
 8007120:	469b      	mov	fp, r3
 8007122:	f100 0a14 	add.w	sl, r0, #20
 8007126:	f8cd a004 	str.w	sl, [sp, #4]
 800712a:	45a8      	cmp	r8, r5
 800712c:	d344      	bcc.n	80071b8 <__gethex+0x200>
 800712e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007132:	4658      	mov	r0, fp
 8007134:	f848 bb04 	str.w	fp, [r8], #4
 8007138:	eba8 080a 	sub.w	r8, r8, sl
 800713c:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8007140:	6122      	str	r2, [r4, #16]
 8007142:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8007146:	f000 fbe1 	bl	800790c <__hi0bits>
 800714a:	683d      	ldr	r5, [r7, #0]
 800714c:	eba8 0800 	sub.w	r8, r8, r0
 8007150:	45a8      	cmp	r8, r5
 8007152:	dd59      	ble.n	8007208 <__gethex+0x250>
 8007154:	eba8 0805 	sub.w	r8, r8, r5
 8007158:	4641      	mov	r1, r8
 800715a:	4620      	mov	r0, r4
 800715c:	f000 ff5f 	bl	800801e <__any_on>
 8007160:	4683      	mov	fp, r0
 8007162:	b1b8      	cbz	r0, 8007194 <__gethex+0x1dc>
 8007164:	f04f 0b01 	mov.w	fp, #1
 8007168:	f108 33ff 	add.w	r3, r8, #4294967295
 800716c:	1159      	asrs	r1, r3, #5
 800716e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007172:	f003 021f 	and.w	r2, r3, #31
 8007176:	fa0b f202 	lsl.w	r2, fp, r2
 800717a:	420a      	tst	r2, r1
 800717c:	d00a      	beq.n	8007194 <__gethex+0x1dc>
 800717e:	455b      	cmp	r3, fp
 8007180:	dd06      	ble.n	8007190 <__gethex+0x1d8>
 8007182:	4620      	mov	r0, r4
 8007184:	f1a8 0102 	sub.w	r1, r8, #2
 8007188:	f000 ff49 	bl	800801e <__any_on>
 800718c:	2800      	cmp	r0, #0
 800718e:	d138      	bne.n	8007202 <__gethex+0x24a>
 8007190:	f04f 0b02 	mov.w	fp, #2
 8007194:	4641      	mov	r1, r8
 8007196:	4620      	mov	r0, r4
 8007198:	f7ff fea6 	bl	8006ee8 <rshift>
 800719c:	4446      	add	r6, r8
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	42b3      	cmp	r3, r6
 80071a2:	da41      	bge.n	8007228 <__gethex+0x270>
 80071a4:	4621      	mov	r1, r4
 80071a6:	4648      	mov	r0, r9
 80071a8:	f000 fafe 	bl	80077a8 <_Bfree>
 80071ac:	2300      	movs	r3, #0
 80071ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071b0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80071b4:	6013      	str	r3, [r2, #0]
 80071b6:	e789      	b.n	80070cc <__gethex+0x114>
 80071b8:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80071bc:	2a2e      	cmp	r2, #46	; 0x2e
 80071be:	d014      	beq.n	80071ea <__gethex+0x232>
 80071c0:	2b20      	cmp	r3, #32
 80071c2:	d106      	bne.n	80071d2 <__gethex+0x21a>
 80071c4:	9b01      	ldr	r3, [sp, #4]
 80071c6:	f843 bb04 	str.w	fp, [r3], #4
 80071ca:	f04f 0b00 	mov.w	fp, #0
 80071ce:	9301      	str	r3, [sp, #4]
 80071d0:	465b      	mov	r3, fp
 80071d2:	7828      	ldrb	r0, [r5, #0]
 80071d4:	9303      	str	r3, [sp, #12]
 80071d6:	f7ff feda 	bl	8006f8e <__hexdig_fun>
 80071da:	9b03      	ldr	r3, [sp, #12]
 80071dc:	f000 000f 	and.w	r0, r0, #15
 80071e0:	4098      	lsls	r0, r3
 80071e2:	ea4b 0b00 	orr.w	fp, fp, r0
 80071e6:	3304      	adds	r3, #4
 80071e8:	e79f      	b.n	800712a <__gethex+0x172>
 80071ea:	45a8      	cmp	r8, r5
 80071ec:	d8e8      	bhi.n	80071c0 <__gethex+0x208>
 80071ee:	2201      	movs	r2, #1
 80071f0:	4628      	mov	r0, r5
 80071f2:	4928      	ldr	r1, [pc, #160]	; (8007294 <__gethex+0x2dc>)
 80071f4:	9303      	str	r3, [sp, #12]
 80071f6:	f7fe ff0f 	bl	8006018 <strncmp>
 80071fa:	9b03      	ldr	r3, [sp, #12]
 80071fc:	2800      	cmp	r0, #0
 80071fe:	d1df      	bne.n	80071c0 <__gethex+0x208>
 8007200:	e793      	b.n	800712a <__gethex+0x172>
 8007202:	f04f 0b03 	mov.w	fp, #3
 8007206:	e7c5      	b.n	8007194 <__gethex+0x1dc>
 8007208:	da0b      	bge.n	8007222 <__gethex+0x26a>
 800720a:	eba5 0808 	sub.w	r8, r5, r8
 800720e:	4621      	mov	r1, r4
 8007210:	4642      	mov	r2, r8
 8007212:	4648      	mov	r0, r9
 8007214:	f000 fce0 	bl	8007bd8 <__lshift>
 8007218:	4604      	mov	r4, r0
 800721a:	eba6 0608 	sub.w	r6, r6, r8
 800721e:	f100 0a14 	add.w	sl, r0, #20
 8007222:	f04f 0b00 	mov.w	fp, #0
 8007226:	e7ba      	b.n	800719e <__gethex+0x1e6>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	42b3      	cmp	r3, r6
 800722c:	dd74      	ble.n	8007318 <__gethex+0x360>
 800722e:	1b9e      	subs	r6, r3, r6
 8007230:	42b5      	cmp	r5, r6
 8007232:	dc35      	bgt.n	80072a0 <__gethex+0x2e8>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2b02      	cmp	r3, #2
 8007238:	d023      	beq.n	8007282 <__gethex+0x2ca>
 800723a:	2b03      	cmp	r3, #3
 800723c:	d025      	beq.n	800728a <__gethex+0x2d2>
 800723e:	2b01      	cmp	r3, #1
 8007240:	d115      	bne.n	800726e <__gethex+0x2b6>
 8007242:	42b5      	cmp	r5, r6
 8007244:	d113      	bne.n	800726e <__gethex+0x2b6>
 8007246:	2d01      	cmp	r5, #1
 8007248:	d10b      	bne.n	8007262 <__gethex+0x2aa>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	9a02      	ldr	r2, [sp, #8]
 800724e:	f04f 0862 	mov.w	r8, #98	; 0x62
 8007252:	6013      	str	r3, [r2, #0]
 8007254:	2301      	movs	r3, #1
 8007256:	6123      	str	r3, [r4, #16]
 8007258:	f8ca 3000 	str.w	r3, [sl]
 800725c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800725e:	601c      	str	r4, [r3, #0]
 8007260:	e734      	b.n	80070cc <__gethex+0x114>
 8007262:	4620      	mov	r0, r4
 8007264:	1e69      	subs	r1, r5, #1
 8007266:	f000 feda 	bl	800801e <__any_on>
 800726a:	2800      	cmp	r0, #0
 800726c:	d1ed      	bne.n	800724a <__gethex+0x292>
 800726e:	4621      	mov	r1, r4
 8007270:	4648      	mov	r0, r9
 8007272:	f000 fa99 	bl	80077a8 <_Bfree>
 8007276:	2300      	movs	r3, #0
 8007278:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800727a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800727e:	6013      	str	r3, [r2, #0]
 8007280:	e724      	b.n	80070cc <__gethex+0x114>
 8007282:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1f2      	bne.n	800726e <__gethex+0x2b6>
 8007288:	e7df      	b.n	800724a <__gethex+0x292>
 800728a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1dc      	bne.n	800724a <__gethex+0x292>
 8007290:	e7ed      	b.n	800726e <__gethex+0x2b6>
 8007292:	bf00      	nop
 8007294:	080088ae 	.word	0x080088ae
 8007298:	080089b8 	.word	0x080089b8
 800729c:	080089c9 	.word	0x080089c9
 80072a0:	f106 38ff 	add.w	r8, r6, #4294967295
 80072a4:	f1bb 0f00 	cmp.w	fp, #0
 80072a8:	d133      	bne.n	8007312 <__gethex+0x35a>
 80072aa:	f1b8 0f00 	cmp.w	r8, #0
 80072ae:	d004      	beq.n	80072ba <__gethex+0x302>
 80072b0:	4641      	mov	r1, r8
 80072b2:	4620      	mov	r0, r4
 80072b4:	f000 feb3 	bl	800801e <__any_on>
 80072b8:	4683      	mov	fp, r0
 80072ba:	2301      	movs	r3, #1
 80072bc:	ea4f 1268 	mov.w	r2, r8, asr #5
 80072c0:	f008 081f 	and.w	r8, r8, #31
 80072c4:	fa03 f308 	lsl.w	r3, r3, r8
 80072c8:	f04f 0802 	mov.w	r8, #2
 80072cc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80072d0:	4631      	mov	r1, r6
 80072d2:	4213      	tst	r3, r2
 80072d4:	4620      	mov	r0, r4
 80072d6:	bf18      	it	ne
 80072d8:	f04b 0b02 	orrne.w	fp, fp, #2
 80072dc:	1bad      	subs	r5, r5, r6
 80072de:	f7ff fe03 	bl	8006ee8 <rshift>
 80072e2:	687e      	ldr	r6, [r7, #4]
 80072e4:	f1bb 0f00 	cmp.w	fp, #0
 80072e8:	d04a      	beq.n	8007380 <__gethex+0x3c8>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d016      	beq.n	800731e <__gethex+0x366>
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d018      	beq.n	8007326 <__gethex+0x36e>
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d109      	bne.n	800730c <__gethex+0x354>
 80072f8:	f01b 0f02 	tst.w	fp, #2
 80072fc:	d006      	beq.n	800730c <__gethex+0x354>
 80072fe:	f8da 3000 	ldr.w	r3, [sl]
 8007302:	ea4b 0b03 	orr.w	fp, fp, r3
 8007306:	f01b 0f01 	tst.w	fp, #1
 800730a:	d10f      	bne.n	800732c <__gethex+0x374>
 800730c:	f048 0810 	orr.w	r8, r8, #16
 8007310:	e036      	b.n	8007380 <__gethex+0x3c8>
 8007312:	f04f 0b01 	mov.w	fp, #1
 8007316:	e7d0      	b.n	80072ba <__gethex+0x302>
 8007318:	f04f 0801 	mov.w	r8, #1
 800731c:	e7e2      	b.n	80072e4 <__gethex+0x32c>
 800731e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007320:	f1c3 0301 	rsb	r3, r3, #1
 8007324:	930f      	str	r3, [sp, #60]	; 0x3c
 8007326:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007328:	2b00      	cmp	r3, #0
 800732a:	d0ef      	beq.n	800730c <__gethex+0x354>
 800732c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007330:	f104 0214 	add.w	r2, r4, #20
 8007334:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007338:	9301      	str	r3, [sp, #4]
 800733a:	2300      	movs	r3, #0
 800733c:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007340:	4694      	mov	ip, r2
 8007342:	f852 1b04 	ldr.w	r1, [r2], #4
 8007346:	f1b1 3fff 	cmp.w	r1, #4294967295
 800734a:	d01e      	beq.n	800738a <__gethex+0x3d2>
 800734c:	3101      	adds	r1, #1
 800734e:	f8cc 1000 	str.w	r1, [ip]
 8007352:	f1b8 0f02 	cmp.w	r8, #2
 8007356:	f104 0214 	add.w	r2, r4, #20
 800735a:	d13d      	bne.n	80073d8 <__gethex+0x420>
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	3b01      	subs	r3, #1
 8007360:	42ab      	cmp	r3, r5
 8007362:	d10b      	bne.n	800737c <__gethex+0x3c4>
 8007364:	2301      	movs	r3, #1
 8007366:	1169      	asrs	r1, r5, #5
 8007368:	f005 051f 	and.w	r5, r5, #31
 800736c:	fa03 f505 	lsl.w	r5, r3, r5
 8007370:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007374:	421d      	tst	r5, r3
 8007376:	bf18      	it	ne
 8007378:	f04f 0801 	movne.w	r8, #1
 800737c:	f048 0820 	orr.w	r8, r8, #32
 8007380:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007382:	601c      	str	r4, [r3, #0]
 8007384:	9b02      	ldr	r3, [sp, #8]
 8007386:	601e      	str	r6, [r3, #0]
 8007388:	e6a0      	b.n	80070cc <__gethex+0x114>
 800738a:	4290      	cmp	r0, r2
 800738c:	f842 3c04 	str.w	r3, [r2, #-4]
 8007390:	d8d6      	bhi.n	8007340 <__gethex+0x388>
 8007392:	68a2      	ldr	r2, [r4, #8]
 8007394:	4593      	cmp	fp, r2
 8007396:	db17      	blt.n	80073c8 <__gethex+0x410>
 8007398:	6861      	ldr	r1, [r4, #4]
 800739a:	4648      	mov	r0, r9
 800739c:	3101      	adds	r1, #1
 800739e:	f000 f9c3 	bl	8007728 <_Balloc>
 80073a2:	4682      	mov	sl, r0
 80073a4:	b918      	cbnz	r0, 80073ae <__gethex+0x3f6>
 80073a6:	4602      	mov	r2, r0
 80073a8:	2184      	movs	r1, #132	; 0x84
 80073aa:	4b1a      	ldr	r3, [pc, #104]	; (8007414 <__gethex+0x45c>)
 80073ac:	e6b1      	b.n	8007112 <__gethex+0x15a>
 80073ae:	6922      	ldr	r2, [r4, #16]
 80073b0:	f104 010c 	add.w	r1, r4, #12
 80073b4:	3202      	adds	r2, #2
 80073b6:	0092      	lsls	r2, r2, #2
 80073b8:	300c      	adds	r0, #12
 80073ba:	f7fe fec4 	bl	8006146 <memcpy>
 80073be:	4621      	mov	r1, r4
 80073c0:	4648      	mov	r0, r9
 80073c2:	f000 f9f1 	bl	80077a8 <_Bfree>
 80073c6:	4654      	mov	r4, sl
 80073c8:	6922      	ldr	r2, [r4, #16]
 80073ca:	1c51      	adds	r1, r2, #1
 80073cc:	6121      	str	r1, [r4, #16]
 80073ce:	2101      	movs	r1, #1
 80073d0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80073d4:	6151      	str	r1, [r2, #20]
 80073d6:	e7bc      	b.n	8007352 <__gethex+0x39a>
 80073d8:	6921      	ldr	r1, [r4, #16]
 80073da:	4559      	cmp	r1, fp
 80073dc:	dd0b      	ble.n	80073f6 <__gethex+0x43e>
 80073de:	2101      	movs	r1, #1
 80073e0:	4620      	mov	r0, r4
 80073e2:	f7ff fd81 	bl	8006ee8 <rshift>
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	3601      	adds	r6, #1
 80073ea:	42b3      	cmp	r3, r6
 80073ec:	f6ff aeda 	blt.w	80071a4 <__gethex+0x1ec>
 80073f0:	f04f 0801 	mov.w	r8, #1
 80073f4:	e7c2      	b.n	800737c <__gethex+0x3c4>
 80073f6:	f015 051f 	ands.w	r5, r5, #31
 80073fa:	d0f9      	beq.n	80073f0 <__gethex+0x438>
 80073fc:	9b01      	ldr	r3, [sp, #4]
 80073fe:	f1c5 0520 	rsb	r5, r5, #32
 8007402:	441a      	add	r2, r3
 8007404:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8007408:	f000 fa80 	bl	800790c <__hi0bits>
 800740c:	42a8      	cmp	r0, r5
 800740e:	dbe6      	blt.n	80073de <__gethex+0x426>
 8007410:	e7ee      	b.n	80073f0 <__gethex+0x438>
 8007412:	bf00      	nop
 8007414:	080089b8 	.word	0x080089b8

08007418 <L_shift>:
 8007418:	f1c2 0208 	rsb	r2, r2, #8
 800741c:	0092      	lsls	r2, r2, #2
 800741e:	b570      	push	{r4, r5, r6, lr}
 8007420:	f1c2 0620 	rsb	r6, r2, #32
 8007424:	6843      	ldr	r3, [r0, #4]
 8007426:	6804      	ldr	r4, [r0, #0]
 8007428:	fa03 f506 	lsl.w	r5, r3, r6
 800742c:	432c      	orrs	r4, r5
 800742e:	40d3      	lsrs	r3, r2
 8007430:	6004      	str	r4, [r0, #0]
 8007432:	f840 3f04 	str.w	r3, [r0, #4]!
 8007436:	4288      	cmp	r0, r1
 8007438:	d3f4      	bcc.n	8007424 <L_shift+0xc>
 800743a:	bd70      	pop	{r4, r5, r6, pc}

0800743c <__match>:
 800743c:	b530      	push	{r4, r5, lr}
 800743e:	6803      	ldr	r3, [r0, #0]
 8007440:	3301      	adds	r3, #1
 8007442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007446:	b914      	cbnz	r4, 800744e <__match+0x12>
 8007448:	6003      	str	r3, [r0, #0]
 800744a:	2001      	movs	r0, #1
 800744c:	bd30      	pop	{r4, r5, pc}
 800744e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007452:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007456:	2d19      	cmp	r5, #25
 8007458:	bf98      	it	ls
 800745a:	3220      	addls	r2, #32
 800745c:	42a2      	cmp	r2, r4
 800745e:	d0f0      	beq.n	8007442 <__match+0x6>
 8007460:	2000      	movs	r0, #0
 8007462:	e7f3      	b.n	800744c <__match+0x10>

08007464 <__hexnan>:
 8007464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007468:	2500      	movs	r5, #0
 800746a:	680b      	ldr	r3, [r1, #0]
 800746c:	4682      	mov	sl, r0
 800746e:	115e      	asrs	r6, r3, #5
 8007470:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007474:	f013 031f 	ands.w	r3, r3, #31
 8007478:	bf18      	it	ne
 800747a:	3604      	addne	r6, #4
 800747c:	1f37      	subs	r7, r6, #4
 800747e:	4690      	mov	r8, r2
 8007480:	46b9      	mov	r9, r7
 8007482:	463c      	mov	r4, r7
 8007484:	46ab      	mov	fp, r5
 8007486:	b087      	sub	sp, #28
 8007488:	6801      	ldr	r1, [r0, #0]
 800748a:	9301      	str	r3, [sp, #4]
 800748c:	f846 5c04 	str.w	r5, [r6, #-4]
 8007490:	9502      	str	r5, [sp, #8]
 8007492:	784a      	ldrb	r2, [r1, #1]
 8007494:	1c4b      	adds	r3, r1, #1
 8007496:	9303      	str	r3, [sp, #12]
 8007498:	b342      	cbz	r2, 80074ec <__hexnan+0x88>
 800749a:	4610      	mov	r0, r2
 800749c:	9105      	str	r1, [sp, #20]
 800749e:	9204      	str	r2, [sp, #16]
 80074a0:	f7ff fd75 	bl	8006f8e <__hexdig_fun>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	d14f      	bne.n	8007548 <__hexnan+0xe4>
 80074a8:	9a04      	ldr	r2, [sp, #16]
 80074aa:	9905      	ldr	r1, [sp, #20]
 80074ac:	2a20      	cmp	r2, #32
 80074ae:	d818      	bhi.n	80074e2 <__hexnan+0x7e>
 80074b0:	9b02      	ldr	r3, [sp, #8]
 80074b2:	459b      	cmp	fp, r3
 80074b4:	dd13      	ble.n	80074de <__hexnan+0x7a>
 80074b6:	454c      	cmp	r4, r9
 80074b8:	d206      	bcs.n	80074c8 <__hexnan+0x64>
 80074ba:	2d07      	cmp	r5, #7
 80074bc:	dc04      	bgt.n	80074c8 <__hexnan+0x64>
 80074be:	462a      	mov	r2, r5
 80074c0:	4649      	mov	r1, r9
 80074c2:	4620      	mov	r0, r4
 80074c4:	f7ff ffa8 	bl	8007418 <L_shift>
 80074c8:	4544      	cmp	r4, r8
 80074ca:	d950      	bls.n	800756e <__hexnan+0x10a>
 80074cc:	2300      	movs	r3, #0
 80074ce:	f1a4 0904 	sub.w	r9, r4, #4
 80074d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80074d6:	461d      	mov	r5, r3
 80074d8:	464c      	mov	r4, r9
 80074da:	f8cd b008 	str.w	fp, [sp, #8]
 80074de:	9903      	ldr	r1, [sp, #12]
 80074e0:	e7d7      	b.n	8007492 <__hexnan+0x2e>
 80074e2:	2a29      	cmp	r2, #41	; 0x29
 80074e4:	d155      	bne.n	8007592 <__hexnan+0x12e>
 80074e6:	3102      	adds	r1, #2
 80074e8:	f8ca 1000 	str.w	r1, [sl]
 80074ec:	f1bb 0f00 	cmp.w	fp, #0
 80074f0:	d04f      	beq.n	8007592 <__hexnan+0x12e>
 80074f2:	454c      	cmp	r4, r9
 80074f4:	d206      	bcs.n	8007504 <__hexnan+0xa0>
 80074f6:	2d07      	cmp	r5, #7
 80074f8:	dc04      	bgt.n	8007504 <__hexnan+0xa0>
 80074fa:	462a      	mov	r2, r5
 80074fc:	4649      	mov	r1, r9
 80074fe:	4620      	mov	r0, r4
 8007500:	f7ff ff8a 	bl	8007418 <L_shift>
 8007504:	4544      	cmp	r4, r8
 8007506:	d934      	bls.n	8007572 <__hexnan+0x10e>
 8007508:	4623      	mov	r3, r4
 800750a:	f1a8 0204 	sub.w	r2, r8, #4
 800750e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007512:	429f      	cmp	r7, r3
 8007514:	f842 1f04 	str.w	r1, [r2, #4]!
 8007518:	d2f9      	bcs.n	800750e <__hexnan+0xaa>
 800751a:	1b3b      	subs	r3, r7, r4
 800751c:	f023 0303 	bic.w	r3, r3, #3
 8007520:	3304      	adds	r3, #4
 8007522:	3e03      	subs	r6, #3
 8007524:	3401      	adds	r4, #1
 8007526:	42a6      	cmp	r6, r4
 8007528:	bf38      	it	cc
 800752a:	2304      	movcc	r3, #4
 800752c:	2200      	movs	r2, #0
 800752e:	4443      	add	r3, r8
 8007530:	f843 2b04 	str.w	r2, [r3], #4
 8007534:	429f      	cmp	r7, r3
 8007536:	d2fb      	bcs.n	8007530 <__hexnan+0xcc>
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	b91b      	cbnz	r3, 8007544 <__hexnan+0xe0>
 800753c:	4547      	cmp	r7, r8
 800753e:	d126      	bne.n	800758e <__hexnan+0x12a>
 8007540:	2301      	movs	r3, #1
 8007542:	603b      	str	r3, [r7, #0]
 8007544:	2005      	movs	r0, #5
 8007546:	e025      	b.n	8007594 <__hexnan+0x130>
 8007548:	3501      	adds	r5, #1
 800754a:	2d08      	cmp	r5, #8
 800754c:	f10b 0b01 	add.w	fp, fp, #1
 8007550:	dd06      	ble.n	8007560 <__hexnan+0xfc>
 8007552:	4544      	cmp	r4, r8
 8007554:	d9c3      	bls.n	80074de <__hexnan+0x7a>
 8007556:	2300      	movs	r3, #0
 8007558:	2501      	movs	r5, #1
 800755a:	f844 3c04 	str.w	r3, [r4, #-4]
 800755e:	3c04      	subs	r4, #4
 8007560:	6822      	ldr	r2, [r4, #0]
 8007562:	f000 000f 	and.w	r0, r0, #15
 8007566:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800756a:	6020      	str	r0, [r4, #0]
 800756c:	e7b7      	b.n	80074de <__hexnan+0x7a>
 800756e:	2508      	movs	r5, #8
 8007570:	e7b5      	b.n	80074de <__hexnan+0x7a>
 8007572:	9b01      	ldr	r3, [sp, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d0df      	beq.n	8007538 <__hexnan+0xd4>
 8007578:	f04f 32ff 	mov.w	r2, #4294967295
 800757c:	f1c3 0320 	rsb	r3, r3, #32
 8007580:	40da      	lsrs	r2, r3
 8007582:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007586:	4013      	ands	r3, r2
 8007588:	f846 3c04 	str.w	r3, [r6, #-4]
 800758c:	e7d4      	b.n	8007538 <__hexnan+0xd4>
 800758e:	3f04      	subs	r7, #4
 8007590:	e7d2      	b.n	8007538 <__hexnan+0xd4>
 8007592:	2004      	movs	r0, #4
 8007594:	b007      	add	sp, #28
 8007596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800759c <malloc>:
 800759c:	4b02      	ldr	r3, [pc, #8]	; (80075a8 <malloc+0xc>)
 800759e:	4601      	mov	r1, r0
 80075a0:	6818      	ldr	r0, [r3, #0]
 80075a2:	f000 b823 	b.w	80075ec <_malloc_r>
 80075a6:	bf00      	nop
 80075a8:	200001d0 	.word	0x200001d0

080075ac <sbrk_aligned>:
 80075ac:	b570      	push	{r4, r5, r6, lr}
 80075ae:	4e0e      	ldr	r6, [pc, #56]	; (80075e8 <sbrk_aligned+0x3c>)
 80075b0:	460c      	mov	r4, r1
 80075b2:	6831      	ldr	r1, [r6, #0]
 80075b4:	4605      	mov	r5, r0
 80075b6:	b911      	cbnz	r1, 80075be <sbrk_aligned+0x12>
 80075b8:	f001 f812 	bl	80085e0 <_sbrk_r>
 80075bc:	6030      	str	r0, [r6, #0]
 80075be:	4621      	mov	r1, r4
 80075c0:	4628      	mov	r0, r5
 80075c2:	f001 f80d 	bl	80085e0 <_sbrk_r>
 80075c6:	1c43      	adds	r3, r0, #1
 80075c8:	d00a      	beq.n	80075e0 <sbrk_aligned+0x34>
 80075ca:	1cc4      	adds	r4, r0, #3
 80075cc:	f024 0403 	bic.w	r4, r4, #3
 80075d0:	42a0      	cmp	r0, r4
 80075d2:	d007      	beq.n	80075e4 <sbrk_aligned+0x38>
 80075d4:	1a21      	subs	r1, r4, r0
 80075d6:	4628      	mov	r0, r5
 80075d8:	f001 f802 	bl	80085e0 <_sbrk_r>
 80075dc:	3001      	adds	r0, #1
 80075de:	d101      	bne.n	80075e4 <sbrk_aligned+0x38>
 80075e0:	f04f 34ff 	mov.w	r4, #4294967295
 80075e4:	4620      	mov	r0, r4
 80075e6:	bd70      	pop	{r4, r5, r6, pc}
 80075e8:	20000bd8 	.word	0x20000bd8

080075ec <_malloc_r>:
 80075ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075f0:	1ccd      	adds	r5, r1, #3
 80075f2:	f025 0503 	bic.w	r5, r5, #3
 80075f6:	3508      	adds	r5, #8
 80075f8:	2d0c      	cmp	r5, #12
 80075fa:	bf38      	it	cc
 80075fc:	250c      	movcc	r5, #12
 80075fe:	2d00      	cmp	r5, #0
 8007600:	4607      	mov	r7, r0
 8007602:	db01      	blt.n	8007608 <_malloc_r+0x1c>
 8007604:	42a9      	cmp	r1, r5
 8007606:	d905      	bls.n	8007614 <_malloc_r+0x28>
 8007608:	230c      	movs	r3, #12
 800760a:	2600      	movs	r6, #0
 800760c:	603b      	str	r3, [r7, #0]
 800760e:	4630      	mov	r0, r6
 8007610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007614:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80076e8 <_malloc_r+0xfc>
 8007618:	f000 f87a 	bl	8007710 <__malloc_lock>
 800761c:	f8d8 3000 	ldr.w	r3, [r8]
 8007620:	461c      	mov	r4, r3
 8007622:	bb5c      	cbnz	r4, 800767c <_malloc_r+0x90>
 8007624:	4629      	mov	r1, r5
 8007626:	4638      	mov	r0, r7
 8007628:	f7ff ffc0 	bl	80075ac <sbrk_aligned>
 800762c:	1c43      	adds	r3, r0, #1
 800762e:	4604      	mov	r4, r0
 8007630:	d155      	bne.n	80076de <_malloc_r+0xf2>
 8007632:	f8d8 4000 	ldr.w	r4, [r8]
 8007636:	4626      	mov	r6, r4
 8007638:	2e00      	cmp	r6, #0
 800763a:	d145      	bne.n	80076c8 <_malloc_r+0xdc>
 800763c:	2c00      	cmp	r4, #0
 800763e:	d048      	beq.n	80076d2 <_malloc_r+0xe6>
 8007640:	6823      	ldr	r3, [r4, #0]
 8007642:	4631      	mov	r1, r6
 8007644:	4638      	mov	r0, r7
 8007646:	eb04 0903 	add.w	r9, r4, r3
 800764a:	f000 ffc9 	bl	80085e0 <_sbrk_r>
 800764e:	4581      	cmp	r9, r0
 8007650:	d13f      	bne.n	80076d2 <_malloc_r+0xe6>
 8007652:	6821      	ldr	r1, [r4, #0]
 8007654:	4638      	mov	r0, r7
 8007656:	1a6d      	subs	r5, r5, r1
 8007658:	4629      	mov	r1, r5
 800765a:	f7ff ffa7 	bl	80075ac <sbrk_aligned>
 800765e:	3001      	adds	r0, #1
 8007660:	d037      	beq.n	80076d2 <_malloc_r+0xe6>
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	442b      	add	r3, r5
 8007666:	6023      	str	r3, [r4, #0]
 8007668:	f8d8 3000 	ldr.w	r3, [r8]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d038      	beq.n	80076e2 <_malloc_r+0xf6>
 8007670:	685a      	ldr	r2, [r3, #4]
 8007672:	42a2      	cmp	r2, r4
 8007674:	d12b      	bne.n	80076ce <_malloc_r+0xe2>
 8007676:	2200      	movs	r2, #0
 8007678:	605a      	str	r2, [r3, #4]
 800767a:	e00f      	b.n	800769c <_malloc_r+0xb0>
 800767c:	6822      	ldr	r2, [r4, #0]
 800767e:	1b52      	subs	r2, r2, r5
 8007680:	d41f      	bmi.n	80076c2 <_malloc_r+0xd6>
 8007682:	2a0b      	cmp	r2, #11
 8007684:	d917      	bls.n	80076b6 <_malloc_r+0xca>
 8007686:	1961      	adds	r1, r4, r5
 8007688:	42a3      	cmp	r3, r4
 800768a:	6025      	str	r5, [r4, #0]
 800768c:	bf18      	it	ne
 800768e:	6059      	strne	r1, [r3, #4]
 8007690:	6863      	ldr	r3, [r4, #4]
 8007692:	bf08      	it	eq
 8007694:	f8c8 1000 	streq.w	r1, [r8]
 8007698:	5162      	str	r2, [r4, r5]
 800769a:	604b      	str	r3, [r1, #4]
 800769c:	4638      	mov	r0, r7
 800769e:	f104 060b 	add.w	r6, r4, #11
 80076a2:	f000 f83b 	bl	800771c <__malloc_unlock>
 80076a6:	f026 0607 	bic.w	r6, r6, #7
 80076aa:	1d23      	adds	r3, r4, #4
 80076ac:	1af2      	subs	r2, r6, r3
 80076ae:	d0ae      	beq.n	800760e <_malloc_r+0x22>
 80076b0:	1b9b      	subs	r3, r3, r6
 80076b2:	50a3      	str	r3, [r4, r2]
 80076b4:	e7ab      	b.n	800760e <_malloc_r+0x22>
 80076b6:	42a3      	cmp	r3, r4
 80076b8:	6862      	ldr	r2, [r4, #4]
 80076ba:	d1dd      	bne.n	8007678 <_malloc_r+0x8c>
 80076bc:	f8c8 2000 	str.w	r2, [r8]
 80076c0:	e7ec      	b.n	800769c <_malloc_r+0xb0>
 80076c2:	4623      	mov	r3, r4
 80076c4:	6864      	ldr	r4, [r4, #4]
 80076c6:	e7ac      	b.n	8007622 <_malloc_r+0x36>
 80076c8:	4634      	mov	r4, r6
 80076ca:	6876      	ldr	r6, [r6, #4]
 80076cc:	e7b4      	b.n	8007638 <_malloc_r+0x4c>
 80076ce:	4613      	mov	r3, r2
 80076d0:	e7cc      	b.n	800766c <_malloc_r+0x80>
 80076d2:	230c      	movs	r3, #12
 80076d4:	4638      	mov	r0, r7
 80076d6:	603b      	str	r3, [r7, #0]
 80076d8:	f000 f820 	bl	800771c <__malloc_unlock>
 80076dc:	e797      	b.n	800760e <_malloc_r+0x22>
 80076de:	6025      	str	r5, [r4, #0]
 80076e0:	e7dc      	b.n	800769c <_malloc_r+0xb0>
 80076e2:	605b      	str	r3, [r3, #4]
 80076e4:	deff      	udf	#255	; 0xff
 80076e6:	bf00      	nop
 80076e8:	20000bd4 	.word	0x20000bd4

080076ec <__ascii_mbtowc>:
 80076ec:	b082      	sub	sp, #8
 80076ee:	b901      	cbnz	r1, 80076f2 <__ascii_mbtowc+0x6>
 80076f0:	a901      	add	r1, sp, #4
 80076f2:	b142      	cbz	r2, 8007706 <__ascii_mbtowc+0x1a>
 80076f4:	b14b      	cbz	r3, 800770a <__ascii_mbtowc+0x1e>
 80076f6:	7813      	ldrb	r3, [r2, #0]
 80076f8:	600b      	str	r3, [r1, #0]
 80076fa:	7812      	ldrb	r2, [r2, #0]
 80076fc:	1e10      	subs	r0, r2, #0
 80076fe:	bf18      	it	ne
 8007700:	2001      	movne	r0, #1
 8007702:	b002      	add	sp, #8
 8007704:	4770      	bx	lr
 8007706:	4610      	mov	r0, r2
 8007708:	e7fb      	b.n	8007702 <__ascii_mbtowc+0x16>
 800770a:	f06f 0001 	mvn.w	r0, #1
 800770e:	e7f8      	b.n	8007702 <__ascii_mbtowc+0x16>

08007710 <__malloc_lock>:
 8007710:	4801      	ldr	r0, [pc, #4]	; (8007718 <__malloc_lock+0x8>)
 8007712:	f7fe bd08 	b.w	8006126 <__retarget_lock_acquire_recursive>
 8007716:	bf00      	nop
 8007718:	20000bd0 	.word	0x20000bd0

0800771c <__malloc_unlock>:
 800771c:	4801      	ldr	r0, [pc, #4]	; (8007724 <__malloc_unlock+0x8>)
 800771e:	f7fe bd03 	b.w	8006128 <__retarget_lock_release_recursive>
 8007722:	bf00      	nop
 8007724:	20000bd0 	.word	0x20000bd0

08007728 <_Balloc>:
 8007728:	b570      	push	{r4, r5, r6, lr}
 800772a:	69c6      	ldr	r6, [r0, #28]
 800772c:	4604      	mov	r4, r0
 800772e:	460d      	mov	r5, r1
 8007730:	b976      	cbnz	r6, 8007750 <_Balloc+0x28>
 8007732:	2010      	movs	r0, #16
 8007734:	f7ff ff32 	bl	800759c <malloc>
 8007738:	4602      	mov	r2, r0
 800773a:	61e0      	str	r0, [r4, #28]
 800773c:	b920      	cbnz	r0, 8007748 <_Balloc+0x20>
 800773e:	216b      	movs	r1, #107	; 0x6b
 8007740:	4b17      	ldr	r3, [pc, #92]	; (80077a0 <_Balloc+0x78>)
 8007742:	4818      	ldr	r0, [pc, #96]	; (80077a4 <_Balloc+0x7c>)
 8007744:	f7fc ffa8 	bl	8004698 <__assert_func>
 8007748:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800774c:	6006      	str	r6, [r0, #0]
 800774e:	60c6      	str	r6, [r0, #12]
 8007750:	69e6      	ldr	r6, [r4, #28]
 8007752:	68f3      	ldr	r3, [r6, #12]
 8007754:	b183      	cbz	r3, 8007778 <_Balloc+0x50>
 8007756:	69e3      	ldr	r3, [r4, #28]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800775e:	b9b8      	cbnz	r0, 8007790 <_Balloc+0x68>
 8007760:	2101      	movs	r1, #1
 8007762:	fa01 f605 	lsl.w	r6, r1, r5
 8007766:	1d72      	adds	r2, r6, #5
 8007768:	4620      	mov	r0, r4
 800776a:	0092      	lsls	r2, r2, #2
 800776c:	f000 ff48 	bl	8008600 <_calloc_r>
 8007770:	b160      	cbz	r0, 800778c <_Balloc+0x64>
 8007772:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007776:	e00e      	b.n	8007796 <_Balloc+0x6e>
 8007778:	2221      	movs	r2, #33	; 0x21
 800777a:	2104      	movs	r1, #4
 800777c:	4620      	mov	r0, r4
 800777e:	f000 ff3f 	bl	8008600 <_calloc_r>
 8007782:	69e3      	ldr	r3, [r4, #28]
 8007784:	60f0      	str	r0, [r6, #12]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1e4      	bne.n	8007756 <_Balloc+0x2e>
 800778c:	2000      	movs	r0, #0
 800778e:	bd70      	pop	{r4, r5, r6, pc}
 8007790:	6802      	ldr	r2, [r0, #0]
 8007792:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007796:	2300      	movs	r3, #0
 8007798:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800779c:	e7f7      	b.n	800778e <_Balloc+0x66>
 800779e:	bf00      	nop
 80077a0:	08008949 	.word	0x08008949
 80077a4:	08008a29 	.word	0x08008a29

080077a8 <_Bfree>:
 80077a8:	b570      	push	{r4, r5, r6, lr}
 80077aa:	69c6      	ldr	r6, [r0, #28]
 80077ac:	4605      	mov	r5, r0
 80077ae:	460c      	mov	r4, r1
 80077b0:	b976      	cbnz	r6, 80077d0 <_Bfree+0x28>
 80077b2:	2010      	movs	r0, #16
 80077b4:	f7ff fef2 	bl	800759c <malloc>
 80077b8:	4602      	mov	r2, r0
 80077ba:	61e8      	str	r0, [r5, #28]
 80077bc:	b920      	cbnz	r0, 80077c8 <_Bfree+0x20>
 80077be:	218f      	movs	r1, #143	; 0x8f
 80077c0:	4b08      	ldr	r3, [pc, #32]	; (80077e4 <_Bfree+0x3c>)
 80077c2:	4809      	ldr	r0, [pc, #36]	; (80077e8 <_Bfree+0x40>)
 80077c4:	f7fc ff68 	bl	8004698 <__assert_func>
 80077c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077cc:	6006      	str	r6, [r0, #0]
 80077ce:	60c6      	str	r6, [r0, #12]
 80077d0:	b13c      	cbz	r4, 80077e2 <_Bfree+0x3a>
 80077d2:	69eb      	ldr	r3, [r5, #28]
 80077d4:	6862      	ldr	r2, [r4, #4]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077dc:	6021      	str	r1, [r4, #0]
 80077de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80077e2:	bd70      	pop	{r4, r5, r6, pc}
 80077e4:	08008949 	.word	0x08008949
 80077e8:	08008a29 	.word	0x08008a29

080077ec <__multadd>:
 80077ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077f0:	4607      	mov	r7, r0
 80077f2:	460c      	mov	r4, r1
 80077f4:	461e      	mov	r6, r3
 80077f6:	2000      	movs	r0, #0
 80077f8:	690d      	ldr	r5, [r1, #16]
 80077fa:	f101 0c14 	add.w	ip, r1, #20
 80077fe:	f8dc 3000 	ldr.w	r3, [ip]
 8007802:	3001      	adds	r0, #1
 8007804:	b299      	uxth	r1, r3
 8007806:	fb02 6101 	mla	r1, r2, r1, r6
 800780a:	0c1e      	lsrs	r6, r3, #16
 800780c:	0c0b      	lsrs	r3, r1, #16
 800780e:	fb02 3306 	mla	r3, r2, r6, r3
 8007812:	b289      	uxth	r1, r1
 8007814:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007818:	4285      	cmp	r5, r0
 800781a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800781e:	f84c 1b04 	str.w	r1, [ip], #4
 8007822:	dcec      	bgt.n	80077fe <__multadd+0x12>
 8007824:	b30e      	cbz	r6, 800786a <__multadd+0x7e>
 8007826:	68a3      	ldr	r3, [r4, #8]
 8007828:	42ab      	cmp	r3, r5
 800782a:	dc19      	bgt.n	8007860 <__multadd+0x74>
 800782c:	6861      	ldr	r1, [r4, #4]
 800782e:	4638      	mov	r0, r7
 8007830:	3101      	adds	r1, #1
 8007832:	f7ff ff79 	bl	8007728 <_Balloc>
 8007836:	4680      	mov	r8, r0
 8007838:	b928      	cbnz	r0, 8007846 <__multadd+0x5a>
 800783a:	4602      	mov	r2, r0
 800783c:	21ba      	movs	r1, #186	; 0xba
 800783e:	4b0c      	ldr	r3, [pc, #48]	; (8007870 <__multadd+0x84>)
 8007840:	480c      	ldr	r0, [pc, #48]	; (8007874 <__multadd+0x88>)
 8007842:	f7fc ff29 	bl	8004698 <__assert_func>
 8007846:	6922      	ldr	r2, [r4, #16]
 8007848:	f104 010c 	add.w	r1, r4, #12
 800784c:	3202      	adds	r2, #2
 800784e:	0092      	lsls	r2, r2, #2
 8007850:	300c      	adds	r0, #12
 8007852:	f7fe fc78 	bl	8006146 <memcpy>
 8007856:	4621      	mov	r1, r4
 8007858:	4638      	mov	r0, r7
 800785a:	f7ff ffa5 	bl	80077a8 <_Bfree>
 800785e:	4644      	mov	r4, r8
 8007860:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007864:	3501      	adds	r5, #1
 8007866:	615e      	str	r6, [r3, #20]
 8007868:	6125      	str	r5, [r4, #16]
 800786a:	4620      	mov	r0, r4
 800786c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007870:	080089b8 	.word	0x080089b8
 8007874:	08008a29 	.word	0x08008a29

08007878 <__s2b>:
 8007878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800787c:	4615      	mov	r5, r2
 800787e:	2209      	movs	r2, #9
 8007880:	461f      	mov	r7, r3
 8007882:	3308      	adds	r3, #8
 8007884:	460c      	mov	r4, r1
 8007886:	fb93 f3f2 	sdiv	r3, r3, r2
 800788a:	4606      	mov	r6, r0
 800788c:	2201      	movs	r2, #1
 800788e:	2100      	movs	r1, #0
 8007890:	429a      	cmp	r2, r3
 8007892:	db09      	blt.n	80078a8 <__s2b+0x30>
 8007894:	4630      	mov	r0, r6
 8007896:	f7ff ff47 	bl	8007728 <_Balloc>
 800789a:	b940      	cbnz	r0, 80078ae <__s2b+0x36>
 800789c:	4602      	mov	r2, r0
 800789e:	21d3      	movs	r1, #211	; 0xd3
 80078a0:	4b18      	ldr	r3, [pc, #96]	; (8007904 <__s2b+0x8c>)
 80078a2:	4819      	ldr	r0, [pc, #100]	; (8007908 <__s2b+0x90>)
 80078a4:	f7fc fef8 	bl	8004698 <__assert_func>
 80078a8:	0052      	lsls	r2, r2, #1
 80078aa:	3101      	adds	r1, #1
 80078ac:	e7f0      	b.n	8007890 <__s2b+0x18>
 80078ae:	9b08      	ldr	r3, [sp, #32]
 80078b0:	2d09      	cmp	r5, #9
 80078b2:	6143      	str	r3, [r0, #20]
 80078b4:	f04f 0301 	mov.w	r3, #1
 80078b8:	6103      	str	r3, [r0, #16]
 80078ba:	dd16      	ble.n	80078ea <__s2b+0x72>
 80078bc:	f104 0909 	add.w	r9, r4, #9
 80078c0:	46c8      	mov	r8, r9
 80078c2:	442c      	add	r4, r5
 80078c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80078c8:	4601      	mov	r1, r0
 80078ca:	220a      	movs	r2, #10
 80078cc:	4630      	mov	r0, r6
 80078ce:	3b30      	subs	r3, #48	; 0x30
 80078d0:	f7ff ff8c 	bl	80077ec <__multadd>
 80078d4:	45a0      	cmp	r8, r4
 80078d6:	d1f5      	bne.n	80078c4 <__s2b+0x4c>
 80078d8:	f1a5 0408 	sub.w	r4, r5, #8
 80078dc:	444c      	add	r4, r9
 80078de:	1b2d      	subs	r5, r5, r4
 80078e0:	1963      	adds	r3, r4, r5
 80078e2:	42bb      	cmp	r3, r7
 80078e4:	db04      	blt.n	80078f0 <__s2b+0x78>
 80078e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078ea:	2509      	movs	r5, #9
 80078ec:	340a      	adds	r4, #10
 80078ee:	e7f6      	b.n	80078de <__s2b+0x66>
 80078f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80078f4:	4601      	mov	r1, r0
 80078f6:	220a      	movs	r2, #10
 80078f8:	4630      	mov	r0, r6
 80078fa:	3b30      	subs	r3, #48	; 0x30
 80078fc:	f7ff ff76 	bl	80077ec <__multadd>
 8007900:	e7ee      	b.n	80078e0 <__s2b+0x68>
 8007902:	bf00      	nop
 8007904:	080089b8 	.word	0x080089b8
 8007908:	08008a29 	.word	0x08008a29

0800790c <__hi0bits>:
 800790c:	0c02      	lsrs	r2, r0, #16
 800790e:	0412      	lsls	r2, r2, #16
 8007910:	4603      	mov	r3, r0
 8007912:	b9ca      	cbnz	r2, 8007948 <__hi0bits+0x3c>
 8007914:	0403      	lsls	r3, r0, #16
 8007916:	2010      	movs	r0, #16
 8007918:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800791c:	bf04      	itt	eq
 800791e:	021b      	lsleq	r3, r3, #8
 8007920:	3008      	addeq	r0, #8
 8007922:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007926:	bf04      	itt	eq
 8007928:	011b      	lsleq	r3, r3, #4
 800792a:	3004      	addeq	r0, #4
 800792c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007930:	bf04      	itt	eq
 8007932:	009b      	lsleq	r3, r3, #2
 8007934:	3002      	addeq	r0, #2
 8007936:	2b00      	cmp	r3, #0
 8007938:	db05      	blt.n	8007946 <__hi0bits+0x3a>
 800793a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800793e:	f100 0001 	add.w	r0, r0, #1
 8007942:	bf08      	it	eq
 8007944:	2020      	moveq	r0, #32
 8007946:	4770      	bx	lr
 8007948:	2000      	movs	r0, #0
 800794a:	e7e5      	b.n	8007918 <__hi0bits+0xc>

0800794c <__lo0bits>:
 800794c:	6803      	ldr	r3, [r0, #0]
 800794e:	4602      	mov	r2, r0
 8007950:	f013 0007 	ands.w	r0, r3, #7
 8007954:	d00b      	beq.n	800796e <__lo0bits+0x22>
 8007956:	07d9      	lsls	r1, r3, #31
 8007958:	d421      	bmi.n	800799e <__lo0bits+0x52>
 800795a:	0798      	lsls	r0, r3, #30
 800795c:	bf49      	itett	mi
 800795e:	085b      	lsrmi	r3, r3, #1
 8007960:	089b      	lsrpl	r3, r3, #2
 8007962:	2001      	movmi	r0, #1
 8007964:	6013      	strmi	r3, [r2, #0]
 8007966:	bf5c      	itt	pl
 8007968:	2002      	movpl	r0, #2
 800796a:	6013      	strpl	r3, [r2, #0]
 800796c:	4770      	bx	lr
 800796e:	b299      	uxth	r1, r3
 8007970:	b909      	cbnz	r1, 8007976 <__lo0bits+0x2a>
 8007972:	2010      	movs	r0, #16
 8007974:	0c1b      	lsrs	r3, r3, #16
 8007976:	b2d9      	uxtb	r1, r3
 8007978:	b909      	cbnz	r1, 800797e <__lo0bits+0x32>
 800797a:	3008      	adds	r0, #8
 800797c:	0a1b      	lsrs	r3, r3, #8
 800797e:	0719      	lsls	r1, r3, #28
 8007980:	bf04      	itt	eq
 8007982:	091b      	lsreq	r3, r3, #4
 8007984:	3004      	addeq	r0, #4
 8007986:	0799      	lsls	r1, r3, #30
 8007988:	bf04      	itt	eq
 800798a:	089b      	lsreq	r3, r3, #2
 800798c:	3002      	addeq	r0, #2
 800798e:	07d9      	lsls	r1, r3, #31
 8007990:	d403      	bmi.n	800799a <__lo0bits+0x4e>
 8007992:	085b      	lsrs	r3, r3, #1
 8007994:	f100 0001 	add.w	r0, r0, #1
 8007998:	d003      	beq.n	80079a2 <__lo0bits+0x56>
 800799a:	6013      	str	r3, [r2, #0]
 800799c:	4770      	bx	lr
 800799e:	2000      	movs	r0, #0
 80079a0:	4770      	bx	lr
 80079a2:	2020      	movs	r0, #32
 80079a4:	4770      	bx	lr
	...

080079a8 <__i2b>:
 80079a8:	b510      	push	{r4, lr}
 80079aa:	460c      	mov	r4, r1
 80079ac:	2101      	movs	r1, #1
 80079ae:	f7ff febb 	bl	8007728 <_Balloc>
 80079b2:	4602      	mov	r2, r0
 80079b4:	b928      	cbnz	r0, 80079c2 <__i2b+0x1a>
 80079b6:	f240 1145 	movw	r1, #325	; 0x145
 80079ba:	4b04      	ldr	r3, [pc, #16]	; (80079cc <__i2b+0x24>)
 80079bc:	4804      	ldr	r0, [pc, #16]	; (80079d0 <__i2b+0x28>)
 80079be:	f7fc fe6b 	bl	8004698 <__assert_func>
 80079c2:	2301      	movs	r3, #1
 80079c4:	6144      	str	r4, [r0, #20]
 80079c6:	6103      	str	r3, [r0, #16]
 80079c8:	bd10      	pop	{r4, pc}
 80079ca:	bf00      	nop
 80079cc:	080089b8 	.word	0x080089b8
 80079d0:	08008a29 	.word	0x08008a29

080079d4 <__multiply>:
 80079d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d8:	4691      	mov	r9, r2
 80079da:	690a      	ldr	r2, [r1, #16]
 80079dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80079e0:	460c      	mov	r4, r1
 80079e2:	429a      	cmp	r2, r3
 80079e4:	bfbe      	ittt	lt
 80079e6:	460b      	movlt	r3, r1
 80079e8:	464c      	movlt	r4, r9
 80079ea:	4699      	movlt	r9, r3
 80079ec:	6927      	ldr	r7, [r4, #16]
 80079ee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80079f2:	68a3      	ldr	r3, [r4, #8]
 80079f4:	6861      	ldr	r1, [r4, #4]
 80079f6:	eb07 060a 	add.w	r6, r7, sl
 80079fa:	42b3      	cmp	r3, r6
 80079fc:	b085      	sub	sp, #20
 80079fe:	bfb8      	it	lt
 8007a00:	3101      	addlt	r1, #1
 8007a02:	f7ff fe91 	bl	8007728 <_Balloc>
 8007a06:	b930      	cbnz	r0, 8007a16 <__multiply+0x42>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007a0e:	4b43      	ldr	r3, [pc, #268]	; (8007b1c <__multiply+0x148>)
 8007a10:	4843      	ldr	r0, [pc, #268]	; (8007b20 <__multiply+0x14c>)
 8007a12:	f7fc fe41 	bl	8004698 <__assert_func>
 8007a16:	f100 0514 	add.w	r5, r0, #20
 8007a1a:	462b      	mov	r3, r5
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a22:	4543      	cmp	r3, r8
 8007a24:	d321      	bcc.n	8007a6a <__multiply+0x96>
 8007a26:	f104 0314 	add.w	r3, r4, #20
 8007a2a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007a2e:	f109 0314 	add.w	r3, r9, #20
 8007a32:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007a36:	9202      	str	r2, [sp, #8]
 8007a38:	1b3a      	subs	r2, r7, r4
 8007a3a:	3a15      	subs	r2, #21
 8007a3c:	f022 0203 	bic.w	r2, r2, #3
 8007a40:	3204      	adds	r2, #4
 8007a42:	f104 0115 	add.w	r1, r4, #21
 8007a46:	428f      	cmp	r7, r1
 8007a48:	bf38      	it	cc
 8007a4a:	2204      	movcc	r2, #4
 8007a4c:	9201      	str	r2, [sp, #4]
 8007a4e:	9a02      	ldr	r2, [sp, #8]
 8007a50:	9303      	str	r3, [sp, #12]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d80c      	bhi.n	8007a70 <__multiply+0x9c>
 8007a56:	2e00      	cmp	r6, #0
 8007a58:	dd03      	ble.n	8007a62 <__multiply+0x8e>
 8007a5a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d05a      	beq.n	8007b18 <__multiply+0x144>
 8007a62:	6106      	str	r6, [r0, #16]
 8007a64:	b005      	add	sp, #20
 8007a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6a:	f843 2b04 	str.w	r2, [r3], #4
 8007a6e:	e7d8      	b.n	8007a22 <__multiply+0x4e>
 8007a70:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a74:	f1ba 0f00 	cmp.w	sl, #0
 8007a78:	d023      	beq.n	8007ac2 <__multiply+0xee>
 8007a7a:	46a9      	mov	r9, r5
 8007a7c:	f04f 0c00 	mov.w	ip, #0
 8007a80:	f104 0e14 	add.w	lr, r4, #20
 8007a84:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a88:	f8d9 1000 	ldr.w	r1, [r9]
 8007a8c:	fa1f fb82 	uxth.w	fp, r2
 8007a90:	b289      	uxth	r1, r1
 8007a92:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a96:	4461      	add	r1, ip
 8007a98:	f8d9 c000 	ldr.w	ip, [r9]
 8007a9c:	0c12      	lsrs	r2, r2, #16
 8007a9e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007aa2:	fb0a c202 	mla	r2, sl, r2, ip
 8007aa6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007aaa:	b289      	uxth	r1, r1
 8007aac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ab0:	4577      	cmp	r7, lr
 8007ab2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007ab6:	f849 1b04 	str.w	r1, [r9], #4
 8007aba:	d8e3      	bhi.n	8007a84 <__multiply+0xb0>
 8007abc:	9a01      	ldr	r2, [sp, #4]
 8007abe:	f845 c002 	str.w	ip, [r5, r2]
 8007ac2:	9a03      	ldr	r2, [sp, #12]
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007aca:	f1b9 0f00 	cmp.w	r9, #0
 8007ace:	d021      	beq.n	8007b14 <__multiply+0x140>
 8007ad0:	46ae      	mov	lr, r5
 8007ad2:	f04f 0a00 	mov.w	sl, #0
 8007ad6:	6829      	ldr	r1, [r5, #0]
 8007ad8:	f104 0c14 	add.w	ip, r4, #20
 8007adc:	f8bc b000 	ldrh.w	fp, [ip]
 8007ae0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007ae4:	b289      	uxth	r1, r1
 8007ae6:	fb09 220b 	mla	r2, r9, fp, r2
 8007aea:	4452      	add	r2, sl
 8007aec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007af0:	f84e 1b04 	str.w	r1, [lr], #4
 8007af4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007af8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007afc:	f8be 1000 	ldrh.w	r1, [lr]
 8007b00:	4567      	cmp	r7, ip
 8007b02:	fb09 110a 	mla	r1, r9, sl, r1
 8007b06:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007b0a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b0e:	d8e5      	bhi.n	8007adc <__multiply+0x108>
 8007b10:	9a01      	ldr	r2, [sp, #4]
 8007b12:	50a9      	str	r1, [r5, r2]
 8007b14:	3504      	adds	r5, #4
 8007b16:	e79a      	b.n	8007a4e <__multiply+0x7a>
 8007b18:	3e01      	subs	r6, #1
 8007b1a:	e79c      	b.n	8007a56 <__multiply+0x82>
 8007b1c:	080089b8 	.word	0x080089b8
 8007b20:	08008a29 	.word	0x08008a29

08007b24 <__pow5mult>:
 8007b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b28:	4615      	mov	r5, r2
 8007b2a:	f012 0203 	ands.w	r2, r2, #3
 8007b2e:	4606      	mov	r6, r0
 8007b30:	460f      	mov	r7, r1
 8007b32:	d007      	beq.n	8007b44 <__pow5mult+0x20>
 8007b34:	4c25      	ldr	r4, [pc, #148]	; (8007bcc <__pow5mult+0xa8>)
 8007b36:	3a01      	subs	r2, #1
 8007b38:	2300      	movs	r3, #0
 8007b3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b3e:	f7ff fe55 	bl	80077ec <__multadd>
 8007b42:	4607      	mov	r7, r0
 8007b44:	10ad      	asrs	r5, r5, #2
 8007b46:	d03d      	beq.n	8007bc4 <__pow5mult+0xa0>
 8007b48:	69f4      	ldr	r4, [r6, #28]
 8007b4a:	b97c      	cbnz	r4, 8007b6c <__pow5mult+0x48>
 8007b4c:	2010      	movs	r0, #16
 8007b4e:	f7ff fd25 	bl	800759c <malloc>
 8007b52:	4602      	mov	r2, r0
 8007b54:	61f0      	str	r0, [r6, #28]
 8007b56:	b928      	cbnz	r0, 8007b64 <__pow5mult+0x40>
 8007b58:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007b5c:	4b1c      	ldr	r3, [pc, #112]	; (8007bd0 <__pow5mult+0xac>)
 8007b5e:	481d      	ldr	r0, [pc, #116]	; (8007bd4 <__pow5mult+0xb0>)
 8007b60:	f7fc fd9a 	bl	8004698 <__assert_func>
 8007b64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b68:	6004      	str	r4, [r0, #0]
 8007b6a:	60c4      	str	r4, [r0, #12]
 8007b6c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007b70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b74:	b94c      	cbnz	r4, 8007b8a <__pow5mult+0x66>
 8007b76:	f240 2171 	movw	r1, #625	; 0x271
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	f7ff ff14 	bl	80079a8 <__i2b>
 8007b80:	2300      	movs	r3, #0
 8007b82:	4604      	mov	r4, r0
 8007b84:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b88:	6003      	str	r3, [r0, #0]
 8007b8a:	f04f 0900 	mov.w	r9, #0
 8007b8e:	07eb      	lsls	r3, r5, #31
 8007b90:	d50a      	bpl.n	8007ba8 <__pow5mult+0x84>
 8007b92:	4639      	mov	r1, r7
 8007b94:	4622      	mov	r2, r4
 8007b96:	4630      	mov	r0, r6
 8007b98:	f7ff ff1c 	bl	80079d4 <__multiply>
 8007b9c:	4680      	mov	r8, r0
 8007b9e:	4639      	mov	r1, r7
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	f7ff fe01 	bl	80077a8 <_Bfree>
 8007ba6:	4647      	mov	r7, r8
 8007ba8:	106d      	asrs	r5, r5, #1
 8007baa:	d00b      	beq.n	8007bc4 <__pow5mult+0xa0>
 8007bac:	6820      	ldr	r0, [r4, #0]
 8007bae:	b938      	cbnz	r0, 8007bc0 <__pow5mult+0x9c>
 8007bb0:	4622      	mov	r2, r4
 8007bb2:	4621      	mov	r1, r4
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	f7ff ff0d 	bl	80079d4 <__multiply>
 8007bba:	6020      	str	r0, [r4, #0]
 8007bbc:	f8c0 9000 	str.w	r9, [r0]
 8007bc0:	4604      	mov	r4, r0
 8007bc2:	e7e4      	b.n	8007b8e <__pow5mult+0x6a>
 8007bc4:	4638      	mov	r0, r7
 8007bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bca:	bf00      	nop
 8007bcc:	08008b78 	.word	0x08008b78
 8007bd0:	08008949 	.word	0x08008949
 8007bd4:	08008a29 	.word	0x08008a29

08007bd8 <__lshift>:
 8007bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bdc:	460c      	mov	r4, r1
 8007bde:	4607      	mov	r7, r0
 8007be0:	4691      	mov	r9, r2
 8007be2:	6923      	ldr	r3, [r4, #16]
 8007be4:	6849      	ldr	r1, [r1, #4]
 8007be6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007bea:	68a3      	ldr	r3, [r4, #8]
 8007bec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007bf0:	f108 0601 	add.w	r6, r8, #1
 8007bf4:	42b3      	cmp	r3, r6
 8007bf6:	db0b      	blt.n	8007c10 <__lshift+0x38>
 8007bf8:	4638      	mov	r0, r7
 8007bfa:	f7ff fd95 	bl	8007728 <_Balloc>
 8007bfe:	4605      	mov	r5, r0
 8007c00:	b948      	cbnz	r0, 8007c16 <__lshift+0x3e>
 8007c02:	4602      	mov	r2, r0
 8007c04:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007c08:	4b27      	ldr	r3, [pc, #156]	; (8007ca8 <__lshift+0xd0>)
 8007c0a:	4828      	ldr	r0, [pc, #160]	; (8007cac <__lshift+0xd4>)
 8007c0c:	f7fc fd44 	bl	8004698 <__assert_func>
 8007c10:	3101      	adds	r1, #1
 8007c12:	005b      	lsls	r3, r3, #1
 8007c14:	e7ee      	b.n	8007bf4 <__lshift+0x1c>
 8007c16:	2300      	movs	r3, #0
 8007c18:	f100 0114 	add.w	r1, r0, #20
 8007c1c:	f100 0210 	add.w	r2, r0, #16
 8007c20:	4618      	mov	r0, r3
 8007c22:	4553      	cmp	r3, sl
 8007c24:	db33      	blt.n	8007c8e <__lshift+0xb6>
 8007c26:	6920      	ldr	r0, [r4, #16]
 8007c28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c2c:	f104 0314 	add.w	r3, r4, #20
 8007c30:	f019 091f 	ands.w	r9, r9, #31
 8007c34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c3c:	d02b      	beq.n	8007c96 <__lshift+0xbe>
 8007c3e:	468a      	mov	sl, r1
 8007c40:	2200      	movs	r2, #0
 8007c42:	f1c9 0e20 	rsb	lr, r9, #32
 8007c46:	6818      	ldr	r0, [r3, #0]
 8007c48:	fa00 f009 	lsl.w	r0, r0, r9
 8007c4c:	4310      	orrs	r0, r2
 8007c4e:	f84a 0b04 	str.w	r0, [sl], #4
 8007c52:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c56:	459c      	cmp	ip, r3
 8007c58:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c5c:	d8f3      	bhi.n	8007c46 <__lshift+0x6e>
 8007c5e:	ebac 0304 	sub.w	r3, ip, r4
 8007c62:	3b15      	subs	r3, #21
 8007c64:	f023 0303 	bic.w	r3, r3, #3
 8007c68:	3304      	adds	r3, #4
 8007c6a:	f104 0015 	add.w	r0, r4, #21
 8007c6e:	4584      	cmp	ip, r0
 8007c70:	bf38      	it	cc
 8007c72:	2304      	movcc	r3, #4
 8007c74:	50ca      	str	r2, [r1, r3]
 8007c76:	b10a      	cbz	r2, 8007c7c <__lshift+0xa4>
 8007c78:	f108 0602 	add.w	r6, r8, #2
 8007c7c:	3e01      	subs	r6, #1
 8007c7e:	4638      	mov	r0, r7
 8007c80:	4621      	mov	r1, r4
 8007c82:	612e      	str	r6, [r5, #16]
 8007c84:	f7ff fd90 	bl	80077a8 <_Bfree>
 8007c88:	4628      	mov	r0, r5
 8007c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c92:	3301      	adds	r3, #1
 8007c94:	e7c5      	b.n	8007c22 <__lshift+0x4a>
 8007c96:	3904      	subs	r1, #4
 8007c98:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c9c:	459c      	cmp	ip, r3
 8007c9e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ca2:	d8f9      	bhi.n	8007c98 <__lshift+0xc0>
 8007ca4:	e7ea      	b.n	8007c7c <__lshift+0xa4>
 8007ca6:	bf00      	nop
 8007ca8:	080089b8 	.word	0x080089b8
 8007cac:	08008a29 	.word	0x08008a29

08007cb0 <__mcmp>:
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	690a      	ldr	r2, [r1, #16]
 8007cb4:	6900      	ldr	r0, [r0, #16]
 8007cb6:	b530      	push	{r4, r5, lr}
 8007cb8:	1a80      	subs	r0, r0, r2
 8007cba:	d10d      	bne.n	8007cd8 <__mcmp+0x28>
 8007cbc:	3314      	adds	r3, #20
 8007cbe:	3114      	adds	r1, #20
 8007cc0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007cc4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007cc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ccc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007cd0:	4295      	cmp	r5, r2
 8007cd2:	d002      	beq.n	8007cda <__mcmp+0x2a>
 8007cd4:	d304      	bcc.n	8007ce0 <__mcmp+0x30>
 8007cd6:	2001      	movs	r0, #1
 8007cd8:	bd30      	pop	{r4, r5, pc}
 8007cda:	42a3      	cmp	r3, r4
 8007cdc:	d3f4      	bcc.n	8007cc8 <__mcmp+0x18>
 8007cde:	e7fb      	b.n	8007cd8 <__mcmp+0x28>
 8007ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce4:	e7f8      	b.n	8007cd8 <__mcmp+0x28>
	...

08007ce8 <__mdiff>:
 8007ce8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cec:	460d      	mov	r5, r1
 8007cee:	4607      	mov	r7, r0
 8007cf0:	4611      	mov	r1, r2
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	4614      	mov	r4, r2
 8007cf6:	f7ff ffdb 	bl	8007cb0 <__mcmp>
 8007cfa:	1e06      	subs	r6, r0, #0
 8007cfc:	d111      	bne.n	8007d22 <__mdiff+0x3a>
 8007cfe:	4631      	mov	r1, r6
 8007d00:	4638      	mov	r0, r7
 8007d02:	f7ff fd11 	bl	8007728 <_Balloc>
 8007d06:	4602      	mov	r2, r0
 8007d08:	b928      	cbnz	r0, 8007d16 <__mdiff+0x2e>
 8007d0a:	f240 2137 	movw	r1, #567	; 0x237
 8007d0e:	4b3a      	ldr	r3, [pc, #232]	; (8007df8 <__mdiff+0x110>)
 8007d10:	483a      	ldr	r0, [pc, #232]	; (8007dfc <__mdiff+0x114>)
 8007d12:	f7fc fcc1 	bl	8004698 <__assert_func>
 8007d16:	2301      	movs	r3, #1
 8007d18:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007d1c:	4610      	mov	r0, r2
 8007d1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d22:	bfa4      	itt	ge
 8007d24:	4623      	movge	r3, r4
 8007d26:	462c      	movge	r4, r5
 8007d28:	4638      	mov	r0, r7
 8007d2a:	6861      	ldr	r1, [r4, #4]
 8007d2c:	bfa6      	itte	ge
 8007d2e:	461d      	movge	r5, r3
 8007d30:	2600      	movge	r6, #0
 8007d32:	2601      	movlt	r6, #1
 8007d34:	f7ff fcf8 	bl	8007728 <_Balloc>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	b918      	cbnz	r0, 8007d44 <__mdiff+0x5c>
 8007d3c:	f240 2145 	movw	r1, #581	; 0x245
 8007d40:	4b2d      	ldr	r3, [pc, #180]	; (8007df8 <__mdiff+0x110>)
 8007d42:	e7e5      	b.n	8007d10 <__mdiff+0x28>
 8007d44:	f102 0814 	add.w	r8, r2, #20
 8007d48:	46c2      	mov	sl, r8
 8007d4a:	f04f 0c00 	mov.w	ip, #0
 8007d4e:	6927      	ldr	r7, [r4, #16]
 8007d50:	60c6      	str	r6, [r0, #12]
 8007d52:	692e      	ldr	r6, [r5, #16]
 8007d54:	f104 0014 	add.w	r0, r4, #20
 8007d58:	f105 0914 	add.w	r9, r5, #20
 8007d5c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007d60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d64:	3410      	adds	r4, #16
 8007d66:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007d6a:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d6e:	fa1f f18b 	uxth.w	r1, fp
 8007d72:	4461      	add	r1, ip
 8007d74:	fa1f fc83 	uxth.w	ip, r3
 8007d78:	0c1b      	lsrs	r3, r3, #16
 8007d7a:	eba1 010c 	sub.w	r1, r1, ip
 8007d7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d82:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007d86:	b289      	uxth	r1, r1
 8007d88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007d8c:	454e      	cmp	r6, r9
 8007d8e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007d92:	f84a 1b04 	str.w	r1, [sl], #4
 8007d96:	d8e6      	bhi.n	8007d66 <__mdiff+0x7e>
 8007d98:	1b73      	subs	r3, r6, r5
 8007d9a:	3b15      	subs	r3, #21
 8007d9c:	f023 0303 	bic.w	r3, r3, #3
 8007da0:	3515      	adds	r5, #21
 8007da2:	3304      	adds	r3, #4
 8007da4:	42ae      	cmp	r6, r5
 8007da6:	bf38      	it	cc
 8007da8:	2304      	movcc	r3, #4
 8007daa:	4418      	add	r0, r3
 8007dac:	4443      	add	r3, r8
 8007dae:	461e      	mov	r6, r3
 8007db0:	4605      	mov	r5, r0
 8007db2:	4575      	cmp	r5, lr
 8007db4:	d30e      	bcc.n	8007dd4 <__mdiff+0xec>
 8007db6:	f10e 0103 	add.w	r1, lr, #3
 8007dba:	1a09      	subs	r1, r1, r0
 8007dbc:	f021 0103 	bic.w	r1, r1, #3
 8007dc0:	3803      	subs	r0, #3
 8007dc2:	4586      	cmp	lr, r0
 8007dc4:	bf38      	it	cc
 8007dc6:	2100      	movcc	r1, #0
 8007dc8:	440b      	add	r3, r1
 8007dca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007dce:	b189      	cbz	r1, 8007df4 <__mdiff+0x10c>
 8007dd0:	6117      	str	r7, [r2, #16]
 8007dd2:	e7a3      	b.n	8007d1c <__mdiff+0x34>
 8007dd4:	f855 8b04 	ldr.w	r8, [r5], #4
 8007dd8:	fa1f f188 	uxth.w	r1, r8
 8007ddc:	4461      	add	r1, ip
 8007dde:	140c      	asrs	r4, r1, #16
 8007de0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007de4:	b289      	uxth	r1, r1
 8007de6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007dea:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007dee:	f846 1b04 	str.w	r1, [r6], #4
 8007df2:	e7de      	b.n	8007db2 <__mdiff+0xca>
 8007df4:	3f01      	subs	r7, #1
 8007df6:	e7e8      	b.n	8007dca <__mdiff+0xe2>
 8007df8:	080089b8 	.word	0x080089b8
 8007dfc:	08008a29 	.word	0x08008a29

08007e00 <__ulp>:
 8007e00:	4b0e      	ldr	r3, [pc, #56]	; (8007e3c <__ulp+0x3c>)
 8007e02:	400b      	ands	r3, r1
 8007e04:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	dc08      	bgt.n	8007e1e <__ulp+0x1e>
 8007e0c:	425b      	negs	r3, r3
 8007e0e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007e12:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007e16:	da04      	bge.n	8007e22 <__ulp+0x22>
 8007e18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007e1c:	4113      	asrs	r3, r2
 8007e1e:	2200      	movs	r2, #0
 8007e20:	e008      	b.n	8007e34 <__ulp+0x34>
 8007e22:	f1a2 0314 	sub.w	r3, r2, #20
 8007e26:	2b1e      	cmp	r3, #30
 8007e28:	bfd6      	itet	le
 8007e2a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007e2e:	2201      	movgt	r2, #1
 8007e30:	40da      	lsrle	r2, r3
 8007e32:	2300      	movs	r3, #0
 8007e34:	4619      	mov	r1, r3
 8007e36:	4610      	mov	r0, r2
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	7ff00000 	.word	0x7ff00000

08007e40 <__b2d>:
 8007e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e42:	6905      	ldr	r5, [r0, #16]
 8007e44:	f100 0714 	add.w	r7, r0, #20
 8007e48:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007e4c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007e50:	1f2e      	subs	r6, r5, #4
 8007e52:	4620      	mov	r0, r4
 8007e54:	f7ff fd5a 	bl	800790c <__hi0bits>
 8007e58:	f1c0 0220 	rsb	r2, r0, #32
 8007e5c:	280a      	cmp	r0, #10
 8007e5e:	4603      	mov	r3, r0
 8007e60:	f8df c068 	ldr.w	ip, [pc, #104]	; 8007ecc <__b2d+0x8c>
 8007e64:	600a      	str	r2, [r1, #0]
 8007e66:	dc12      	bgt.n	8007e8e <__b2d+0x4e>
 8007e68:	f1c0 0e0b 	rsb	lr, r0, #11
 8007e6c:	fa24 f20e 	lsr.w	r2, r4, lr
 8007e70:	42b7      	cmp	r7, r6
 8007e72:	ea42 010c 	orr.w	r1, r2, ip
 8007e76:	bf2c      	ite	cs
 8007e78:	2200      	movcs	r2, #0
 8007e7a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007e7e:	3315      	adds	r3, #21
 8007e80:	fa04 f303 	lsl.w	r3, r4, r3
 8007e84:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e88:	431a      	orrs	r2, r3
 8007e8a:	4610      	mov	r0, r2
 8007e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e8e:	42b7      	cmp	r7, r6
 8007e90:	bf2e      	itee	cs
 8007e92:	2200      	movcs	r2, #0
 8007e94:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007e98:	f1a5 0608 	subcc.w	r6, r5, #8
 8007e9c:	3b0b      	subs	r3, #11
 8007e9e:	d012      	beq.n	8007ec6 <__b2d+0x86>
 8007ea0:	f1c3 0520 	rsb	r5, r3, #32
 8007ea4:	fa22 f105 	lsr.w	r1, r2, r5
 8007ea8:	409c      	lsls	r4, r3
 8007eaa:	430c      	orrs	r4, r1
 8007eac:	42be      	cmp	r6, r7
 8007eae:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8007eb2:	bf94      	ite	ls
 8007eb4:	2400      	movls	r4, #0
 8007eb6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007eba:	409a      	lsls	r2, r3
 8007ebc:	40ec      	lsrs	r4, r5
 8007ebe:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007ec2:	4322      	orrs	r2, r4
 8007ec4:	e7e1      	b.n	8007e8a <__b2d+0x4a>
 8007ec6:	ea44 010c 	orr.w	r1, r4, ip
 8007eca:	e7de      	b.n	8007e8a <__b2d+0x4a>
 8007ecc:	3ff00000 	.word	0x3ff00000

08007ed0 <__d2b>:
 8007ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ed2:	2101      	movs	r1, #1
 8007ed4:	4617      	mov	r7, r2
 8007ed6:	461c      	mov	r4, r3
 8007ed8:	9e08      	ldr	r6, [sp, #32]
 8007eda:	f7ff fc25 	bl	8007728 <_Balloc>
 8007ede:	4605      	mov	r5, r0
 8007ee0:	b930      	cbnz	r0, 8007ef0 <__d2b+0x20>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	f240 310f 	movw	r1, #783	; 0x30f
 8007ee8:	4b22      	ldr	r3, [pc, #136]	; (8007f74 <__d2b+0xa4>)
 8007eea:	4823      	ldr	r0, [pc, #140]	; (8007f78 <__d2b+0xa8>)
 8007eec:	f7fc fbd4 	bl	8004698 <__assert_func>
 8007ef0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007ef4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007ef8:	bb24      	cbnz	r4, 8007f44 <__d2b+0x74>
 8007efa:	2f00      	cmp	r7, #0
 8007efc:	9301      	str	r3, [sp, #4]
 8007efe:	d026      	beq.n	8007f4e <__d2b+0x7e>
 8007f00:	4668      	mov	r0, sp
 8007f02:	9700      	str	r7, [sp, #0]
 8007f04:	f7ff fd22 	bl	800794c <__lo0bits>
 8007f08:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f0c:	b1e8      	cbz	r0, 8007f4a <__d2b+0x7a>
 8007f0e:	f1c0 0320 	rsb	r3, r0, #32
 8007f12:	fa02 f303 	lsl.w	r3, r2, r3
 8007f16:	430b      	orrs	r3, r1
 8007f18:	40c2      	lsrs	r2, r0
 8007f1a:	616b      	str	r3, [r5, #20]
 8007f1c:	9201      	str	r2, [sp, #4]
 8007f1e:	9b01      	ldr	r3, [sp, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	bf14      	ite	ne
 8007f24:	2102      	movne	r1, #2
 8007f26:	2101      	moveq	r1, #1
 8007f28:	61ab      	str	r3, [r5, #24]
 8007f2a:	6129      	str	r1, [r5, #16]
 8007f2c:	b1bc      	cbz	r4, 8007f5e <__d2b+0x8e>
 8007f2e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007f32:	4404      	add	r4, r0
 8007f34:	6034      	str	r4, [r6, #0]
 8007f36:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f3c:	6018      	str	r0, [r3, #0]
 8007f3e:	4628      	mov	r0, r5
 8007f40:	b003      	add	sp, #12
 8007f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f48:	e7d7      	b.n	8007efa <__d2b+0x2a>
 8007f4a:	6169      	str	r1, [r5, #20]
 8007f4c:	e7e7      	b.n	8007f1e <__d2b+0x4e>
 8007f4e:	a801      	add	r0, sp, #4
 8007f50:	f7ff fcfc 	bl	800794c <__lo0bits>
 8007f54:	9b01      	ldr	r3, [sp, #4]
 8007f56:	2101      	movs	r1, #1
 8007f58:	616b      	str	r3, [r5, #20]
 8007f5a:	3020      	adds	r0, #32
 8007f5c:	e7e5      	b.n	8007f2a <__d2b+0x5a>
 8007f5e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f62:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007f66:	6030      	str	r0, [r6, #0]
 8007f68:	6918      	ldr	r0, [r3, #16]
 8007f6a:	f7ff fccf 	bl	800790c <__hi0bits>
 8007f6e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007f72:	e7e2      	b.n	8007f3a <__d2b+0x6a>
 8007f74:	080089b8 	.word	0x080089b8
 8007f78:	08008a29 	.word	0x08008a29

08007f7c <__ratio>:
 8007f7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f80:	4688      	mov	r8, r1
 8007f82:	4669      	mov	r1, sp
 8007f84:	4681      	mov	r9, r0
 8007f86:	f7ff ff5b 	bl	8007e40 <__b2d>
 8007f8a:	460f      	mov	r7, r1
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	460d      	mov	r5, r1
 8007f90:	4640      	mov	r0, r8
 8007f92:	a901      	add	r1, sp, #4
 8007f94:	f7ff ff54 	bl	8007e40 <__b2d>
 8007f98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007f9c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007fa0:	468b      	mov	fp, r1
 8007fa2:	eba3 0c02 	sub.w	ip, r3, r2
 8007fa6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007faa:	1a9b      	subs	r3, r3, r2
 8007fac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	bfd5      	itete	le
 8007fb4:	460a      	movle	r2, r1
 8007fb6:	462a      	movgt	r2, r5
 8007fb8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007fbc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007fc0:	bfd8      	it	le
 8007fc2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007fc6:	465b      	mov	r3, fp
 8007fc8:	4602      	mov	r2, r0
 8007fca:	4639      	mov	r1, r7
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f7f8 fbad 	bl	800072c <__aeabi_ddiv>
 8007fd2:	b003      	add	sp, #12
 8007fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007fd8 <__copybits>:
 8007fd8:	3901      	subs	r1, #1
 8007fda:	b570      	push	{r4, r5, r6, lr}
 8007fdc:	1149      	asrs	r1, r1, #5
 8007fde:	6914      	ldr	r4, [r2, #16]
 8007fe0:	3101      	adds	r1, #1
 8007fe2:	f102 0314 	add.w	r3, r2, #20
 8007fe6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007fea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007fee:	1f05      	subs	r5, r0, #4
 8007ff0:	42a3      	cmp	r3, r4
 8007ff2:	d30c      	bcc.n	800800e <__copybits+0x36>
 8007ff4:	1aa3      	subs	r3, r4, r2
 8007ff6:	3b11      	subs	r3, #17
 8007ff8:	f023 0303 	bic.w	r3, r3, #3
 8007ffc:	3211      	adds	r2, #17
 8007ffe:	42a2      	cmp	r2, r4
 8008000:	bf88      	it	hi
 8008002:	2300      	movhi	r3, #0
 8008004:	4418      	add	r0, r3
 8008006:	2300      	movs	r3, #0
 8008008:	4288      	cmp	r0, r1
 800800a:	d305      	bcc.n	8008018 <__copybits+0x40>
 800800c:	bd70      	pop	{r4, r5, r6, pc}
 800800e:	f853 6b04 	ldr.w	r6, [r3], #4
 8008012:	f845 6f04 	str.w	r6, [r5, #4]!
 8008016:	e7eb      	b.n	8007ff0 <__copybits+0x18>
 8008018:	f840 3b04 	str.w	r3, [r0], #4
 800801c:	e7f4      	b.n	8008008 <__copybits+0x30>

0800801e <__any_on>:
 800801e:	f100 0214 	add.w	r2, r0, #20
 8008022:	6900      	ldr	r0, [r0, #16]
 8008024:	114b      	asrs	r3, r1, #5
 8008026:	4298      	cmp	r0, r3
 8008028:	b510      	push	{r4, lr}
 800802a:	db11      	blt.n	8008050 <__any_on+0x32>
 800802c:	dd0a      	ble.n	8008044 <__any_on+0x26>
 800802e:	f011 011f 	ands.w	r1, r1, #31
 8008032:	d007      	beq.n	8008044 <__any_on+0x26>
 8008034:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008038:	fa24 f001 	lsr.w	r0, r4, r1
 800803c:	fa00 f101 	lsl.w	r1, r0, r1
 8008040:	428c      	cmp	r4, r1
 8008042:	d10b      	bne.n	800805c <__any_on+0x3e>
 8008044:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008048:	4293      	cmp	r3, r2
 800804a:	d803      	bhi.n	8008054 <__any_on+0x36>
 800804c:	2000      	movs	r0, #0
 800804e:	bd10      	pop	{r4, pc}
 8008050:	4603      	mov	r3, r0
 8008052:	e7f7      	b.n	8008044 <__any_on+0x26>
 8008054:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008058:	2900      	cmp	r1, #0
 800805a:	d0f5      	beq.n	8008048 <__any_on+0x2a>
 800805c:	2001      	movs	r0, #1
 800805e:	e7f6      	b.n	800804e <__any_on+0x30>

08008060 <__ascii_wctomb>:
 8008060:	4603      	mov	r3, r0
 8008062:	4608      	mov	r0, r1
 8008064:	b141      	cbz	r1, 8008078 <__ascii_wctomb+0x18>
 8008066:	2aff      	cmp	r2, #255	; 0xff
 8008068:	d904      	bls.n	8008074 <__ascii_wctomb+0x14>
 800806a:	228a      	movs	r2, #138	; 0x8a
 800806c:	f04f 30ff 	mov.w	r0, #4294967295
 8008070:	601a      	str	r2, [r3, #0]
 8008072:	4770      	bx	lr
 8008074:	2001      	movs	r0, #1
 8008076:	700a      	strb	r2, [r1, #0]
 8008078:	4770      	bx	lr

0800807a <__sfputc_r>:
 800807a:	6893      	ldr	r3, [r2, #8]
 800807c:	b410      	push	{r4}
 800807e:	3b01      	subs	r3, #1
 8008080:	2b00      	cmp	r3, #0
 8008082:	6093      	str	r3, [r2, #8]
 8008084:	da07      	bge.n	8008096 <__sfputc_r+0x1c>
 8008086:	6994      	ldr	r4, [r2, #24]
 8008088:	42a3      	cmp	r3, r4
 800808a:	db01      	blt.n	8008090 <__sfputc_r+0x16>
 800808c:	290a      	cmp	r1, #10
 800808e:	d102      	bne.n	8008096 <__sfputc_r+0x1c>
 8008090:	bc10      	pop	{r4}
 8008092:	f7fd bf24 	b.w	8005ede <__swbuf_r>
 8008096:	6813      	ldr	r3, [r2, #0]
 8008098:	1c58      	adds	r0, r3, #1
 800809a:	6010      	str	r0, [r2, #0]
 800809c:	7019      	strb	r1, [r3, #0]
 800809e:	4608      	mov	r0, r1
 80080a0:	bc10      	pop	{r4}
 80080a2:	4770      	bx	lr

080080a4 <__sfputs_r>:
 80080a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a6:	4606      	mov	r6, r0
 80080a8:	460f      	mov	r7, r1
 80080aa:	4614      	mov	r4, r2
 80080ac:	18d5      	adds	r5, r2, r3
 80080ae:	42ac      	cmp	r4, r5
 80080b0:	d101      	bne.n	80080b6 <__sfputs_r+0x12>
 80080b2:	2000      	movs	r0, #0
 80080b4:	e007      	b.n	80080c6 <__sfputs_r+0x22>
 80080b6:	463a      	mov	r2, r7
 80080b8:	4630      	mov	r0, r6
 80080ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080be:	f7ff ffdc 	bl	800807a <__sfputc_r>
 80080c2:	1c43      	adds	r3, r0, #1
 80080c4:	d1f3      	bne.n	80080ae <__sfputs_r+0xa>
 80080c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080080c8 <_vfiprintf_r>:
 80080c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080cc:	460d      	mov	r5, r1
 80080ce:	4614      	mov	r4, r2
 80080d0:	4698      	mov	r8, r3
 80080d2:	4606      	mov	r6, r0
 80080d4:	b09d      	sub	sp, #116	; 0x74
 80080d6:	b118      	cbz	r0, 80080e0 <_vfiprintf_r+0x18>
 80080d8:	6a03      	ldr	r3, [r0, #32]
 80080da:	b90b      	cbnz	r3, 80080e0 <_vfiprintf_r+0x18>
 80080dc:	f7fd fe06 	bl	8005cec <__sinit>
 80080e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080e2:	07d9      	lsls	r1, r3, #31
 80080e4:	d405      	bmi.n	80080f2 <_vfiprintf_r+0x2a>
 80080e6:	89ab      	ldrh	r3, [r5, #12]
 80080e8:	059a      	lsls	r2, r3, #22
 80080ea:	d402      	bmi.n	80080f2 <_vfiprintf_r+0x2a>
 80080ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080ee:	f7fe f81a 	bl	8006126 <__retarget_lock_acquire_recursive>
 80080f2:	89ab      	ldrh	r3, [r5, #12]
 80080f4:	071b      	lsls	r3, r3, #28
 80080f6:	d501      	bpl.n	80080fc <_vfiprintf_r+0x34>
 80080f8:	692b      	ldr	r3, [r5, #16]
 80080fa:	b99b      	cbnz	r3, 8008124 <_vfiprintf_r+0x5c>
 80080fc:	4629      	mov	r1, r5
 80080fe:	4630      	mov	r0, r6
 8008100:	f7fd ff2a 	bl	8005f58 <__swsetup_r>
 8008104:	b170      	cbz	r0, 8008124 <_vfiprintf_r+0x5c>
 8008106:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008108:	07dc      	lsls	r4, r3, #31
 800810a:	d504      	bpl.n	8008116 <_vfiprintf_r+0x4e>
 800810c:	f04f 30ff 	mov.w	r0, #4294967295
 8008110:	b01d      	add	sp, #116	; 0x74
 8008112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008116:	89ab      	ldrh	r3, [r5, #12]
 8008118:	0598      	lsls	r0, r3, #22
 800811a:	d4f7      	bmi.n	800810c <_vfiprintf_r+0x44>
 800811c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800811e:	f7fe f803 	bl	8006128 <__retarget_lock_release_recursive>
 8008122:	e7f3      	b.n	800810c <_vfiprintf_r+0x44>
 8008124:	2300      	movs	r3, #0
 8008126:	9309      	str	r3, [sp, #36]	; 0x24
 8008128:	2320      	movs	r3, #32
 800812a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800812e:	2330      	movs	r3, #48	; 0x30
 8008130:	f04f 0901 	mov.w	r9, #1
 8008134:	f8cd 800c 	str.w	r8, [sp, #12]
 8008138:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80082e8 <_vfiprintf_r+0x220>
 800813c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008140:	4623      	mov	r3, r4
 8008142:	469a      	mov	sl, r3
 8008144:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008148:	b10a      	cbz	r2, 800814e <_vfiprintf_r+0x86>
 800814a:	2a25      	cmp	r2, #37	; 0x25
 800814c:	d1f9      	bne.n	8008142 <_vfiprintf_r+0x7a>
 800814e:	ebba 0b04 	subs.w	fp, sl, r4
 8008152:	d00b      	beq.n	800816c <_vfiprintf_r+0xa4>
 8008154:	465b      	mov	r3, fp
 8008156:	4622      	mov	r2, r4
 8008158:	4629      	mov	r1, r5
 800815a:	4630      	mov	r0, r6
 800815c:	f7ff ffa2 	bl	80080a4 <__sfputs_r>
 8008160:	3001      	adds	r0, #1
 8008162:	f000 80a9 	beq.w	80082b8 <_vfiprintf_r+0x1f0>
 8008166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008168:	445a      	add	r2, fp
 800816a:	9209      	str	r2, [sp, #36]	; 0x24
 800816c:	f89a 3000 	ldrb.w	r3, [sl]
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 80a1 	beq.w	80082b8 <_vfiprintf_r+0x1f0>
 8008176:	2300      	movs	r3, #0
 8008178:	f04f 32ff 	mov.w	r2, #4294967295
 800817c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008180:	f10a 0a01 	add.w	sl, sl, #1
 8008184:	9304      	str	r3, [sp, #16]
 8008186:	9307      	str	r3, [sp, #28]
 8008188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800818c:	931a      	str	r3, [sp, #104]	; 0x68
 800818e:	4654      	mov	r4, sl
 8008190:	2205      	movs	r2, #5
 8008192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008196:	4854      	ldr	r0, [pc, #336]	; (80082e8 <_vfiprintf_r+0x220>)
 8008198:	f7fd ffc7 	bl	800612a <memchr>
 800819c:	9a04      	ldr	r2, [sp, #16]
 800819e:	b9d8      	cbnz	r0, 80081d8 <_vfiprintf_r+0x110>
 80081a0:	06d1      	lsls	r1, r2, #27
 80081a2:	bf44      	itt	mi
 80081a4:	2320      	movmi	r3, #32
 80081a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081aa:	0713      	lsls	r3, r2, #28
 80081ac:	bf44      	itt	mi
 80081ae:	232b      	movmi	r3, #43	; 0x2b
 80081b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081b4:	f89a 3000 	ldrb.w	r3, [sl]
 80081b8:	2b2a      	cmp	r3, #42	; 0x2a
 80081ba:	d015      	beq.n	80081e8 <_vfiprintf_r+0x120>
 80081bc:	4654      	mov	r4, sl
 80081be:	2000      	movs	r0, #0
 80081c0:	f04f 0c0a 	mov.w	ip, #10
 80081c4:	9a07      	ldr	r2, [sp, #28]
 80081c6:	4621      	mov	r1, r4
 80081c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081cc:	3b30      	subs	r3, #48	; 0x30
 80081ce:	2b09      	cmp	r3, #9
 80081d0:	d94d      	bls.n	800826e <_vfiprintf_r+0x1a6>
 80081d2:	b1b0      	cbz	r0, 8008202 <_vfiprintf_r+0x13a>
 80081d4:	9207      	str	r2, [sp, #28]
 80081d6:	e014      	b.n	8008202 <_vfiprintf_r+0x13a>
 80081d8:	eba0 0308 	sub.w	r3, r0, r8
 80081dc:	fa09 f303 	lsl.w	r3, r9, r3
 80081e0:	4313      	orrs	r3, r2
 80081e2:	46a2      	mov	sl, r4
 80081e4:	9304      	str	r3, [sp, #16]
 80081e6:	e7d2      	b.n	800818e <_vfiprintf_r+0xc6>
 80081e8:	9b03      	ldr	r3, [sp, #12]
 80081ea:	1d19      	adds	r1, r3, #4
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	9103      	str	r1, [sp, #12]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	bfbb      	ittet	lt
 80081f4:	425b      	neglt	r3, r3
 80081f6:	f042 0202 	orrlt.w	r2, r2, #2
 80081fa:	9307      	strge	r3, [sp, #28]
 80081fc:	9307      	strlt	r3, [sp, #28]
 80081fe:	bfb8      	it	lt
 8008200:	9204      	strlt	r2, [sp, #16]
 8008202:	7823      	ldrb	r3, [r4, #0]
 8008204:	2b2e      	cmp	r3, #46	; 0x2e
 8008206:	d10c      	bne.n	8008222 <_vfiprintf_r+0x15a>
 8008208:	7863      	ldrb	r3, [r4, #1]
 800820a:	2b2a      	cmp	r3, #42	; 0x2a
 800820c:	d134      	bne.n	8008278 <_vfiprintf_r+0x1b0>
 800820e:	9b03      	ldr	r3, [sp, #12]
 8008210:	3402      	adds	r4, #2
 8008212:	1d1a      	adds	r2, r3, #4
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	9203      	str	r2, [sp, #12]
 8008218:	2b00      	cmp	r3, #0
 800821a:	bfb8      	it	lt
 800821c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008220:	9305      	str	r3, [sp, #20]
 8008222:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80082ec <_vfiprintf_r+0x224>
 8008226:	2203      	movs	r2, #3
 8008228:	4650      	mov	r0, sl
 800822a:	7821      	ldrb	r1, [r4, #0]
 800822c:	f7fd ff7d 	bl	800612a <memchr>
 8008230:	b138      	cbz	r0, 8008242 <_vfiprintf_r+0x17a>
 8008232:	2240      	movs	r2, #64	; 0x40
 8008234:	9b04      	ldr	r3, [sp, #16]
 8008236:	eba0 000a 	sub.w	r0, r0, sl
 800823a:	4082      	lsls	r2, r0
 800823c:	4313      	orrs	r3, r2
 800823e:	3401      	adds	r4, #1
 8008240:	9304      	str	r3, [sp, #16]
 8008242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008246:	2206      	movs	r2, #6
 8008248:	4829      	ldr	r0, [pc, #164]	; (80082f0 <_vfiprintf_r+0x228>)
 800824a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800824e:	f7fd ff6c 	bl	800612a <memchr>
 8008252:	2800      	cmp	r0, #0
 8008254:	d03f      	beq.n	80082d6 <_vfiprintf_r+0x20e>
 8008256:	4b27      	ldr	r3, [pc, #156]	; (80082f4 <_vfiprintf_r+0x22c>)
 8008258:	bb1b      	cbnz	r3, 80082a2 <_vfiprintf_r+0x1da>
 800825a:	9b03      	ldr	r3, [sp, #12]
 800825c:	3307      	adds	r3, #7
 800825e:	f023 0307 	bic.w	r3, r3, #7
 8008262:	3308      	adds	r3, #8
 8008264:	9303      	str	r3, [sp, #12]
 8008266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008268:	443b      	add	r3, r7
 800826a:	9309      	str	r3, [sp, #36]	; 0x24
 800826c:	e768      	b.n	8008140 <_vfiprintf_r+0x78>
 800826e:	460c      	mov	r4, r1
 8008270:	2001      	movs	r0, #1
 8008272:	fb0c 3202 	mla	r2, ip, r2, r3
 8008276:	e7a6      	b.n	80081c6 <_vfiprintf_r+0xfe>
 8008278:	2300      	movs	r3, #0
 800827a:	f04f 0c0a 	mov.w	ip, #10
 800827e:	4619      	mov	r1, r3
 8008280:	3401      	adds	r4, #1
 8008282:	9305      	str	r3, [sp, #20]
 8008284:	4620      	mov	r0, r4
 8008286:	f810 2b01 	ldrb.w	r2, [r0], #1
 800828a:	3a30      	subs	r2, #48	; 0x30
 800828c:	2a09      	cmp	r2, #9
 800828e:	d903      	bls.n	8008298 <_vfiprintf_r+0x1d0>
 8008290:	2b00      	cmp	r3, #0
 8008292:	d0c6      	beq.n	8008222 <_vfiprintf_r+0x15a>
 8008294:	9105      	str	r1, [sp, #20]
 8008296:	e7c4      	b.n	8008222 <_vfiprintf_r+0x15a>
 8008298:	4604      	mov	r4, r0
 800829a:	2301      	movs	r3, #1
 800829c:	fb0c 2101 	mla	r1, ip, r1, r2
 80082a0:	e7f0      	b.n	8008284 <_vfiprintf_r+0x1bc>
 80082a2:	ab03      	add	r3, sp, #12
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	462a      	mov	r2, r5
 80082a8:	4630      	mov	r0, r6
 80082aa:	4b13      	ldr	r3, [pc, #76]	; (80082f8 <_vfiprintf_r+0x230>)
 80082ac:	a904      	add	r1, sp, #16
 80082ae:	f7fd f8cf 	bl	8005450 <_printf_float>
 80082b2:	4607      	mov	r7, r0
 80082b4:	1c78      	adds	r0, r7, #1
 80082b6:	d1d6      	bne.n	8008266 <_vfiprintf_r+0x19e>
 80082b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082ba:	07d9      	lsls	r1, r3, #31
 80082bc:	d405      	bmi.n	80082ca <_vfiprintf_r+0x202>
 80082be:	89ab      	ldrh	r3, [r5, #12]
 80082c0:	059a      	lsls	r2, r3, #22
 80082c2:	d402      	bmi.n	80082ca <_vfiprintf_r+0x202>
 80082c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082c6:	f7fd ff2f 	bl	8006128 <__retarget_lock_release_recursive>
 80082ca:	89ab      	ldrh	r3, [r5, #12]
 80082cc:	065b      	lsls	r3, r3, #25
 80082ce:	f53f af1d 	bmi.w	800810c <_vfiprintf_r+0x44>
 80082d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082d4:	e71c      	b.n	8008110 <_vfiprintf_r+0x48>
 80082d6:	ab03      	add	r3, sp, #12
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	462a      	mov	r2, r5
 80082dc:	4630      	mov	r0, r6
 80082de:	4b06      	ldr	r3, [pc, #24]	; (80082f8 <_vfiprintf_r+0x230>)
 80082e0:	a904      	add	r1, sp, #16
 80082e2:	f7fd fb55 	bl	8005990 <_printf_i>
 80082e6:	e7e4      	b.n	80082b2 <_vfiprintf_r+0x1ea>
 80082e8:	08008c85 	.word	0x08008c85
 80082ec:	08008c8b 	.word	0x08008c8b
 80082f0:	08008c8f 	.word	0x08008c8f
 80082f4:	08005451 	.word	0x08005451
 80082f8:	080080a5 	.word	0x080080a5

080082fc <__sflush_r>:
 80082fc:	898a      	ldrh	r2, [r1, #12]
 80082fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008300:	4605      	mov	r5, r0
 8008302:	0710      	lsls	r0, r2, #28
 8008304:	460c      	mov	r4, r1
 8008306:	d457      	bmi.n	80083b8 <__sflush_r+0xbc>
 8008308:	684b      	ldr	r3, [r1, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	dc04      	bgt.n	8008318 <__sflush_r+0x1c>
 800830e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008310:	2b00      	cmp	r3, #0
 8008312:	dc01      	bgt.n	8008318 <__sflush_r+0x1c>
 8008314:	2000      	movs	r0, #0
 8008316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008318:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800831a:	2e00      	cmp	r6, #0
 800831c:	d0fa      	beq.n	8008314 <__sflush_r+0x18>
 800831e:	2300      	movs	r3, #0
 8008320:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008324:	682f      	ldr	r7, [r5, #0]
 8008326:	6a21      	ldr	r1, [r4, #32]
 8008328:	602b      	str	r3, [r5, #0]
 800832a:	d032      	beq.n	8008392 <__sflush_r+0x96>
 800832c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800832e:	89a3      	ldrh	r3, [r4, #12]
 8008330:	075a      	lsls	r2, r3, #29
 8008332:	d505      	bpl.n	8008340 <__sflush_r+0x44>
 8008334:	6863      	ldr	r3, [r4, #4]
 8008336:	1ac0      	subs	r0, r0, r3
 8008338:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800833a:	b10b      	cbz	r3, 8008340 <__sflush_r+0x44>
 800833c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800833e:	1ac0      	subs	r0, r0, r3
 8008340:	2300      	movs	r3, #0
 8008342:	4602      	mov	r2, r0
 8008344:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008346:	4628      	mov	r0, r5
 8008348:	6a21      	ldr	r1, [r4, #32]
 800834a:	47b0      	blx	r6
 800834c:	1c43      	adds	r3, r0, #1
 800834e:	89a3      	ldrh	r3, [r4, #12]
 8008350:	d106      	bne.n	8008360 <__sflush_r+0x64>
 8008352:	6829      	ldr	r1, [r5, #0]
 8008354:	291d      	cmp	r1, #29
 8008356:	d82b      	bhi.n	80083b0 <__sflush_r+0xb4>
 8008358:	4a28      	ldr	r2, [pc, #160]	; (80083fc <__sflush_r+0x100>)
 800835a:	410a      	asrs	r2, r1
 800835c:	07d6      	lsls	r6, r2, #31
 800835e:	d427      	bmi.n	80083b0 <__sflush_r+0xb4>
 8008360:	2200      	movs	r2, #0
 8008362:	6062      	str	r2, [r4, #4]
 8008364:	6922      	ldr	r2, [r4, #16]
 8008366:	04d9      	lsls	r1, r3, #19
 8008368:	6022      	str	r2, [r4, #0]
 800836a:	d504      	bpl.n	8008376 <__sflush_r+0x7a>
 800836c:	1c42      	adds	r2, r0, #1
 800836e:	d101      	bne.n	8008374 <__sflush_r+0x78>
 8008370:	682b      	ldr	r3, [r5, #0]
 8008372:	b903      	cbnz	r3, 8008376 <__sflush_r+0x7a>
 8008374:	6560      	str	r0, [r4, #84]	; 0x54
 8008376:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008378:	602f      	str	r7, [r5, #0]
 800837a:	2900      	cmp	r1, #0
 800837c:	d0ca      	beq.n	8008314 <__sflush_r+0x18>
 800837e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008382:	4299      	cmp	r1, r3
 8008384:	d002      	beq.n	800838c <__sflush_r+0x90>
 8008386:	4628      	mov	r0, r5
 8008388:	f7fe fd66 	bl	8006e58 <_free_r>
 800838c:	2000      	movs	r0, #0
 800838e:	6360      	str	r0, [r4, #52]	; 0x34
 8008390:	e7c1      	b.n	8008316 <__sflush_r+0x1a>
 8008392:	2301      	movs	r3, #1
 8008394:	4628      	mov	r0, r5
 8008396:	47b0      	blx	r6
 8008398:	1c41      	adds	r1, r0, #1
 800839a:	d1c8      	bne.n	800832e <__sflush_r+0x32>
 800839c:	682b      	ldr	r3, [r5, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d0c5      	beq.n	800832e <__sflush_r+0x32>
 80083a2:	2b1d      	cmp	r3, #29
 80083a4:	d001      	beq.n	80083aa <__sflush_r+0xae>
 80083a6:	2b16      	cmp	r3, #22
 80083a8:	d101      	bne.n	80083ae <__sflush_r+0xb2>
 80083aa:	602f      	str	r7, [r5, #0]
 80083ac:	e7b2      	b.n	8008314 <__sflush_r+0x18>
 80083ae:	89a3      	ldrh	r3, [r4, #12]
 80083b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083b4:	81a3      	strh	r3, [r4, #12]
 80083b6:	e7ae      	b.n	8008316 <__sflush_r+0x1a>
 80083b8:	690f      	ldr	r7, [r1, #16]
 80083ba:	2f00      	cmp	r7, #0
 80083bc:	d0aa      	beq.n	8008314 <__sflush_r+0x18>
 80083be:	0793      	lsls	r3, r2, #30
 80083c0:	bf18      	it	ne
 80083c2:	2300      	movne	r3, #0
 80083c4:	680e      	ldr	r6, [r1, #0]
 80083c6:	bf08      	it	eq
 80083c8:	694b      	ldreq	r3, [r1, #20]
 80083ca:	1bf6      	subs	r6, r6, r7
 80083cc:	600f      	str	r7, [r1, #0]
 80083ce:	608b      	str	r3, [r1, #8]
 80083d0:	2e00      	cmp	r6, #0
 80083d2:	dd9f      	ble.n	8008314 <__sflush_r+0x18>
 80083d4:	4633      	mov	r3, r6
 80083d6:	463a      	mov	r2, r7
 80083d8:	4628      	mov	r0, r5
 80083da:	6a21      	ldr	r1, [r4, #32]
 80083dc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80083e0:	47e0      	blx	ip
 80083e2:	2800      	cmp	r0, #0
 80083e4:	dc06      	bgt.n	80083f4 <__sflush_r+0xf8>
 80083e6:	89a3      	ldrh	r3, [r4, #12]
 80083e8:	f04f 30ff 	mov.w	r0, #4294967295
 80083ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083f0:	81a3      	strh	r3, [r4, #12]
 80083f2:	e790      	b.n	8008316 <__sflush_r+0x1a>
 80083f4:	4407      	add	r7, r0
 80083f6:	1a36      	subs	r6, r6, r0
 80083f8:	e7ea      	b.n	80083d0 <__sflush_r+0xd4>
 80083fa:	bf00      	nop
 80083fc:	dfbffffe 	.word	0xdfbffffe

08008400 <_fflush_r>:
 8008400:	b538      	push	{r3, r4, r5, lr}
 8008402:	690b      	ldr	r3, [r1, #16]
 8008404:	4605      	mov	r5, r0
 8008406:	460c      	mov	r4, r1
 8008408:	b913      	cbnz	r3, 8008410 <_fflush_r+0x10>
 800840a:	2500      	movs	r5, #0
 800840c:	4628      	mov	r0, r5
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	b118      	cbz	r0, 800841a <_fflush_r+0x1a>
 8008412:	6a03      	ldr	r3, [r0, #32]
 8008414:	b90b      	cbnz	r3, 800841a <_fflush_r+0x1a>
 8008416:	f7fd fc69 	bl	8005cec <__sinit>
 800841a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d0f3      	beq.n	800840a <_fflush_r+0xa>
 8008422:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008424:	07d0      	lsls	r0, r2, #31
 8008426:	d404      	bmi.n	8008432 <_fflush_r+0x32>
 8008428:	0599      	lsls	r1, r3, #22
 800842a:	d402      	bmi.n	8008432 <_fflush_r+0x32>
 800842c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800842e:	f7fd fe7a 	bl	8006126 <__retarget_lock_acquire_recursive>
 8008432:	4628      	mov	r0, r5
 8008434:	4621      	mov	r1, r4
 8008436:	f7ff ff61 	bl	80082fc <__sflush_r>
 800843a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800843c:	4605      	mov	r5, r0
 800843e:	07da      	lsls	r2, r3, #31
 8008440:	d4e4      	bmi.n	800840c <_fflush_r+0xc>
 8008442:	89a3      	ldrh	r3, [r4, #12]
 8008444:	059b      	lsls	r3, r3, #22
 8008446:	d4e1      	bmi.n	800840c <_fflush_r+0xc>
 8008448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800844a:	f7fd fe6d 	bl	8006128 <__retarget_lock_release_recursive>
 800844e:	e7dd      	b.n	800840c <_fflush_r+0xc>

08008450 <__swhatbuf_r>:
 8008450:	b570      	push	{r4, r5, r6, lr}
 8008452:	460c      	mov	r4, r1
 8008454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008458:	4615      	mov	r5, r2
 800845a:	2900      	cmp	r1, #0
 800845c:	461e      	mov	r6, r3
 800845e:	b096      	sub	sp, #88	; 0x58
 8008460:	da0c      	bge.n	800847c <__swhatbuf_r+0x2c>
 8008462:	89a3      	ldrh	r3, [r4, #12]
 8008464:	2100      	movs	r1, #0
 8008466:	f013 0f80 	tst.w	r3, #128	; 0x80
 800846a:	bf0c      	ite	eq
 800846c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008470:	2340      	movne	r3, #64	; 0x40
 8008472:	2000      	movs	r0, #0
 8008474:	6031      	str	r1, [r6, #0]
 8008476:	602b      	str	r3, [r5, #0]
 8008478:	b016      	add	sp, #88	; 0x58
 800847a:	bd70      	pop	{r4, r5, r6, pc}
 800847c:	466a      	mov	r2, sp
 800847e:	f000 f879 	bl	8008574 <_fstat_r>
 8008482:	2800      	cmp	r0, #0
 8008484:	dbed      	blt.n	8008462 <__swhatbuf_r+0x12>
 8008486:	9901      	ldr	r1, [sp, #4]
 8008488:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800848c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008490:	4259      	negs	r1, r3
 8008492:	4159      	adcs	r1, r3
 8008494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008498:	e7eb      	b.n	8008472 <__swhatbuf_r+0x22>

0800849a <__smakebuf_r>:
 800849a:	898b      	ldrh	r3, [r1, #12]
 800849c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800849e:	079d      	lsls	r5, r3, #30
 80084a0:	4606      	mov	r6, r0
 80084a2:	460c      	mov	r4, r1
 80084a4:	d507      	bpl.n	80084b6 <__smakebuf_r+0x1c>
 80084a6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084aa:	6023      	str	r3, [r4, #0]
 80084ac:	6123      	str	r3, [r4, #16]
 80084ae:	2301      	movs	r3, #1
 80084b0:	6163      	str	r3, [r4, #20]
 80084b2:	b002      	add	sp, #8
 80084b4:	bd70      	pop	{r4, r5, r6, pc}
 80084b6:	466a      	mov	r2, sp
 80084b8:	ab01      	add	r3, sp, #4
 80084ba:	f7ff ffc9 	bl	8008450 <__swhatbuf_r>
 80084be:	9900      	ldr	r1, [sp, #0]
 80084c0:	4605      	mov	r5, r0
 80084c2:	4630      	mov	r0, r6
 80084c4:	f7ff f892 	bl	80075ec <_malloc_r>
 80084c8:	b948      	cbnz	r0, 80084de <__smakebuf_r+0x44>
 80084ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084ce:	059a      	lsls	r2, r3, #22
 80084d0:	d4ef      	bmi.n	80084b2 <__smakebuf_r+0x18>
 80084d2:	f023 0303 	bic.w	r3, r3, #3
 80084d6:	f043 0302 	orr.w	r3, r3, #2
 80084da:	81a3      	strh	r3, [r4, #12]
 80084dc:	e7e3      	b.n	80084a6 <__smakebuf_r+0xc>
 80084de:	89a3      	ldrh	r3, [r4, #12]
 80084e0:	6020      	str	r0, [r4, #0]
 80084e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084e6:	81a3      	strh	r3, [r4, #12]
 80084e8:	9b00      	ldr	r3, [sp, #0]
 80084ea:	6120      	str	r0, [r4, #16]
 80084ec:	6163      	str	r3, [r4, #20]
 80084ee:	9b01      	ldr	r3, [sp, #4]
 80084f0:	b15b      	cbz	r3, 800850a <__smakebuf_r+0x70>
 80084f2:	4630      	mov	r0, r6
 80084f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084f8:	f000 f84e 	bl	8008598 <_isatty_r>
 80084fc:	b128      	cbz	r0, 800850a <__smakebuf_r+0x70>
 80084fe:	89a3      	ldrh	r3, [r4, #12]
 8008500:	f023 0303 	bic.w	r3, r3, #3
 8008504:	f043 0301 	orr.w	r3, r3, #1
 8008508:	81a3      	strh	r3, [r4, #12]
 800850a:	89a3      	ldrh	r3, [r4, #12]
 800850c:	431d      	orrs	r5, r3
 800850e:	81a5      	strh	r5, [r4, #12]
 8008510:	e7cf      	b.n	80084b2 <__smakebuf_r+0x18>

08008512 <_raise_r>:
 8008512:	291f      	cmp	r1, #31
 8008514:	b538      	push	{r3, r4, r5, lr}
 8008516:	4604      	mov	r4, r0
 8008518:	460d      	mov	r5, r1
 800851a:	d904      	bls.n	8008526 <_raise_r+0x14>
 800851c:	2316      	movs	r3, #22
 800851e:	6003      	str	r3, [r0, #0]
 8008520:	f04f 30ff 	mov.w	r0, #4294967295
 8008524:	bd38      	pop	{r3, r4, r5, pc}
 8008526:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008528:	b112      	cbz	r2, 8008530 <_raise_r+0x1e>
 800852a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800852e:	b94b      	cbnz	r3, 8008544 <_raise_r+0x32>
 8008530:	4620      	mov	r0, r4
 8008532:	f000 f853 	bl	80085dc <_getpid_r>
 8008536:	462a      	mov	r2, r5
 8008538:	4601      	mov	r1, r0
 800853a:	4620      	mov	r0, r4
 800853c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008540:	f000 b83a 	b.w	80085b8 <_kill_r>
 8008544:	2b01      	cmp	r3, #1
 8008546:	d00a      	beq.n	800855e <_raise_r+0x4c>
 8008548:	1c59      	adds	r1, r3, #1
 800854a:	d103      	bne.n	8008554 <_raise_r+0x42>
 800854c:	2316      	movs	r3, #22
 800854e:	6003      	str	r3, [r0, #0]
 8008550:	2001      	movs	r0, #1
 8008552:	e7e7      	b.n	8008524 <_raise_r+0x12>
 8008554:	2400      	movs	r4, #0
 8008556:	4628      	mov	r0, r5
 8008558:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800855c:	4798      	blx	r3
 800855e:	2000      	movs	r0, #0
 8008560:	e7e0      	b.n	8008524 <_raise_r+0x12>
	...

08008564 <raise>:
 8008564:	4b02      	ldr	r3, [pc, #8]	; (8008570 <raise+0xc>)
 8008566:	4601      	mov	r1, r0
 8008568:	6818      	ldr	r0, [r3, #0]
 800856a:	f7ff bfd2 	b.w	8008512 <_raise_r>
 800856e:	bf00      	nop
 8008570:	200001d0 	.word	0x200001d0

08008574 <_fstat_r>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	2300      	movs	r3, #0
 8008578:	4d06      	ldr	r5, [pc, #24]	; (8008594 <_fstat_r+0x20>)
 800857a:	4604      	mov	r4, r0
 800857c:	4608      	mov	r0, r1
 800857e:	4611      	mov	r1, r2
 8008580:	602b      	str	r3, [r5, #0]
 8008582:	f7f9 fbae 	bl	8001ce2 <_fstat>
 8008586:	1c43      	adds	r3, r0, #1
 8008588:	d102      	bne.n	8008590 <_fstat_r+0x1c>
 800858a:	682b      	ldr	r3, [r5, #0]
 800858c:	b103      	cbz	r3, 8008590 <_fstat_r+0x1c>
 800858e:	6023      	str	r3, [r4, #0]
 8008590:	bd38      	pop	{r3, r4, r5, pc}
 8008592:	bf00      	nop
 8008594:	20000bcc 	.word	0x20000bcc

08008598 <_isatty_r>:
 8008598:	b538      	push	{r3, r4, r5, lr}
 800859a:	2300      	movs	r3, #0
 800859c:	4d05      	ldr	r5, [pc, #20]	; (80085b4 <_isatty_r+0x1c>)
 800859e:	4604      	mov	r4, r0
 80085a0:	4608      	mov	r0, r1
 80085a2:	602b      	str	r3, [r5, #0]
 80085a4:	f7f9 fbac 	bl	8001d00 <_isatty>
 80085a8:	1c43      	adds	r3, r0, #1
 80085aa:	d102      	bne.n	80085b2 <_isatty_r+0x1a>
 80085ac:	682b      	ldr	r3, [r5, #0]
 80085ae:	b103      	cbz	r3, 80085b2 <_isatty_r+0x1a>
 80085b0:	6023      	str	r3, [r4, #0]
 80085b2:	bd38      	pop	{r3, r4, r5, pc}
 80085b4:	20000bcc 	.word	0x20000bcc

080085b8 <_kill_r>:
 80085b8:	b538      	push	{r3, r4, r5, lr}
 80085ba:	2300      	movs	r3, #0
 80085bc:	4d06      	ldr	r5, [pc, #24]	; (80085d8 <_kill_r+0x20>)
 80085be:	4604      	mov	r4, r0
 80085c0:	4608      	mov	r0, r1
 80085c2:	4611      	mov	r1, r2
 80085c4:	602b      	str	r3, [r5, #0]
 80085c6:	f7f9 fb4a 	bl	8001c5e <_kill>
 80085ca:	1c43      	adds	r3, r0, #1
 80085cc:	d102      	bne.n	80085d4 <_kill_r+0x1c>
 80085ce:	682b      	ldr	r3, [r5, #0]
 80085d0:	b103      	cbz	r3, 80085d4 <_kill_r+0x1c>
 80085d2:	6023      	str	r3, [r4, #0]
 80085d4:	bd38      	pop	{r3, r4, r5, pc}
 80085d6:	bf00      	nop
 80085d8:	20000bcc 	.word	0x20000bcc

080085dc <_getpid_r>:
 80085dc:	f7f9 bb38 	b.w	8001c50 <_getpid>

080085e0 <_sbrk_r>:
 80085e0:	b538      	push	{r3, r4, r5, lr}
 80085e2:	2300      	movs	r3, #0
 80085e4:	4d05      	ldr	r5, [pc, #20]	; (80085fc <_sbrk_r+0x1c>)
 80085e6:	4604      	mov	r4, r0
 80085e8:	4608      	mov	r0, r1
 80085ea:	602b      	str	r3, [r5, #0]
 80085ec:	f7f9 fb9e 	bl	8001d2c <_sbrk>
 80085f0:	1c43      	adds	r3, r0, #1
 80085f2:	d102      	bne.n	80085fa <_sbrk_r+0x1a>
 80085f4:	682b      	ldr	r3, [r5, #0]
 80085f6:	b103      	cbz	r3, 80085fa <_sbrk_r+0x1a>
 80085f8:	6023      	str	r3, [r4, #0]
 80085fa:	bd38      	pop	{r3, r4, r5, pc}
 80085fc:	20000bcc 	.word	0x20000bcc

08008600 <_calloc_r>:
 8008600:	b570      	push	{r4, r5, r6, lr}
 8008602:	fba1 5402 	umull	r5, r4, r1, r2
 8008606:	b934      	cbnz	r4, 8008616 <_calloc_r+0x16>
 8008608:	4629      	mov	r1, r5
 800860a:	f7fe ffef 	bl	80075ec <_malloc_r>
 800860e:	4606      	mov	r6, r0
 8008610:	b928      	cbnz	r0, 800861e <_calloc_r+0x1e>
 8008612:	4630      	mov	r0, r6
 8008614:	bd70      	pop	{r4, r5, r6, pc}
 8008616:	220c      	movs	r2, #12
 8008618:	2600      	movs	r6, #0
 800861a:	6002      	str	r2, [r0, #0]
 800861c:	e7f9      	b.n	8008612 <_calloc_r+0x12>
 800861e:	462a      	mov	r2, r5
 8008620:	4621      	mov	r1, r4
 8008622:	f7fd fcf1 	bl	8006008 <memset>
 8008626:	e7f4      	b.n	8008612 <_calloc_r+0x12>

08008628 <_init>:
 8008628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800862a:	bf00      	nop
 800862c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800862e:	bc08      	pop	{r3}
 8008630:	469e      	mov	lr, r3
 8008632:	4770      	bx	lr

08008634 <_fini>:
 8008634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008636:	bf00      	nop
 8008638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800863a:	bc08      	pop	{r3}
 800863c:	469e      	mov	lr, r3
 800863e:	4770      	bx	lr
