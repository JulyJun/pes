/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef struct{
	int charSize;
	uint8_t charHolder;
	bool trigger;
	char printingBuffer[UART_BUF_SIZE];
	char writingBuffer[UART_BUF_SIZE];
} uartData_t;

typedef struct{
	float co2;
	float gas;
	float temperature_in;
	float humidity_in;
	float temperature_out;
	float humidity_out;
} dataHolder_t;

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
char data[BUFFER_SIZE];
uartData_t com;
dataHolder_t DataReader_g = {0,};
char* command = "com ";


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
void motiontrack(void);
void gasTrack(void);
void THtrack(void);
void relayUnitTest(void);
bool UserCommands(void);

StatusTypeDef InitSystem(StateTypeDef*);
StatusTypeDef HandShake();
StatusTypeDef Request_SQL_Read(StateTypeDef*);
StatusTypeDef Request_SQL_Write(StateTypeDef*);
StatusTypeDef Controller(StateTypeDef*);
StatusTypeDef ReadModules(StateTypeDef*);
StatusTypeDef SleepMode(void);
StatusTypeDef WakeUPMode(void);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 500);
	return len;
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	StateTypeDef runState = INIT;

	memset(com.printingBuffer, 0, UART_BUF_SIZE);
	com.charSize = 0;
	com.printingBuffer[com.charSize] = '\0';
	com.trigger = false;
	memcpy(com.writingBuffer, com.printingBuffer, UART_BUF_SIZE);

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&com.charHolder, sizeof(com.charHolder));

  printf("device init\r\n");
  InitSystem(&runState);
  printf("init\r\n");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#if MODULETEST
    gasTrack();
    THtrack();
    relayUnitTest();
    HAL_Delay(1500);
#endif

#if DEBUG_TEST
    UserCommands();
#endif

#if READY_TO_USE
    StatusTypeDef safeRun;

    switch (runState)
    {
		case SQL_WRITE_REQUEST:
			safeRun = Request_SQL_Read(&runState);
			//printf("enter sqlWrite()\r\n");
			assert(safeRun == OK);
			break;
		case CONTROL_SYSTEM:
			safeRun = Controller(&runState);
			//printf("enter Controller()\r\n");
			assert(safeRun == OK);
			break;
		case READ_MODULES:
			safeRun = ReadModules(&runState);
			//printf("enter ReadModules()\r\n");
			assert(safeRun == OK);
			break;
		case SLEEP:
			safeRun = SleepMode();
			//printf("enter SleepMode()\r\n");
			assert(safeRun == OK);
			break;
		default:
			// should not enter
			assert(false);
			break;
	}
#endif
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = ENABLE;
  hadc1.Init.NbrOfDiscConversion = 3;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 3;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIR_GPIO_Port, PIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_Pin|RELAY_SWITCH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PD0 PD1 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : PA5 PA6 PA7 PA8
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PIR_Pin */
  GPIO_InitStruct.Pin = PIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : RELAY_Pin RELAY_SWITCH_Pin */
  GPIO_InitStruct.Pin = RELAY_Pin|RELAY_SWITCH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
/*
 * @note: buffer size is intentionally set to 1, for reading enter key
 * 				2Xspacebar equals to enter key
 * */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	WakeUPMode();
	if(huart->Instance == USART2)
	{
		if(com.charHolder == '\n')
		{
			printf(com.printingBuffer);
			printf("\r\n");
			memcpy(com.writingBuffer, com.printingBuffer, sizeof(com.printingBuffer));
			memset(com.printingBuffer, 0, sizeof(com.printingBuffer));
			com.charSize = 0;
			com.printingBuffer[com.charSize] = '\0';
			com.trigger = true;
		}
		else
		{
			WakeUPMode();
			com.printingBuffer[com.charSize] = com.charHolder;
			com.printingBuffer[com.charSize + 1] = '\0';
			// printf("%c", com.charHolder);
			com.charSize++;
		}
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t *)&com.charHolder, sizeof(com.charHolder));
}

StatusTypeDef InitSystem(StateTypeDef* runState)
{
	StatusTypeDef status;
	status = HandShake();
	assert(status == OK);

	status = ReadModules(runState);
	assert(status == OK);

	status = Request_SQL_Read(runState);
	assert(status == OK);

	status = Controller(runState);
	assert(status == OK);

	*runState = SQL_WRITE_REQUEST;
	return OK;
}
StatusTypeDef HandShake()
{
	printf("Hello PC\r\n");
	HAL_Delay(5000);
	while(strncmp(com.writingBuffer, "Hello ST\r", sizeof("Hello ST\r") - 1) != 0)
	{
		printf("Hello PC\r\n");
		HAL_Delay(5000);
	}
	printf("HandShake Successful\r\n");

	return OK;
}
StatusTypeDef Request_SQL_Read(StateTypeDef* runState)
{
	char value[30] = {0,};
	char* ptr;
	int humidPt = 0;
	printf("Request SQL Data\r\n");
#if 0
	while(strncmp(com.writingBuffer, "end\r", sizeof("end\r") - 1) != 0)
	{
		if(strncmp(com.writingBuffer, "TEMP: ", sizeof("TEMP: ") - 1) == 0)
		{
			for(int i = 0; i < com.charSize; i++)
			{
				if(strncmp(com.writingBuffer + i, "HUMID: ", sizeof("HUMID: ")) == 0)
				{
					humidPt = i;
					break;
				}
			}
			ptr = com.writingBuffer + sizeof("TEMP: ") - 1;
			strncpy(value, ptr, humidPt - sizeof("TEMP: ") + 1);
			value[humidPt - sizeof("TEMP: ") + 1] = '\0';

			ptr = com.writingBuffer + humidPt - sizeof("TEMP: ") + 1;
			DataReader_g.temperature_out = strtod(value, NULL);
			printf("temp: %.2f\r\n", DataReader_g.temperature_out);
		}
		printf("trapped\r\n");
		HAL_Delay(2000);
	}
#endif
	printf("Req TEMP\r\n");
	while(com.trigger == false)
	{
		// loop till trigger on
		HAL_Delay(50);
	}
	com.trigger = false;
	DataReader_g.temperature_out = strtod(com.writingBuffer, NULL);
	printf("%f\r\n", DataReader_g.temperature_out);

	printf("Req HUMID\r\n");
	while(com.trigger == false)
	{
		// loop till trigger on
		HAL_Delay(50);
	}
	com.trigger = false;
	DataReader_g.humidity_out = strtod(com.writingBuffer, NULL);
	printf("%f\r\n", DataReader_g.humidity_out);
	printf("end read sql\r\n");

	*runState = READ_MODULES;
	return OK;
}
StatusTypeDef Request_SQL_Write(StateTypeDef* runState)
{
	*runState = READ_MODULES;
	*runState = SLEEP;
	return OK;
}
StatusTypeDef Controller(StateTypeDef* runState)
{
	*runState = SQL_WRITE_REQUEST;
	return OK;
}
StatusTypeDef ReadModules(StateTypeDef* runState)
{
	if(*runState == INIT)
	{
		GetGasValue();
		GetTempHumidValue();
		printf("read modules");
	}
	else
	{
		*runState = SQL_WRITE_REQUEST;
		*runState = CONTROL_SYSTEM;
	}

	return OK;
}

// reference: https://wiki.st.com/stm32mcu/wiki/Getting_started_with_PWR
StatusTypeDef SleepMode()
{
	// SUSPEND SYSTICK
	HAL_SuspendTick();
	// ENABLE POWER PERIPHERAL
	__HAL_RCC_PWR_CLK_ENABLE();
	// SLEEP MODE
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
}

StatusTypeDef WakeUPMode()
{
	HAL_ResumeTick();
	return OK;
}

bool UserCommands()
{
	if(com.trigger == false)
	{
		return false;
	}
	if(com.charSize < COMMAND_MIN_LENGTH)
	{
		return false;
	}

	size_t index = 0;
	while(*command != '\0')
	{
		if(com.writingBuffer[index] != *command)
		{
			printf("COMMANDINIT: %d", COMMANDINIT);
			printf("command: %c\r\nbuffer: %c\r\n", *command, com.writingBuffer[index]);
			com.trigger = false;
			return false;
		}
		++command;
		++index;
	}
	printf("str: %c\r\n", com.writingBuffer[COMMANDINIT]);
	if(com.writingBuffer[COMMANDINIT] == 'd')
	{
		//TODO: do sth
	}
	else if(com.writingBuffer[COMMANDINIT] == 'a')
	{
		//TODO: do sth
		HAL_GPIO_TogglePin(RELAY_SWITCH_GPIO_Port, RELAY_SWITCH_Pin);
		printf("command init\r\n");
		printf("*************\r\n");
		printf(com.writingBuffer);
		printf("\r\n");
		printf("*************\r\n");
		HAL_Delay(1000);
	}

	com.trigger = false;
	return true;
}

/*
 * @note not yet completely work
 * @port/pin PA9
 * */
void motionTrack(void)
{
	GPIO_PinState motionDetected = HAL_GPIO_ReadPin(PIR_GPIO_Port, PIR_Pin);
	if(motionDetected == SET)
	{
		printf("motion detected\r\n");
	}
	else
	{
		printf("No one is there\r\n");
	}
}

// read data from gas
// @note: no params but should initialize DataHolder_t globally
void GetGasValue()
{
	HAL_ADC_Start(&hadc1);
	HAL_ADC_PollForConversion(&hadc1, 10);
	float gas = HAL_ADC_GetValue(&hadc1);
	DataReader_g.gas = (gas / ADC_BIT_RESOLUTION * 1024);
}
void GetTempHumidValue()
{
	HAL_ADC_Start(&hadc1);
	HAL_ADC_PollForConversion(&hadc1, 10);
	float temp = HAL_ADC_GetValue(&hadc1);

	HAL_ADC_Start(&hadc1);
	HAL_ADC_PollForConversion(&hadc1, 10);
	float hud = HAL_ADC_GetValue(&hadc1);

	DataReader_g.temperature_in = -66.875 + 218.75 * (temp / ADC_BIT_RESOLUTION);
	DataReader_g.humidity_in = -12.5 + 125 * (hud / ADC_BIT_RESOLUTION);
}
//TODO: should attach other modules
// void...

/**********************************************test*************************************************************/
/*
 * @note STM32 is 12bits data transfer and Arduino is 10bits
 * 5v / 1024
 * 3.3 / 4096
 * still confuse 16bits and 12bits
 * */
void gasTrack(void)
{
	  HAL_ADC_Start(&hadc1);
	  HAL_ADC_PollForConversion(&hadc1, 10);
	  float gasVal = HAL_ADC_GetValue(&hadc1);

	  gasVal = (int)(gasVal / ADC_BIT_RESOLUTION * 1024);

	  memset(data, 0 , sizeof(data));
	  sprintf(data, "current gas value: %0.2d\r\n", gasVal);
	  printf(data);
}
void THtrack(void)
{
	HAL_ADC_Start(&hadc1);
	HAL_ADC_PollForConversion(&hadc1, 10);
	float temp = HAL_ADC_GetValue(&hadc1);

	HAL_ADC_Start(&hadc1);
	HAL_ADC_PollForConversion(&hadc1, 10);
	float hud = HAL_ADC_GetValue(&hadc1);

	temp = -66.875 + 218.75 * (temp / ADC_BIT_RESOLUTION);
	hud = -12.5 + 125 * (hud / ADC_BIT_RESOLUTION);
	memset(data, 0 , sizeof(data));
	sprintf(data, "current temp: %0.2f`C\r\ncurrent humuduty: %0.2f%%%%\r\n\r\n", temp, hud);

	printf(data);
}
void relayUnitTest(void)
{
	//HAL_GPIO_TogglePin(RELAY_GPIO_Port, RELAY_Pin);
	int pinState = HIGH;
	HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, pinState);
	HAL_GPIO_WritePin(RELAY_SWITCH_GPIO_Port, RELAY_SWITCH_Pin, pinState);
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
